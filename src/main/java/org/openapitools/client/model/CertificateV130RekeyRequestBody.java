/*
 * Redfish
 * This contains the definition of a Redfish service.
 *
 * The version of the OpenAPI document: 2021.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * This action generates a new key-pair for a certificate and produces a certificate signing request.
 */
@ApiModel(description = "This action generates a new key-pair for a certificate and produces a certificate signing request.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T10:33:09.083984300-06:00[America/Denver]")
public class CertificateV130RekeyRequestBody {
  public static final String SERIALIZED_NAME_CHALLENGE_PASSWORD = "ChallengePassword";
  @SerializedName(SERIALIZED_NAME_CHALLENGE_PASSWORD)
  private String challengePassword;

  public static final String SERIALIZED_NAME_KEY_BIT_LENGTH = "KeyBitLength";
  @SerializedName(SERIALIZED_NAME_KEY_BIT_LENGTH)
  private Long keyBitLength;

  public static final String SERIALIZED_NAME_KEY_CURVE_ID = "KeyCurveId";
  @SerializedName(SERIALIZED_NAME_KEY_CURVE_ID)
  private String keyCurveId;

  public static final String SERIALIZED_NAME_KEY_PAIR_ALGORITHM = "KeyPairAlgorithm";
  @SerializedName(SERIALIZED_NAME_KEY_PAIR_ALGORITHM)
  private String keyPairAlgorithm;


  public CertificateV130RekeyRequestBody challengePassword(String challengePassword) {
    
    this.challengePassword = challengePassword;
    return this;
  }

   /**
   * The challenge password to apply to the certificate for revocation requests.
   * @return challengePassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The challenge password to apply to the certificate for revocation requests.")

  public String getChallengePassword() {
    return challengePassword;
  }


  public void setChallengePassword(String challengePassword) {
    this.challengePassword = challengePassword;
  }


  public CertificateV130RekeyRequestBody keyBitLength(Long keyBitLength) {
    
    this.keyBitLength = keyBitLength;
    return this;
  }

   /**
   * The length of the key, in bits, if needed based on the KeyPairAlgorithm parameter value.
   * @return keyBitLength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The length of the key, in bits, if needed based on the KeyPairAlgorithm parameter value.")

  public Long getKeyBitLength() {
    return keyBitLength;
  }


  public void setKeyBitLength(Long keyBitLength) {
    this.keyBitLength = keyBitLength;
  }


  public CertificateV130RekeyRequestBody keyCurveId(String keyCurveId) {
    
    this.keyCurveId = keyCurveId;
    return this;
  }

   /**
   * The curve ID to use with the key, if needed based on the KeyPairAlgorithm parameter value.
   * @return keyCurveId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The curve ID to use with the key, if needed based on the KeyPairAlgorithm parameter value.")

  public String getKeyCurveId() {
    return keyCurveId;
  }


  public void setKeyCurveId(String keyCurveId) {
    this.keyCurveId = keyCurveId;
  }


  public CertificateV130RekeyRequestBody keyPairAlgorithm(String keyPairAlgorithm) {
    
    this.keyPairAlgorithm = keyPairAlgorithm;
    return this;
  }

   /**
   * The type of key-pair for use with signing algorithms.
   * @return keyPairAlgorithm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of key-pair for use with signing algorithms.")

  public String getKeyPairAlgorithm() {
    return keyPairAlgorithm;
  }


  public void setKeyPairAlgorithm(String keyPairAlgorithm) {
    this.keyPairAlgorithm = keyPairAlgorithm;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateV130RekeyRequestBody certificateV130RekeyRequestBody = (CertificateV130RekeyRequestBody) o;
    return Objects.equals(this.challengePassword, certificateV130RekeyRequestBody.challengePassword) &&
        Objects.equals(this.keyBitLength, certificateV130RekeyRequestBody.keyBitLength) &&
        Objects.equals(this.keyCurveId, certificateV130RekeyRequestBody.keyCurveId) &&
        Objects.equals(this.keyPairAlgorithm, certificateV130RekeyRequestBody.keyPairAlgorithm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(challengePassword, keyBitLength, keyCurveId, keyPairAlgorithm);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateV130RekeyRequestBody {\n");
    sb.append("    challengePassword: ").append(toIndentedString(challengePassword)).append("\n");
    sb.append("    keyBitLength: ").append(toIndentedString(keyBitLength)).append("\n");
    sb.append("    keyCurveId: ").append(toIndentedString(keyCurveId)).append("\n");
    sb.append("    keyPairAlgorithm: ").append(toIndentedString(keyPairAlgorithm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

