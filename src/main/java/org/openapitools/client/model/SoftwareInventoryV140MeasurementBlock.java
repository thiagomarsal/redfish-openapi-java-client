/*
 * Redfish
 * This contains the definition of a Redfish service.
 *
 * The version of the OpenAPI document: 2021.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * The DSP0274-defined measurement block information.
 */
@ApiModel(description = "The DSP0274-defined measurement block information.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T10:33:09.083984300-06:00[America/Denver]")
public class SoftwareInventoryV140MeasurementBlock {
  public static final String SERIALIZED_NAME_MEASUREMENT = "Measurement";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT)
  private String measurement;

  public static final String SERIALIZED_NAME_MEASUREMENT_SIZE = "MeasurementSize";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_SIZE)
  private Long measurementSize;

  public static final String SERIALIZED_NAME_MEASUREMENT_SPECIFICATION = "MeasurementSpecification";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_SPECIFICATION)
  private Long measurementSpecification;


   /**
   * The hexadecimal string representation of the numeric value of the DSP0274-defined Measurement field  of the measurement block.
   * @return measurement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The hexadecimal string representation of the numeric value of the DSP0274-defined Measurement field  of the measurement block.")

  public String getMeasurement() {
    return measurement;
  }




   /**
   * The DSP0274-defined MeasurementSize field of the measurement block.
   * @return measurementSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The DSP0274-defined MeasurementSize field of the measurement block.")

  public Long getMeasurementSize() {
    return measurementSize;
  }




   /**
   * The DSP0274-defined MeasurementSpecification field of the measurement block.
   * @return measurementSpecification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The DSP0274-defined MeasurementSpecification field of the measurement block.")

  public Long getMeasurementSpecification() {
    return measurementSpecification;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SoftwareInventoryV140MeasurementBlock softwareInventoryV140MeasurementBlock = (SoftwareInventoryV140MeasurementBlock) o;
    return Objects.equals(this.measurement, softwareInventoryV140MeasurementBlock.measurement) &&
        Objects.equals(this.measurementSize, softwareInventoryV140MeasurementBlock.measurementSize) &&
        Objects.equals(this.measurementSpecification, softwareInventoryV140MeasurementBlock.measurementSpecification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(measurement, measurementSize, measurementSpecification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SoftwareInventoryV140MeasurementBlock {\n");
    sb.append("    measurement: ").append(toIndentedString(measurement)).append("\n");
    sb.append("    measurementSize: ").append(toIndentedString(measurementSize)).append("\n");
    sb.append("    measurementSpecification: ").append(toIndentedString(measurementSpecification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

