/*
 * Redfish
 * This contains the definition of a Redfish service.
 *
 * The version of the OpenAPI document: 2021.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * The information about protocol features that the service supports.
 */
@ApiModel(description = "The information about protocol features that the service supports.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T10:33:09.083984300-06:00[America/Denver]")
public class ServiceRootV1100ProtocolFeaturesSupported {
  public static final String SERIALIZED_NAME_DEEP_OPERATIONS = "DeepOperations";
  @SerializedName(SERIALIZED_NAME_DEEP_OPERATIONS)
  private Object deepOperations = null;

  public static final String SERIALIZED_NAME_EXCERPT_QUERY = "ExcerptQuery";
  @SerializedName(SERIALIZED_NAME_EXCERPT_QUERY)
  private Boolean excerptQuery;

  public static final String SERIALIZED_NAME_EXPAND_QUERY = "ExpandQuery";
  @SerializedName(SERIALIZED_NAME_EXPAND_QUERY)
  private Object expandQuery = null;

  public static final String SERIALIZED_NAME_FILTER_QUERY = "FilterQuery";
  @SerializedName(SERIALIZED_NAME_FILTER_QUERY)
  private Boolean filterQuery;

  public static final String SERIALIZED_NAME_ONLY_MEMBER_QUERY = "OnlyMemberQuery";
  @SerializedName(SERIALIZED_NAME_ONLY_MEMBER_QUERY)
  private Boolean onlyMemberQuery;

  public static final String SERIALIZED_NAME_SELECT_QUERY = "SelectQuery";
  @SerializedName(SERIALIZED_NAME_SELECT_QUERY)
  private Boolean selectQuery;


  public ServiceRootV1100ProtocolFeaturesSupported deepOperations(Object deepOperations) {
    
    this.deepOperations = deepOperations;
    return this;
  }

   /**
   * Get deepOperations
   * @return deepOperations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getDeepOperations() {
    return deepOperations;
  }


  public void setDeepOperations(Object deepOperations) {
    this.deepOperations = deepOperations;
  }


   /**
   * An indication of whether the service supports the excerpt query parameter.
   * @return excerptQuery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An indication of whether the service supports the excerpt query parameter.")

  public Boolean getExcerptQuery() {
    return excerptQuery;
  }




  public ServiceRootV1100ProtocolFeaturesSupported expandQuery(Object expandQuery) {
    
    this.expandQuery = expandQuery;
    return this;
  }

   /**
   * Get expandQuery
   * @return expandQuery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getExpandQuery() {
    return expandQuery;
  }


  public void setExpandQuery(Object expandQuery) {
    this.expandQuery = expandQuery;
  }


   /**
   * An indication of whether the service supports the $filter query parameter.
   * @return filterQuery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An indication of whether the service supports the $filter query parameter.")

  public Boolean getFilterQuery() {
    return filterQuery;
  }




   /**
   * An indication of whether the service supports the only query parameter.
   * @return onlyMemberQuery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An indication of whether the service supports the only query parameter.")

  public Boolean getOnlyMemberQuery() {
    return onlyMemberQuery;
  }




   /**
   * An indication of whether the service supports the $select query parameter.
   * @return selectQuery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An indication of whether the service supports the $select query parameter.")

  public Boolean getSelectQuery() {
    return selectQuery;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceRootV1100ProtocolFeaturesSupported serviceRootV1100ProtocolFeaturesSupported = (ServiceRootV1100ProtocolFeaturesSupported) o;
    return Objects.equals(this.deepOperations, serviceRootV1100ProtocolFeaturesSupported.deepOperations) &&
        Objects.equals(this.excerptQuery, serviceRootV1100ProtocolFeaturesSupported.excerptQuery) &&
        Objects.equals(this.expandQuery, serviceRootV1100ProtocolFeaturesSupported.expandQuery) &&
        Objects.equals(this.filterQuery, serviceRootV1100ProtocolFeaturesSupported.filterQuery) &&
        Objects.equals(this.onlyMemberQuery, serviceRootV1100ProtocolFeaturesSupported.onlyMemberQuery) &&
        Objects.equals(this.selectQuery, serviceRootV1100ProtocolFeaturesSupported.selectQuery);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deepOperations, excerptQuery, expandQuery, filterQuery, onlyMemberQuery, selectQuery);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceRootV1100ProtocolFeaturesSupported {\n");
    sb.append("    deepOperations: ").append(toIndentedString(deepOperations)).append("\n");
    sb.append("    excerptQuery: ").append(toIndentedString(excerptQuery)).append("\n");
    sb.append("    expandQuery: ").append(toIndentedString(expandQuery)).append("\n");
    sb.append("    filterQuery: ").append(toIndentedString(filterQuery)).append("\n");
    sb.append("    onlyMemberQuery: ").append(toIndentedString(onlyMemberQuery)).append("\n");
    sb.append("    selectQuery: ").append(toIndentedString(selectQuery)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

