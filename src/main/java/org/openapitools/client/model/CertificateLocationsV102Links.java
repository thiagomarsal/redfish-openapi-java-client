/*
 * Redfish
 * This contains the definition of a Redfish service.
 *
 * The version of the OpenAPI document: 2021.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * The links to other Resources that are related to this Resource.
 */
@ApiModel(description = "The links to other Resources that are related to this Resource.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T10:33:09.083984300-06:00[America/Denver]")
public class CertificateLocationsV102Links {
  public static final String SERIALIZED_NAME_CERTIFICATES = "Certificates";
  @SerializedName(SERIALIZED_NAME_CERTIFICATES)
  private List<Object> certificates = null;

  public static final String SERIALIZED_NAME_CERTIFICATES_AT_ODATA_COUNT = "Certificates@odata.count";
  @SerializedName(SERIALIZED_NAME_CERTIFICATES_AT_ODATA_COUNT)
  private Object certificatesAtOdataCount = null;

  public static final String SERIALIZED_NAME_OEM = "Oem";
  @SerializedName(SERIALIZED_NAME_OEM)
  private Object oem = null;


   /**
   * An array of links to the certificates installed on this service.
   * @return certificates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of links to the certificates installed on this service.")

  public List<Object> getCertificates() {
    return certificates;
  }




  public CertificateLocationsV102Links certificatesAtOdataCount(Object certificatesAtOdataCount) {
    
    this.certificatesAtOdataCount = certificatesAtOdataCount;
    return this;
  }

   /**
   * Get certificatesAtOdataCount
   * @return certificatesAtOdataCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getCertificatesAtOdataCount() {
    return certificatesAtOdataCount;
  }


  public void setCertificatesAtOdataCount(Object certificatesAtOdataCount) {
    this.certificatesAtOdataCount = certificatesAtOdataCount;
  }


  public CertificateLocationsV102Links oem(Object oem) {
    
    this.oem = oem;
    return this;
  }

   /**
   * Get oem
   * @return oem
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getOem() {
    return oem;
  }


  public void setOem(Object oem) {
    this.oem = oem;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateLocationsV102Links certificateLocationsV102Links = (CertificateLocationsV102Links) o;
    return Objects.equals(this.certificates, certificateLocationsV102Links.certificates) &&
        Objects.equals(this.certificatesAtOdataCount, certificateLocationsV102Links.certificatesAtOdataCount) &&
        Objects.equals(this.oem, certificateLocationsV102Links.oem);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificates, certificatesAtOdataCount, oem);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateLocationsV102Links {\n");
    sb.append("    certificates: ").append(toIndentedString(certificates)).append("\n");
    sb.append("    certificatesAtOdataCount: ").append(toIndentedString(certificatesAtOdataCount)).append("\n");
    sb.append("    oem: ").append(toIndentedString(oem)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

