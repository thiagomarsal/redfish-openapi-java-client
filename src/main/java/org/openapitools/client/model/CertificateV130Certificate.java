/*
 * Redfish
 * This contains the definition of a Redfish service.
 *
 * The version of the OpenAPI document: 2021.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * The Certificate schema describes a certificate that proves the identify of a component, account, or service.
 */
@ApiModel(description = "The Certificate schema describes a certificate that proves the identify of a component, account, or service.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T10:33:09.083984300-06:00[America/Denver]")
public class CertificateV130Certificate {
  public static final String SERIALIZED_NAME_AT_ODATA_CONTEXT = "@odata.context";
  @SerializedName(SERIALIZED_NAME_AT_ODATA_CONTEXT)
  private Object atOdataContext = null;

  public static final String SERIALIZED_NAME_AT_ODATA_ETAG = "@odata.etag";
  @SerializedName(SERIALIZED_NAME_AT_ODATA_ETAG)
  private Object atOdataEtag = null;

  public static final String SERIALIZED_NAME_AT_ODATA_ID = "@odata.id";
  @SerializedName(SERIALIZED_NAME_AT_ODATA_ID)
  private Object atOdataId = null;

  public static final String SERIALIZED_NAME_AT_ODATA_TYPE = "@odata.type";
  @SerializedName(SERIALIZED_NAME_AT_ODATA_TYPE)
  private Object atOdataType = null;

  public static final String SERIALIZED_NAME_ACTIONS = "Actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private Object actions = null;

  public static final String SERIALIZED_NAME_CERTIFICATE_STRING = "CertificateString";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_STRING)
  private String certificateString;

  public static final String SERIALIZED_NAME_CERTIFICATE_TYPE = "CertificateType";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_TYPE)
  private Object certificateType = null;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private Object description = null;

  public static final String SERIALIZED_NAME_FINGERPRINT = "Fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public static final String SERIALIZED_NAME_FINGERPRINT_HASH_ALGORITHM = "FingerprintHashAlgorithm";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT_HASH_ALGORITHM)
  private String fingerprintHashAlgorithm;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Object id = null;

  public static final String SERIALIZED_NAME_ISSUER = "Issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private Object issuer = null;

  public static final String SERIALIZED_NAME_KEY_USAGE = "KeyUsage";
  @SerializedName(SERIALIZED_NAME_KEY_USAGE)
  private List<Object> keyUsage = null;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private Object name = null;

  public static final String SERIALIZED_NAME_OEM = "Oem";
  @SerializedName(SERIALIZED_NAME_OEM)
  private Object oem = null;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "SerialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_SIGNATURE_ALGORITHM = "SignatureAlgorithm";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_ALGORITHM)
  private String signatureAlgorithm;

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private Object subject = null;

  public static final String SERIALIZED_NAME_UEFI_SIGNATURE_OWNER = "UefiSignatureOwner";
  @SerializedName(SERIALIZED_NAME_UEFI_SIGNATURE_OWNER)
  private String uefiSignatureOwner;

  public static final String SERIALIZED_NAME_VALID_NOT_AFTER = "ValidNotAfter";
  @SerializedName(SERIALIZED_NAME_VALID_NOT_AFTER)
  private OffsetDateTime validNotAfter;

  public static final String SERIALIZED_NAME_VALID_NOT_BEFORE = "ValidNotBefore";
  @SerializedName(SERIALIZED_NAME_VALID_NOT_BEFORE)
  private OffsetDateTime validNotBefore;


  public CertificateV130Certificate atOdataContext(Object atOdataContext) {
    
    this.atOdataContext = atOdataContext;
    return this;
  }

   /**
   * Get atOdataContext
   * @return atOdataContext
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getAtOdataContext() {
    return atOdataContext;
  }


  public void setAtOdataContext(Object atOdataContext) {
    this.atOdataContext = atOdataContext;
  }


  public CertificateV130Certificate atOdataEtag(Object atOdataEtag) {
    
    this.atOdataEtag = atOdataEtag;
    return this;
  }

   /**
   * Get atOdataEtag
   * @return atOdataEtag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getAtOdataEtag() {
    return atOdataEtag;
  }


  public void setAtOdataEtag(Object atOdataEtag) {
    this.atOdataEtag = atOdataEtag;
  }


  public CertificateV130Certificate atOdataId(Object atOdataId) {
    
    this.atOdataId = atOdataId;
    return this;
  }

   /**
   * Get atOdataId
   * @return atOdataId
  **/
  @ApiModelProperty(required = true, value = "")

  public Object getAtOdataId() {
    return atOdataId;
  }


  public void setAtOdataId(Object atOdataId) {
    this.atOdataId = atOdataId;
  }


  public CertificateV130Certificate atOdataType(Object atOdataType) {
    
    this.atOdataType = atOdataType;
    return this;
  }

   /**
   * Get atOdataType
   * @return atOdataType
  **/
  @ApiModelProperty(required = true, value = "")

  public Object getAtOdataType() {
    return atOdataType;
  }


  public void setAtOdataType(Object atOdataType) {
    this.atOdataType = atOdataType;
  }


  public CertificateV130Certificate actions(Object actions) {
    
    this.actions = actions;
    return this;
  }

   /**
   * Get actions
   * @return actions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getActions() {
    return actions;
  }


  public void setActions(Object actions) {
    this.actions = actions;
  }


   /**
   * The string for the certificate.
   * @return certificateString
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The string for the certificate.")

  public String getCertificateString() {
    return certificateString;
  }




  public CertificateV130Certificate certificateType(Object certificateType) {
    
    this.certificateType = certificateType;
    return this;
  }

   /**
   * Get certificateType
   * @return certificateType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getCertificateType() {
    return certificateType;
  }


  public void setCertificateType(Object certificateType) {
    this.certificateType = certificateType;
  }


  public CertificateV130Certificate description(Object description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getDescription() {
    return description;
  }


  public void setDescription(Object description) {
    this.description = description;
  }


   /**
   * The fingerprint of the certificate.
   * @return fingerprint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The fingerprint of the certificate.")

  public String getFingerprint() {
    return fingerprint;
  }




   /**
   * The hash algorithm for the fingerprint of the certificate.
   * @return fingerprintHashAlgorithm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The hash algorithm for the fingerprint of the certificate.")

  public String getFingerprintHashAlgorithm() {
    return fingerprintHashAlgorithm;
  }




  public CertificateV130Certificate id(Object id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(required = true, value = "")

  public Object getId() {
    return id;
  }


  public void setId(Object id) {
    this.id = id;
  }


  public CertificateV130Certificate issuer(Object issuer) {
    
    this.issuer = issuer;
    return this;
  }

   /**
   * Get issuer
   * @return issuer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getIssuer() {
    return issuer;
  }


  public void setIssuer(Object issuer) {
    this.issuer = issuer;
  }


   /**
   * The key usage extension, which defines the purpose of the public keys in this certificate.
   * @return keyUsage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The key usage extension, which defines the purpose of the public keys in this certificate.")

  public List<Object> getKeyUsage() {
    return keyUsage;
  }




  public CertificateV130Certificate name(Object name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "")

  public Object getName() {
    return name;
  }


  public void setName(Object name) {
    this.name = name;
  }


  public CertificateV130Certificate oem(Object oem) {
    
    this.oem = oem;
    return this;
  }

   /**
   * Get oem
   * @return oem
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getOem() {
    return oem;
  }


  public void setOem(Object oem) {
    this.oem = oem;
  }


   /**
   * The serial number of the certificate.
   * @return serialNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The serial number of the certificate.")

  public String getSerialNumber() {
    return serialNumber;
  }




   /**
   * The algorithm used for creating the signature of the certificate.
   * @return signatureAlgorithm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The algorithm used for creating the signature of the certificate.")

  public String getSignatureAlgorithm() {
    return signatureAlgorithm;
  }




  public CertificateV130Certificate subject(Object subject) {
    
    this.subject = subject;
    return this;
  }

   /**
   * Get subject
   * @return subject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getSubject() {
    return subject;
  }


  public void setSubject(Object subject) {
    this.subject = subject;
  }


   /**
   * The UEFI signature owner for this certificate.
   * @return uefiSignatureOwner
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The UEFI signature owner for this certificate.")

  public String getUefiSignatureOwner() {
    return uefiSignatureOwner;
  }




   /**
   * The date when the certificate is no longer valid.
   * @return validNotAfter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date when the certificate is no longer valid.")

  public OffsetDateTime getValidNotAfter() {
    return validNotAfter;
  }




   /**
   * The date when the certificate becomes valid.
   * @return validNotBefore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date when the certificate becomes valid.")

  public OffsetDateTime getValidNotBefore() {
    return validNotBefore;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateV130Certificate certificateV130Certificate = (CertificateV130Certificate) o;
    return Objects.equals(this.atOdataContext, certificateV130Certificate.atOdataContext) &&
        Objects.equals(this.atOdataEtag, certificateV130Certificate.atOdataEtag) &&
        Objects.equals(this.atOdataId, certificateV130Certificate.atOdataId) &&
        Objects.equals(this.atOdataType, certificateV130Certificate.atOdataType) &&
        Objects.equals(this.actions, certificateV130Certificate.actions) &&
        Objects.equals(this.certificateString, certificateV130Certificate.certificateString) &&
        Objects.equals(this.certificateType, certificateV130Certificate.certificateType) &&
        Objects.equals(this.description, certificateV130Certificate.description) &&
        Objects.equals(this.fingerprint, certificateV130Certificate.fingerprint) &&
        Objects.equals(this.fingerprintHashAlgorithm, certificateV130Certificate.fingerprintHashAlgorithm) &&
        Objects.equals(this.id, certificateV130Certificate.id) &&
        Objects.equals(this.issuer, certificateV130Certificate.issuer) &&
        Objects.equals(this.keyUsage, certificateV130Certificate.keyUsage) &&
        Objects.equals(this.name, certificateV130Certificate.name) &&
        Objects.equals(this.oem, certificateV130Certificate.oem) &&
        Objects.equals(this.serialNumber, certificateV130Certificate.serialNumber) &&
        Objects.equals(this.signatureAlgorithm, certificateV130Certificate.signatureAlgorithm) &&
        Objects.equals(this.subject, certificateV130Certificate.subject) &&
        Objects.equals(this.uefiSignatureOwner, certificateV130Certificate.uefiSignatureOwner) &&
        Objects.equals(this.validNotAfter, certificateV130Certificate.validNotAfter) &&
        Objects.equals(this.validNotBefore, certificateV130Certificate.validNotBefore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atOdataContext, atOdataEtag, atOdataId, atOdataType, actions, certificateString, certificateType, description, fingerprint, fingerprintHashAlgorithm, id, issuer, keyUsage, name, oem, serialNumber, signatureAlgorithm, subject, uefiSignatureOwner, validNotAfter, validNotBefore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateV130Certificate {\n");
    sb.append("    atOdataContext: ").append(toIndentedString(atOdataContext)).append("\n");
    sb.append("    atOdataEtag: ").append(toIndentedString(atOdataEtag)).append("\n");
    sb.append("    atOdataId: ").append(toIndentedString(atOdataId)).append("\n");
    sb.append("    atOdataType: ").append(toIndentedString(atOdataType)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    certificateString: ").append(toIndentedString(certificateString)).append("\n");
    sb.append("    certificateType: ").append(toIndentedString(certificateType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    fingerprintHashAlgorithm: ").append(toIndentedString(fingerprintHashAlgorithm)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    keyUsage: ").append(toIndentedString(keyUsage)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    oem: ").append(toIndentedString(oem)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    signatureAlgorithm: ").append(toIndentedString(signatureAlgorithm)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    uefiSignatureOwner: ").append(toIndentedString(uefiSignatureOwner)).append("\n");
    sb.append("    validNotAfter: ").append(toIndentedString(validNotAfter)).append("\n");
    sb.append("    validNotBefore: ").append(toIndentedString(validNotBefore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

