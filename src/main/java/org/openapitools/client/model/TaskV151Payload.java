/*
 * Redfish
 * This contains the definition of a Redfish service.
 *
 * The version of the OpenAPI document: 2021.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * The HTTP and JSON payload details for this Task.
 */
@ApiModel(description = "The HTTP and JSON payload details for this Task.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-24T10:33:09.083984300-06:00[America/Denver]")
public class TaskV151Payload {
  public static final String SERIALIZED_NAME_HTTP_HEADERS = "HttpHeaders";
  @SerializedName(SERIALIZED_NAME_HTTP_HEADERS)
  private List<String> httpHeaders = null;

  public static final String SERIALIZED_NAME_HTTP_OPERATION = "HttpOperation";
  @SerializedName(SERIALIZED_NAME_HTTP_OPERATION)
  private String httpOperation;

  public static final String SERIALIZED_NAME_JSON_BODY = "JsonBody";
  @SerializedName(SERIALIZED_NAME_JSON_BODY)
  private String jsonBody;

  public static final String SERIALIZED_NAME_TARGET_URI = "TargetUri";
  @SerializedName(SERIALIZED_NAME_TARGET_URI)
  private String targetUri;


   /**
   * An array of HTTP headers that this task includes.
   * @return httpHeaders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of HTTP headers that this task includes.")

  public List<String> getHttpHeaders() {
    return httpHeaders;
  }




   /**
   * The HTTP operation to perform to execute this task.
   * @return httpOperation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The HTTP operation to perform to execute this task.")

  public String getHttpOperation() {
    return httpOperation;
  }




   /**
   * The JSON payload to use in the execution of this task.
   * @return jsonBody
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The JSON payload to use in the execution of this task.")

  public String getJsonBody() {
    return jsonBody;
  }




   /**
   * The URI of the target for this task.
   * @return targetUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URI of the target for this task.")

  public String getTargetUri() {
    return targetUri;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskV151Payload taskV151Payload = (TaskV151Payload) o;
    return Objects.equals(this.httpHeaders, taskV151Payload.httpHeaders) &&
        Objects.equals(this.httpOperation, taskV151Payload.httpOperation) &&
        Objects.equals(this.jsonBody, taskV151Payload.jsonBody) &&
        Objects.equals(this.targetUri, taskV151Payload.targetUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(httpHeaders, httpOperation, jsonBody, targetUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskV151Payload {\n");
    sb.append("    httpHeaders: ").append(toIndentedString(httpHeaders)).append("\n");
    sb.append("    httpOperation: ").append(toIndentedString(httpOperation)).append("\n");
    sb.append("    jsonBody: ").append(toIndentedString(jsonBody)).append("\n");
    sb.append("    targetUri: ").append(toIndentedString(targetUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

