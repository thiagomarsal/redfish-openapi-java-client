/*
 * Redfish
 * This contains the definition of a Redfish service.
 *
 * The version of the OpenAPI document: 2021.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets PhysicalContext_PhysicalContext
 */
@JsonAdapter(PhysicalContextPhysicalContext.Adapter.class)
public enum PhysicalContextPhysicalContext {
  
  ROOM("Room"),
  
  INTAKE("Intake"),
  
  EXHAUST("Exhaust"),
  
  LIQUIDINLET("LiquidInlet"),
  
  LIQUIDOUTLET("LiquidOutlet"),
  
  FRONT("Front"),
  
  BACK("Back"),
  
  UPPER("Upper"),
  
  LOWER("Lower"),
  
  CPU("CPU"),
  
  CPUSUBSYSTEM("CPUSubsystem"),
  
  GPU("GPU"),
  
  GPUSUBSYSTEM("GPUSubsystem"),
  
  FPGA("FPGA"),
  
  ACCELERATOR("Accelerator"),
  
  ASIC("ASIC"),
  
  BACKPLANE("Backplane"),
  
  SYSTEMBOARD("SystemBoard"),
  
  POWERSUPPLY("PowerSupply"),
  
  POWERSUBSYSTEM("PowerSubsystem"),
  
  VOLTAGEREGULATOR("VoltageRegulator"),
  
  RECTIFIER("Rectifier"),
  
  STORAGEDEVICE("StorageDevice"),
  
  NETWORKINGDEVICE("NetworkingDevice"),
  
  COMPUTEBAY("ComputeBay"),
  
  STORAGEBAY("StorageBay"),
  
  NETWORKBAY("NetworkBay"),
  
  EXPANSIONBAY("ExpansionBay"),
  
  POWERSUPPLYBAY("PowerSupplyBay"),
  
  MEMORY("Memory"),
  
  MEMORYSUBSYSTEM("MemorySubsystem"),
  
  CHASSIS("Chassis"),
  
  FAN("Fan"),
  
  COOLINGSUBSYSTEM("CoolingSubsystem"),
  
  MOTOR("Motor"),
  
  TRANSFORMER("Transformer"),
  
  ACUTILITYINPUT("ACUtilityInput"),
  
  ACSTATICBYPASSINPUT("ACStaticBypassInput"),
  
  ACMAINTENANCEBYPASSINPUT("ACMaintenanceBypassInput"),
  
  DCBUS("DCBus"),
  
  ACOUTPUT("ACOutput"),
  
  ACINPUT("ACInput"),
  
  TRUSTEDMODULE("TrustedModule"),
  
  BOARD("Board"),
  
  TRANSCEIVER("Transceiver");

  private String value;

  PhysicalContextPhysicalContext(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static PhysicalContextPhysicalContext fromValue(String value) {
    for (PhysicalContextPhysicalContext b : PhysicalContextPhysicalContext.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<PhysicalContextPhysicalContext> {
    @Override
    public void write(final JsonWriter jsonWriter, final PhysicalContextPhysicalContext enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public PhysicalContextPhysicalContext read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return PhysicalContextPhysicalContext.fromValue(value);
    }
  }
}

