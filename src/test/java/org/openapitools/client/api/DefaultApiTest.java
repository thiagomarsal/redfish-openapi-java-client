/*
 * Redfish
 * This contains the definition of a Redfish service.
 *
 * The version of the OpenAPI document: 2021.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountServiceV190AccountService;
import org.openapitools.client.model.AggregateCollectionAggregateCollection;
import org.openapitools.client.model.AggregateV101AddElementsRequestBody;
import org.openapitools.client.model.AggregateV101Aggregate;
import org.openapitools.client.model.AggregateV101RemoveElementsRequestBody;
import org.openapitools.client.model.AggregateV101ResetRequestBody;
import org.openapitools.client.model.AggregationServiceV101AggregationService;
import org.openapitools.client.model.AggregationServiceV101ResetRequestBody;
import org.openapitools.client.model.AggregationServiceV101SetDefaultBootOrderRequestBody;
import org.openapitools.client.model.AggregationSourceCollectionAggregationSourceCollection;
import org.openapitools.client.model.AggregationSourceV110AggregationSource;
import org.openapitools.client.model.AssemblyV130Assembly;
import org.openapitools.client.model.CertificateCollectionCertificateCollection;
import org.openapitools.client.model.CertificateLocationsV102CertificateLocations;
import org.openapitools.client.model.CertificateServiceV104CertificateService;
import org.openapitools.client.model.CertificateServiceV104GenerateCSRRequestBody;
import org.openapitools.client.model.CertificateServiceV104GenerateCSRResponse;
import org.openapitools.client.model.CertificateServiceV104ReplaceCertificateRequestBody;
import org.openapitools.client.model.CertificateV130Certificate;
import org.openapitools.client.model.CertificateV130RekeyRequestBody;
import org.openapitools.client.model.CertificateV130RekeyResponse;
import org.openapitools.client.model.CertificateV130RenewRequestBody;
import org.openapitools.client.model.CertificateV130RenewResponse;
import org.openapitools.client.model.ChassisCollectionChassisCollection;
import org.openapitools.client.model.ChassisV1160Chassis;
import org.openapitools.client.model.ChassisV1160ResetRequestBody;
import org.openapitools.client.model.ConnectionMethodCollectionConnectionMethodCollection;
import org.openapitools.client.model.ConnectionMethodV100ConnectionMethod;
import org.openapitools.client.model.ExternalAccountProviderCollectionExternalAccountProviderCollection;
import org.openapitools.client.model.ExternalAccountProviderV120ExternalAccountProvider;
import org.openapitools.client.model.ManagerAccountCollectionManagerAccountCollection;
import org.openapitools.client.model.ManagerAccountV180ManagerAccount;
import org.openapitools.client.model.RedfishError;
import org.openapitools.client.model.RoleCollectionRoleCollection;
import org.openapitools.client.model.RoleV131Role;
import org.openapitools.client.model.ServiceRootV1100ServiceRoot;
import org.openapitools.client.model.TaskV151Task;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceAccountsGetTest() throws ApiException {
        ManagerAccountCollectionManagerAccountCollection response = api.redfishV1AccountServiceAccountsGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String managerAccountId = null;
        String certificateId = null;
        CertificateV130RekeyRequestBody certificateV130RekeyRequestBody = null;
        CertificateV130RekeyResponse response = api.redfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRekeyPost(managerAccountId, certificateId, certificateV130RekeyRequestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String managerAccountId = null;
        String certificateId = null;
        CertificateV130RenewRequestBody certificateV130RenewRequestBody = null;
        CertificateV130RenewResponse response = api.redfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRenewPost(managerAccountId, certificateId, certificateV130RenewRequestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String managerAccountId = null;
        String certificateId = null;
        CertificateV130Certificate response = api.redfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdDelete(managerAccountId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdGetTest() throws ApiException {
        String managerAccountId = null;
        String certificateId = null;
        CertificateV130Certificate response = api.redfishV1AccountServiceAccountsManagerAccountIdCertificatesCertificateIdGet(managerAccountId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceAccountsManagerAccountIdCertificatesGetTest() throws ApiException {
        String managerAccountId = null;
        CertificateCollectionCertificateCollection response = api.redfishV1AccountServiceAccountsManagerAccountIdCertificatesGet(managerAccountId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceAccountsManagerAccountIdCertificatesPostTest() throws ApiException {
        String managerAccountId = null;
        CertificateV130Certificate certificateV130Certificate = null;
        CertificateV130Certificate response = api.redfishV1AccountServiceAccountsManagerAccountIdCertificatesPost(managerAccountId, certificateV130Certificate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceAccountsManagerAccountIdDeleteTest() throws ApiException {
        String managerAccountId = null;
        ManagerAccountV180ManagerAccount response = api.redfishV1AccountServiceAccountsManagerAccountIdDelete(managerAccountId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceAccountsManagerAccountIdGetTest() throws ApiException {
        String managerAccountId = null;
        ManagerAccountV180ManagerAccount response = api.redfishV1AccountServiceAccountsManagerAccountIdGet(managerAccountId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceAccountsManagerAccountIdPatchTest() throws ApiException {
        String managerAccountId = null;
        ManagerAccountV180ManagerAccount managerAccountV180ManagerAccount = null;
        ManagerAccountV180ManagerAccount response = api.redfishV1AccountServiceAccountsManagerAccountIdPatch(managerAccountId, managerAccountV180ManagerAccount);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceAccountsManagerAccountIdPutTest() throws ApiException {
        String managerAccountId = null;
        ManagerAccountV180ManagerAccount managerAccountV180ManagerAccount = null;
        ManagerAccountV180ManagerAccount response = api.redfishV1AccountServiceAccountsManagerAccountIdPut(managerAccountId, managerAccountV180ManagerAccount);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceAccountsPostTest() throws ApiException {
        ManagerAccountV180ManagerAccount managerAccountV180ManagerAccount = null;
        ManagerAccountV180ManagerAccount response = api.redfishV1AccountServiceAccountsPost(managerAccountV180ManagerAccount);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String certificateId = null;
        CertificateV130RekeyRequestBody certificateV130RekeyRequestBody = null;
        CertificateV130RekeyResponse response = api.redfishV1AccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRekeyPost(certificateId, certificateV130RekeyRequestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String certificateId = null;
        CertificateV130RenewRequestBody certificateV130RenewRequestBody = null;
        CertificateV130RenewResponse response = api.redfishV1AccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRenewPost(certificateId, certificateV130RenewRequestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceActiveDirectoryCertificatesCertificateIdDeleteTest() throws ApiException {
        String certificateId = null;
        CertificateV130Certificate response = api.redfishV1AccountServiceActiveDirectoryCertificatesCertificateIdDelete(certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceActiveDirectoryCertificatesCertificateIdGetTest() throws ApiException {
        String certificateId = null;
        CertificateV130Certificate response = api.redfishV1AccountServiceActiveDirectoryCertificatesCertificateIdGet(certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceActiveDirectoryCertificatesGetTest() throws ApiException {
        CertificateCollectionCertificateCollection response = api.redfishV1AccountServiceActiveDirectoryCertificatesGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceActiveDirectoryCertificatesPostTest() throws ApiException {
        CertificateV130Certificate certificateV130Certificate = null;
        CertificateV130Certificate response = api.redfishV1AccountServiceActiveDirectoryCertificatesPost(certificateV130Certificate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String externalAccountProviderId = null;
        String certificateId = null;
        CertificateV130RekeyRequestBody certificateV130RekeyRequestBody = null;
        CertificateV130RekeyResponse response = api.redfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRekeyPost(externalAccountProviderId, certificateId, certificateV130RekeyRequestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String externalAccountProviderId = null;
        String certificateId = null;
        CertificateV130RenewRequestBody certificateV130RenewRequestBody = null;
        CertificateV130RenewResponse response = api.redfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRenewPost(externalAccountProviderId, certificateId, certificateV130RenewRequestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String externalAccountProviderId = null;
        String certificateId = null;
        CertificateV130Certificate response = api.redfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdDelete(externalAccountProviderId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdGetTest() throws ApiException {
        String externalAccountProviderId = null;
        String certificateId = null;
        CertificateV130Certificate response = api.redfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdGet(externalAccountProviderId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesGetTest() throws ApiException {
        String externalAccountProviderId = null;
        CertificateCollectionCertificateCollection response = api.redfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesGet(externalAccountProviderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesPostTest() throws ApiException {
        String externalAccountProviderId = null;
        CertificateV130Certificate certificateV130Certificate = null;
        CertificateV130Certificate response = api.redfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesPost(externalAccountProviderId, certificateV130Certificate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdDeleteTest() throws ApiException {
        String externalAccountProviderId = null;
        ExternalAccountProviderV120ExternalAccountProvider response = api.redfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdDelete(externalAccountProviderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdGetTest() throws ApiException {
        String externalAccountProviderId = null;
        ExternalAccountProviderV120ExternalAccountProvider response = api.redfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdGet(externalAccountProviderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdPatchTest() throws ApiException {
        String externalAccountProviderId = null;
        ExternalAccountProviderV120ExternalAccountProvider externalAccountProviderV120ExternalAccountProvider = null;
        ExternalAccountProviderV120ExternalAccountProvider response = api.redfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdPatch(externalAccountProviderId, externalAccountProviderV120ExternalAccountProvider);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdPutTest() throws ApiException {
        String externalAccountProviderId = null;
        ExternalAccountProviderV120ExternalAccountProvider externalAccountProviderV120ExternalAccountProvider = null;
        ExternalAccountProviderV120ExternalAccountProvider response = api.redfishV1AccountServiceExternalAccountProvidersExternalAccountProviderIdPut(externalAccountProviderId, externalAccountProviderV120ExternalAccountProvider);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceExternalAccountProvidersGetTest() throws ApiException {
        ExternalAccountProviderCollectionExternalAccountProviderCollection response = api.redfishV1AccountServiceExternalAccountProvidersGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceExternalAccountProvidersPostTest() throws ApiException {
        ExternalAccountProviderV120ExternalAccountProvider externalAccountProviderV120ExternalAccountProvider = null;
        ExternalAccountProviderV120ExternalAccountProvider response = api.redfishV1AccountServiceExternalAccountProvidersPost(externalAccountProviderV120ExternalAccountProvider);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceGetTest() throws ApiException {
        AccountServiceV190AccountService response = api.redfishV1AccountServiceGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceLDAPCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String certificateId = null;
        CertificateV130RekeyRequestBody certificateV130RekeyRequestBody = null;
        CertificateV130RekeyResponse response = api.redfishV1AccountServiceLDAPCertificatesCertificateIdActionsCertificateRekeyPost(certificateId, certificateV130RekeyRequestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceLDAPCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String certificateId = null;
        CertificateV130RenewRequestBody certificateV130RenewRequestBody = null;
        CertificateV130RenewResponse response = api.redfishV1AccountServiceLDAPCertificatesCertificateIdActionsCertificateRenewPost(certificateId, certificateV130RenewRequestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceLDAPCertificatesCertificateIdDeleteTest() throws ApiException {
        String certificateId = null;
        CertificateV130Certificate response = api.redfishV1AccountServiceLDAPCertificatesCertificateIdDelete(certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceLDAPCertificatesCertificateIdGetTest() throws ApiException {
        String certificateId = null;
        CertificateV130Certificate response = api.redfishV1AccountServiceLDAPCertificatesCertificateIdGet(certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceLDAPCertificatesGetTest() throws ApiException {
        CertificateCollectionCertificateCollection response = api.redfishV1AccountServiceLDAPCertificatesGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceLDAPCertificatesPostTest() throws ApiException {
        CertificateV130Certificate certificateV130Certificate = null;
        CertificateV130Certificate response = api.redfishV1AccountServiceLDAPCertificatesPost(certificateV130Certificate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServicePatchTest() throws ApiException {
        AccountServiceV190AccountService accountServiceV190AccountService = null;
        AccountServiceV190AccountService response = api.redfishV1AccountServicePatch(accountServiceV190AccountService);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServicePutTest() throws ApiException {
        AccountServiceV190AccountService accountServiceV190AccountService = null;
        AccountServiceV190AccountService response = api.redfishV1AccountServicePut(accountServiceV190AccountService);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceRolesGetTest() throws ApiException {
        RoleCollectionRoleCollection response = api.redfishV1AccountServiceRolesGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceRolesRoleIdGetTest() throws ApiException {
        String roleId = null;
        RoleV131Role response = api.redfishV1AccountServiceRolesRoleIdGet(roleId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceRolesRoleIdPatchTest() throws ApiException {
        String roleId = null;
        RoleV131Role roleV131Role = null;
        RoleV131Role response = api.redfishV1AccountServiceRolesRoleIdPatch(roleId, roleV131Role);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AccountServiceRolesRoleIdPutTest() throws ApiException {
        String roleId = null;
        RoleV131Role roleV131Role = null;
        RoleV131Role response = api.redfishV1AccountServiceRolesRoleIdPut(roleId, roleV131Role);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AggregationServiceActionsAggregationServiceResetPostTest() throws ApiException {
        AggregationServiceV101ResetRequestBody aggregationServiceV101ResetRequestBody = null;
        RedfishError response = api.redfishV1AggregationServiceActionsAggregationServiceResetPost(aggregationServiceV101ResetRequestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AggregationServiceActionsAggregationServiceSetDefaultBootOrderPostTest() throws ApiException {
        AggregationServiceV101SetDefaultBootOrderRequestBody aggregationServiceV101SetDefaultBootOrderRequestBody = null;
        RedfishError response = api.redfishV1AggregationServiceActionsAggregationServiceSetDefaultBootOrderPost(aggregationServiceV101SetDefaultBootOrderRequestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AggregationServiceAggregatesAggregateIdActionsAggregateAddElementsPostTest() throws ApiException {
        String aggregateId = null;
        AggregateV101AddElementsRequestBody aggregateV101AddElementsRequestBody = null;
        RedfishError response = api.redfishV1AggregationServiceAggregatesAggregateIdActionsAggregateAddElementsPost(aggregateId, aggregateV101AddElementsRequestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AggregationServiceAggregatesAggregateIdActionsAggregateRemoveElementsPostTest() throws ApiException {
        String aggregateId = null;
        AggregateV101RemoveElementsRequestBody aggregateV101RemoveElementsRequestBody = null;
        RedfishError response = api.redfishV1AggregationServiceAggregatesAggregateIdActionsAggregateRemoveElementsPost(aggregateId, aggregateV101RemoveElementsRequestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AggregationServiceAggregatesAggregateIdActionsAggregateResetPostTest() throws ApiException {
        String aggregateId = null;
        AggregateV101ResetRequestBody aggregateV101ResetRequestBody = null;
        RedfishError response = api.redfishV1AggregationServiceAggregatesAggregateIdActionsAggregateResetPost(aggregateId, aggregateV101ResetRequestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AggregationServiceAggregatesAggregateIdActionsAggregateSetDefaultBootOrderPostTest() throws ApiException {
        String aggregateId = null;
        Object body = null;
        RedfishError response = api.redfishV1AggregationServiceAggregatesAggregateIdActionsAggregateSetDefaultBootOrderPost(aggregateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AggregationServiceAggregatesAggregateIdDeleteTest() throws ApiException {
        String aggregateId = null;
        AggregateV101Aggregate response = api.redfishV1AggregationServiceAggregatesAggregateIdDelete(aggregateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AggregationServiceAggregatesAggregateIdGetTest() throws ApiException {
        String aggregateId = null;
        AggregateV101Aggregate response = api.redfishV1AggregationServiceAggregatesAggregateIdGet(aggregateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AggregationServiceAggregatesGetTest() throws ApiException {
        AggregateCollectionAggregateCollection response = api.redfishV1AggregationServiceAggregatesGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AggregationServiceAggregatesPostTest() throws ApiException {
        AggregateV101Aggregate aggregateV101Aggregate = null;
        AggregateV101Aggregate response = api.redfishV1AggregationServiceAggregatesPost(aggregateV101Aggregate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AggregationServiceAggregationSourcesAggregationSourceIdDeleteTest() throws ApiException {
        String aggregationSourceId = null;
        AggregationSourceV110AggregationSource response = api.redfishV1AggregationServiceAggregationSourcesAggregationSourceIdDelete(aggregationSourceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AggregationServiceAggregationSourcesAggregationSourceIdGetTest() throws ApiException {
        String aggregationSourceId = null;
        AggregationSourceV110AggregationSource response = api.redfishV1AggregationServiceAggregationSourcesAggregationSourceIdGet(aggregationSourceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AggregationServiceAggregationSourcesAggregationSourceIdPatchTest() throws ApiException {
        String aggregationSourceId = null;
        AggregationSourceV110AggregationSource aggregationSourceV110AggregationSource = null;
        AggregationSourceV110AggregationSource response = api.redfishV1AggregationServiceAggregationSourcesAggregationSourceIdPatch(aggregationSourceId, aggregationSourceV110AggregationSource);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AggregationServiceAggregationSourcesAggregationSourceIdPutTest() throws ApiException {
        String aggregationSourceId = null;
        AggregationSourceV110AggregationSource aggregationSourceV110AggregationSource = null;
        AggregationSourceV110AggregationSource response = api.redfishV1AggregationServiceAggregationSourcesAggregationSourceIdPut(aggregationSourceId, aggregationSourceV110AggregationSource);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AggregationServiceAggregationSourcesGetTest() throws ApiException {
        AggregationSourceCollectionAggregationSourceCollection response = api.redfishV1AggregationServiceAggregationSourcesGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AggregationServiceAggregationSourcesPostTest() throws ApiException {
        AggregationSourceV110AggregationSource aggregationSourceV110AggregationSource = null;
        AggregationSourceV110AggregationSource response = api.redfishV1AggregationServiceAggregationSourcesPost(aggregationSourceV110AggregationSource);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AggregationServiceConnectionMethodsConnectionMethodIdGetTest() throws ApiException {
        String connectionMethodId = null;
        ConnectionMethodV100ConnectionMethod response = api.redfishV1AggregationServiceConnectionMethodsConnectionMethodIdGet(connectionMethodId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AggregationServiceConnectionMethodsGetTest() throws ApiException {
        ConnectionMethodCollectionConnectionMethodCollection response = api.redfishV1AggregationServiceConnectionMethodsGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AggregationServiceConnectionMethodsPostTest() throws ApiException {
        ConnectionMethodV100ConnectionMethod connectionMethodV100ConnectionMethod = null;
        ConnectionMethodV100ConnectionMethod response = api.redfishV1AggregationServiceConnectionMethodsPost(connectionMethodV100ConnectionMethod);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AggregationServiceGetTest() throws ApiException {
        AggregationServiceV101AggregationService response = api.redfishV1AggregationServiceGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AggregationServicePatchTest() throws ApiException {
        Map<String, Object> requestBody = null;
        AggregationServiceV101AggregationService response = api.redfishV1AggregationServicePatch(requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1AggregationServicePutTest() throws ApiException {
        Map<String, Object> requestBody = null;
        AggregationServiceV101AggregationService response = api.redfishV1AggregationServicePut(requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CertificateServiceActionsCertificateServiceGenerateCSRPostTest() throws ApiException {
        CertificateServiceV104GenerateCSRRequestBody certificateServiceV104GenerateCSRRequestBody = null;
        CertificateServiceV104GenerateCSRResponse response = api.redfishV1CertificateServiceActionsCertificateServiceGenerateCSRPost(certificateServiceV104GenerateCSRRequestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CertificateServiceActionsCertificateServiceReplaceCertificatePostTest() throws ApiException {
        CertificateServiceV104ReplaceCertificateRequestBody certificateServiceV104ReplaceCertificateRequestBody = null;
        RedfishError response = api.redfishV1CertificateServiceActionsCertificateServiceReplaceCertificatePost(certificateServiceV104ReplaceCertificateRequestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CertificateServiceCertificateLocationsGetTest() throws ApiException {
        CertificateLocationsV102CertificateLocations response = api.redfishV1CertificateServiceCertificateLocationsGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CertificateServiceGetTest() throws ApiException {
        CertificateServiceV104CertificateService response = api.redfishV1CertificateServiceGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdActionsChassisResetPostTest() throws ApiException {
        String chassisId = null;
        ChassisV1160ResetRequestBody chassisV1160ResetRequestBody = null;
        RedfishError response = api.redfishV1ChassisChassisIdActionsChassisResetPost(chassisId, chassisV1160ResetRequestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdAssemblyGetTest() throws ApiException {
        String chassisId = null;
        AssemblyV130Assembly response = api.redfishV1ChassisChassisIdAssemblyGet(chassisId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdAssemblyPatchTest() throws ApiException {
        String chassisId = null;
        AssemblyV130Assembly assemblyV130Assembly = null;
        AssemblyV130Assembly response = api.redfishV1ChassisChassisIdAssemblyPatch(chassisId, assemblyV130Assembly);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdAssemblyPutTest() throws ApiException {
        String chassisId = null;
        AssemblyV130Assembly assemblyV130Assembly = null;
        AssemblyV130Assembly response = api.redfishV1ChassisChassisIdAssemblyPut(chassisId, assemblyV130Assembly);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String chassisId = null;
        String certificateId = null;
        CertificateV130RekeyRequestBody certificateV130RekeyRequestBody = null;
        CertificateV130RekeyResponse response = api.redfishV1ChassisChassisIdCertificatesCertificateIdActionsCertificateRekeyPost(chassisId, certificateId, certificateV130RekeyRequestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String chassisId = null;
        String certificateId = null;
        CertificateV130RenewRequestBody certificateV130RenewRequestBody = null;
        CertificateV130RenewResponse response = api.redfishV1ChassisChassisIdCertificatesCertificateIdActionsCertificateRenewPost(chassisId, certificateId, certificateV130RenewRequestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String chassisId = null;
        String certificateId = null;
        CertificateV130Certificate response = api.redfishV1ChassisChassisIdCertificatesCertificateIdDelete(chassisId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdCertificatesCertificateIdGetTest() throws ApiException {
        String chassisId = null;
        String certificateId = null;
        CertificateV130Certificate response = api.redfishV1ChassisChassisIdCertificatesCertificateIdGet(chassisId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdCertificatesGetTest() throws ApiException {
        String chassisId = null;
        CertificateCollectionCertificateCollection response = api.redfishV1ChassisChassisIdCertificatesGet(chassisId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdCertificatesPostTest() throws ApiException {
        String chassisId = null;
        CertificateV130Certificate certificateV130Certificate = null;
        CertificateV130Certificate response = api.redfishV1ChassisChassisIdCertificatesPost(chassisId, certificateV130Certificate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdDeleteTest() throws ApiException {
        String chassisId = null;
        ChassisV1160Chassis response = api.redfishV1ChassisChassisIdDelete(chassisId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdDrivesDriveIdActionsDriveResetPostTest() throws ApiException {
        String chassisId = null;
        String driveId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdDrivesDriveIdActionsDriveResetPost(chassisId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdDrivesDriveIdActionsDriveSecureErasePostTest() throws ApiException {
        String chassisId = null;
        String driveId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdDrivesDriveIdActionsDriveSecureErasePost(chassisId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdDrivesDriveIdAssemblyGetTest() throws ApiException {
        String chassisId = null;
        String driveId = null;
        Object response = api.redfishV1ChassisChassisIdDrivesDriveIdAssemblyGet(chassisId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdDrivesDriveIdAssemblyPatchTest() throws ApiException {
        String chassisId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdDrivesDriveIdAssemblyPatch(chassisId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdDrivesDriveIdAssemblyPutTest() throws ApiException {
        String chassisId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdDrivesDriveIdAssemblyPut(chassisId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String chassisId = null;
        String driveId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRekeyPost(chassisId, driveId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String chassisId = null;
        String driveId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRenewPost(chassisId, driveId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdDrivesDriveIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String chassisId = null;
        String driveId = null;
        String certificateId = null;
        Object response = api.redfishV1ChassisChassisIdDrivesDriveIdCertificatesCertificateIdDelete(chassisId, driveId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdDrivesDriveIdCertificatesCertificateIdGetTest() throws ApiException {
        String chassisId = null;
        String driveId = null;
        String certificateId = null;
        Object response = api.redfishV1ChassisChassisIdDrivesDriveIdCertificatesCertificateIdGet(chassisId, driveId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdDrivesDriveIdCertificatesGetTest() throws ApiException {
        String chassisId = null;
        String driveId = null;
        Object response = api.redfishV1ChassisChassisIdDrivesDriveIdCertificatesGet(chassisId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdDrivesDriveIdCertificatesPostTest() throws ApiException {
        String chassisId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdDrivesDriveIdCertificatesPost(chassisId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdDrivesDriveIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String chassisId = null;
        String driveId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdDrivesDriveIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(chassisId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdDrivesDriveIdEnvironmentMetricsGetTest() throws ApiException {
        String chassisId = null;
        String driveId = null;
        Object response = api.redfishV1ChassisChassisIdDrivesDriveIdEnvironmentMetricsGet(chassisId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdDrivesDriveIdGetTest() throws ApiException {
        String chassisId = null;
        String driveId = null;
        Object response = api.redfishV1ChassisChassisIdDrivesDriveIdGet(chassisId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdDrivesDriveIdPatchTest() throws ApiException {
        String chassisId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdDrivesDriveIdPatch(chassisId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdDrivesDriveIdPutTest() throws ApiException {
        String chassisId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdDrivesDriveIdPut(chassisId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdDrivesGetTest() throws ApiException {
        String chassisId = null;
        Object response = api.redfishV1ChassisChassisIdDrivesGet(chassisId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String chassisId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(chassisId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdEnvironmentMetricsGetTest() throws ApiException {
        String chassisId = null;
        Object response = api.redfishV1ChassisChassisIdEnvironmentMetricsGet(chassisId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdGetTest() throws ApiException {
        String chassisId = null;
        ChassisV1160Chassis response = api.redfishV1ChassisChassisIdGet(chassisId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdLogServicesGetTest() throws ApiException {
        String chassisId = null;
        Object response = api.redfishV1ChassisChassisIdLogServicesGet(chassisId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdLogServicesLogServiceIdActionsLogServiceClearLogPostTest() throws ApiException {
        String chassisId = null;
        String logServiceId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdLogServicesLogServiceIdActionsLogServiceClearLogPost(chassisId, logServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPostTest() throws ApiException {
        String chassisId = null;
        String logServiceId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost(chassisId, logServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdLogServicesLogServiceIdEntriesGetTest() throws ApiException {
        String chassisId = null;
        String logServiceId = null;
        Object response = api.redfishV1ChassisChassisIdLogServicesLogServiceIdEntriesGet(chassisId, logServiceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdLogServicesLogServiceIdEntriesLogEntryIdDeleteTest() throws ApiException {
        String chassisId = null;
        String logServiceId = null;
        String logEntryId = null;
        Object response = api.redfishV1ChassisChassisIdLogServicesLogServiceIdEntriesLogEntryIdDelete(chassisId, logServiceId, logEntryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdLogServicesLogServiceIdEntriesLogEntryIdGetTest() throws ApiException {
        String chassisId = null;
        String logServiceId = null;
        String logEntryId = null;
        Object response = api.redfishV1ChassisChassisIdLogServicesLogServiceIdEntriesLogEntryIdGet(chassisId, logServiceId, logEntryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdLogServicesLogServiceIdEntriesLogEntryIdPatchTest() throws ApiException {
        String chassisId = null;
        String logServiceId = null;
        String logEntryId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdLogServicesLogServiceIdEntriesLogEntryIdPatch(chassisId, logServiceId, logEntryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdLogServicesLogServiceIdEntriesLogEntryIdPutTest() throws ApiException {
        String chassisId = null;
        String logServiceId = null;
        String logEntryId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdLogServicesLogServiceIdEntriesLogEntryIdPut(chassisId, logServiceId, logEntryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdLogServicesLogServiceIdEntriesPostTest() throws ApiException {
        String chassisId = null;
        String logServiceId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdLogServicesLogServiceIdEntriesPost(chassisId, logServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdLogServicesLogServiceIdGetTest() throws ApiException {
        String chassisId = null;
        String logServiceId = null;
        Object response = api.redfishV1ChassisChassisIdLogServicesLogServiceIdGet(chassisId, logServiceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdLogServicesLogServiceIdPatchTest() throws ApiException {
        String chassisId = null;
        String logServiceId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdLogServicesLogServiceIdPatch(chassisId, logServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdLogServicesLogServiceIdPutTest() throws ApiException {
        String chassisId = null;
        String logServiceId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdLogServicesLogServiceIdPut(chassisId, logServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMediaControllersGetTest() throws ApiException {
        String chassisId = null;
        Object response = api.redfishV1ChassisChassisIdMediaControllersGet(chassisId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMediaControllersMediaControllerIdActionsMediaControllerResetPostTest() throws ApiException {
        String chassisId = null;
        String mediaControllerId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdMediaControllersMediaControllerIdActionsMediaControllerResetPost(chassisId, mediaControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMediaControllersMediaControllerIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String chassisId = null;
        String mediaControllerId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdMediaControllersMediaControllerIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(chassisId, mediaControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMediaControllersMediaControllerIdEnvironmentMetricsGetTest() throws ApiException {
        String chassisId = null;
        String mediaControllerId = null;
        Object response = api.redfishV1ChassisChassisIdMediaControllersMediaControllerIdEnvironmentMetricsGet(chassisId, mediaControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMediaControllersMediaControllerIdGetTest() throws ApiException {
        String chassisId = null;
        String mediaControllerId = null;
        Object response = api.redfishV1ChassisChassisIdMediaControllersMediaControllerIdGet(chassisId, mediaControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsGetTest() throws ApiException {
        String chassisId = null;
        String mediaControllerId = null;
        Object response = api.redfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsGet(chassisId, mediaControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdActionsPortResetPostTest() throws ApiException {
        String chassisId = null;
        String mediaControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdActionsPortResetPost(chassisId, mediaControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String chassisId = null;
        String mediaControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(chassisId, mediaControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdEnvironmentMetricsGetTest() throws ApiException {
        String chassisId = null;
        String mediaControllerId = null;
        String portId = null;
        Object response = api.redfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdEnvironmentMetricsGet(chassisId, mediaControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdGetTest() throws ApiException {
        String chassisId = null;
        String mediaControllerId = null;
        String portId = null;
        Object response = api.redfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdGet(chassisId, mediaControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdMetricsGetTest() throws ApiException {
        String chassisId = null;
        String mediaControllerId = null;
        String portId = null;
        Object response = api.redfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdMetricsGet(chassisId, mediaControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdPatchTest() throws ApiException {
        String chassisId = null;
        String mediaControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdPatch(chassisId, mediaControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdPutTest() throws ApiException {
        String chassisId = null;
        String mediaControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdMediaControllersMediaControllerIdPortsPortIdPut(chassisId, mediaControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryDomainsGetTest() throws ApiException {
        String chassisId = null;
        Object response = api.redfishV1ChassisChassisIdMemoryDomainsGet(chassisId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdGetTest() throws ApiException {
        String chassisId = null;
        String memoryDomainId = null;
        Object response = api.redfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdGet(chassisId, memoryDomainId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksGetTest() throws ApiException {
        String chassisId = null;
        String memoryDomainId = null;
        Object response = api.redfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksGet(chassisId, memoryDomainId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDeleteTest() throws ApiException {
        String chassisId = null;
        String memoryDomainId = null;
        String memoryChunksId = null;
        Object response = api.redfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete(chassisId, memoryDomainId, memoryChunksId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGetTest() throws ApiException {
        String chassisId = null;
        String memoryDomainId = null;
        String memoryChunksId = null;
        Object response = api.redfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet(chassisId, memoryDomainId, memoryChunksId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatchTest() throws ApiException {
        String chassisId = null;
        String memoryDomainId = null;
        String memoryChunksId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatch(chassisId, memoryDomainId, memoryChunksId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPutTest() throws ApiException {
        String chassisId = null;
        String memoryDomainId = null;
        String memoryChunksId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPut(chassisId, memoryDomainId, memoryChunksId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksPostTest() throws ApiException {
        String chassisId = null;
        String memoryDomainId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdMemoryDomainsMemoryDomainIdMemoryChunksPost(chassisId, memoryDomainId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryGetTest() throws ApiException {
        String chassisId = null;
        Object response = api.redfishV1ChassisChassisIdMemoryGet(chassisId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryDisablePassphrasePostTest() throws ApiException {
        String chassisId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryDisablePassphrasePost(chassisId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryOverwriteUnitPostTest() throws ApiException {
        String chassisId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryOverwriteUnitPost(chassisId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryResetPostTest() throws ApiException {
        String chassisId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryResetPost(chassisId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryMemoryIdActionsMemorySecureEraseUnitPostTest() throws ApiException {
        String chassisId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdMemoryMemoryIdActionsMemorySecureEraseUnitPost(chassisId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryMemoryIdActionsMemorySetPassphrasePostTest() throws ApiException {
        String chassisId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdMemoryMemoryIdActionsMemorySetPassphrasePost(chassisId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryUnlockUnitPostTest() throws ApiException {
        String chassisId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdMemoryMemoryIdActionsMemoryUnlockUnitPost(chassisId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryMemoryIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String chassisId = null;
        String memoryId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdMemoryMemoryIdCertificatesCertificateIdActionsCertificateRekeyPost(chassisId, memoryId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryMemoryIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String chassisId = null;
        String memoryId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdMemoryMemoryIdCertificatesCertificateIdActionsCertificateRenewPost(chassisId, memoryId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryMemoryIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String chassisId = null;
        String memoryId = null;
        String certificateId = null;
        Object response = api.redfishV1ChassisChassisIdMemoryMemoryIdCertificatesCertificateIdDelete(chassisId, memoryId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryMemoryIdCertificatesCertificateIdGetTest() throws ApiException {
        String chassisId = null;
        String memoryId = null;
        String certificateId = null;
        Object response = api.redfishV1ChassisChassisIdMemoryMemoryIdCertificatesCertificateIdGet(chassisId, memoryId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryMemoryIdCertificatesGetTest() throws ApiException {
        String chassisId = null;
        String memoryId = null;
        Object response = api.redfishV1ChassisChassisIdMemoryMemoryIdCertificatesGet(chassisId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryMemoryIdCertificatesPostTest() throws ApiException {
        String chassisId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdMemoryMemoryIdCertificatesPost(chassisId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryMemoryIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String chassisId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdMemoryMemoryIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(chassisId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryMemoryIdEnvironmentMetricsGetTest() throws ApiException {
        String chassisId = null;
        String memoryId = null;
        Object response = api.redfishV1ChassisChassisIdMemoryMemoryIdEnvironmentMetricsGet(chassisId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryMemoryIdGetTest() throws ApiException {
        String chassisId = null;
        String memoryId = null;
        Object response = api.redfishV1ChassisChassisIdMemoryMemoryIdGet(chassisId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryMemoryIdPatchTest() throws ApiException {
        String chassisId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdMemoryMemoryIdPatch(chassisId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdMemoryMemoryIdPutTest() throws ApiException {
        String chassisId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdMemoryMemoryIdPut(chassisId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersGetTest() throws ApiException {
        String chassisId = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersGet(chassisId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdActionsNetworkAdapterResetSettingsToDefaultPostTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdActionsNetworkAdapterResetSettingsToDefaultPost(chassisId, networkAdapterId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdAssemblyGetTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdAssemblyGet(chassisId, networkAdapterId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdAssemblyPatchTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdAssemblyPatch(chassisId, networkAdapterId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdAssemblyPutTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdAssemblyPut(chassisId, networkAdapterId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdCertificatesCertificateIdActionsCertificateRekeyPost(chassisId, networkAdapterId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdCertificatesCertificateIdActionsCertificateRenewPost(chassisId, networkAdapterId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        String certificateId = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdCertificatesCertificateIdDelete(chassisId, networkAdapterId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdCertificatesCertificateIdGetTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        String certificateId = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdCertificatesCertificateIdGet(chassisId, networkAdapterId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdCertificatesGetTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdCertificatesGet(chassisId, networkAdapterId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdCertificatesPostTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdCertificatesPost(chassisId, networkAdapterId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(chassisId, networkAdapterId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdEnvironmentMetricsGetTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdEnvironmentMetricsGet(chassisId, networkAdapterId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdGetTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdGet(chassisId, networkAdapterId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdMetricsGetTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdMetricsGet(chassisId, networkAdapterId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsGetTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsGet(chassisId, networkAdapterId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsGetTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        String networkDeviceFunctionId = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsGet(chassisId, networkAdapterId, networkDeviceFunctionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsPostTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        String networkDeviceFunctionId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsPost(chassisId, networkAdapterId, networkDeviceFunctionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdDeleteTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        String networkDeviceFunctionId = null;
        String vlanNetworkInterfaceId = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdDelete(chassisId, networkAdapterId, networkDeviceFunctionId, vlanNetworkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdGetTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        String networkDeviceFunctionId = null;
        String vlanNetworkInterfaceId = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdGet(chassisId, networkAdapterId, networkDeviceFunctionId, vlanNetworkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdPatchTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        String networkDeviceFunctionId = null;
        String vlanNetworkInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdPatch(chassisId, networkAdapterId, networkDeviceFunctionId, vlanNetworkInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdPutTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        String networkDeviceFunctionId = null;
        String vlanNetworkInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdEthernetVLANsVLanNetworkInterfaceIdPut(chassisId, networkAdapterId, networkDeviceFunctionId, vlanNetworkInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdGetTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        String networkDeviceFunctionId = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdGet(chassisId, networkAdapterId, networkDeviceFunctionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdMetricsGetTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        String networkDeviceFunctionId = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdMetricsGet(chassisId, networkAdapterId, networkDeviceFunctionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdPatchTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        String networkDeviceFunctionId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdPatch(chassisId, networkAdapterId, networkDeviceFunctionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdPutTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        String networkDeviceFunctionId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkDeviceFunctionsNetworkDeviceFunctionIdPut(chassisId, networkAdapterId, networkDeviceFunctionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsGetTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsGet(chassisId, networkAdapterId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsNetworkPortIdGetTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        String networkPortId = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsNetworkPortIdGet(chassisId, networkAdapterId, networkPortId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsNetworkPortIdPatchTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        String networkPortId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsNetworkPortIdPatch(chassisId, networkAdapterId, networkPortId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsNetworkPortIdPutTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        String networkPortId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdNetworkPortsNetworkPortIdPut(chassisId, networkAdapterId, networkPortId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPatchTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPatch(chassisId, networkAdapterId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsGetTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsGet(chassisId, networkAdapterId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdActionsPortResetPostTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdActionsPortResetPost(chassisId, networkAdapterId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(chassisId, networkAdapterId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdEnvironmentMetricsGetTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        String portId = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdEnvironmentMetricsGet(chassisId, networkAdapterId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdGetTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        String portId = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdGet(chassisId, networkAdapterId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdMetricsGetTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        String portId = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdMetricsGet(chassisId, networkAdapterId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdPatchTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdPatch(chassisId, networkAdapterId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdPutTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPortsPortIdPut(chassisId, networkAdapterId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPutTest() throws ApiException {
        String chassisId = null;
        String networkAdapterId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdNetworkAdaptersNetworkAdapterIdPut(chassisId, networkAdapterId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPCIeDevicesGetTest() throws ApiException {
        String chassisId = null;
        Object response = api.redfishV1ChassisChassisIdPCIeDevicesGet(chassisId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdAssemblyGetTest() throws ApiException {
        String chassisId = null;
        String pcIeDeviceId = null;
        Object response = api.redfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdAssemblyGet(chassisId, pcIeDeviceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdAssemblyPatchTest() throws ApiException {
        String chassisId = null;
        String pcIeDeviceId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdAssemblyPatch(chassisId, pcIeDeviceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdAssemblyPutTest() throws ApiException {
        String chassisId = null;
        String pcIeDeviceId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdAssemblyPut(chassisId, pcIeDeviceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String chassisId = null;
        String pcIeDeviceId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(chassisId, pcIeDeviceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdEnvironmentMetricsGetTest() throws ApiException {
        String chassisId = null;
        String pcIeDeviceId = null;
        Object response = api.redfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdEnvironmentMetricsGet(chassisId, pcIeDeviceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdGetTest() throws ApiException {
        String chassisId = null;
        String pcIeDeviceId = null;
        Object response = api.redfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdGet(chassisId, pcIeDeviceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGetTest() throws ApiException {
        String chassisId = null;
        String pcIeDeviceId = null;
        Object response = api.redfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet(chassisId, pcIeDeviceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGetTest() throws ApiException {
        String chassisId = null;
        String pcIeDeviceId = null;
        String pcIeFunctionId = null;
        Object response = api.redfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet(chassisId, pcIeDeviceId, pcIeFunctionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdPatchTest() throws ApiException {
        String chassisId = null;
        String pcIeDeviceId = null;
        String pcIeFunctionId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdPatch(chassisId, pcIeDeviceId, pcIeFunctionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdPutTest() throws ApiException {
        String chassisId = null;
        String pcIeDeviceId = null;
        String pcIeFunctionId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdPut(chassisId, pcIeDeviceId, pcIeFunctionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPatchTest() throws ApiException {
        String chassisId = null;
        String pcIeDeviceId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPatch(chassisId, pcIeDeviceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPutTest() throws ApiException {
        String chassisId = null;
        String pcIeDeviceId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdPCIeDevicesPCIeDeviceIdPut(chassisId, pcIeDeviceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPCIeSlotsGetTest() throws ApiException {
        String chassisId = null;
        Object response = api.redfishV1ChassisChassisIdPCIeSlotsGet(chassisId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPCIeSlotsPatchTest() throws ApiException {
        String chassisId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdPCIeSlotsPatch(chassisId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPCIeSlotsPutTest() throws ApiException {
        String chassisId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdPCIeSlotsPut(chassisId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPatchTest() throws ApiException {
        String chassisId = null;
        ChassisV1160Chassis chassisV1160Chassis = null;
        ChassisV1160Chassis response = api.redfishV1ChassisChassisIdPatch(chassisId, chassisV1160Chassis);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPowerActionsPowerPowerSupplyResetPostTest() throws ApiException {
        String chassisId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdPowerActionsPowerPowerSupplyResetPost(chassisId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPowerGetTest() throws ApiException {
        String chassisId = null;
        Object response = api.redfishV1ChassisChassisIdPowerGet(chassisId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPowerPatchTest() throws ApiException {
        String chassisId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdPowerPatch(chassisId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPowerPowerSuppliesPowerSupplyIdAssemblyGetTest() throws ApiException {
        String chassisId = null;
        String powerSupplyId = null;
        Object response = api.redfishV1ChassisChassisIdPowerPowerSuppliesPowerSupplyIdAssemblyGet(chassisId, powerSupplyId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPowerPowerSuppliesPowerSupplyIdAssemblyPatchTest() throws ApiException {
        String chassisId = null;
        String powerSupplyId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdPowerPowerSuppliesPowerSupplyIdAssemblyPatch(chassisId, powerSupplyId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPowerPowerSuppliesPowerSupplyIdAssemblyPutTest() throws ApiException {
        String chassisId = null;
        String powerSupplyId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdPowerPowerSuppliesPowerSupplyIdAssemblyPut(chassisId, powerSupplyId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPowerPutTest() throws ApiException {
        String chassisId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdPowerPut(chassisId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPowerSubsystemGetTest() throws ApiException {
        String chassisId = null;
        Object response = api.redfishV1ChassisChassisIdPowerSubsystemGet(chassisId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPowerSubsystemPowerSuppliesGetTest() throws ApiException {
        String chassisId = null;
        Object response = api.redfishV1ChassisChassisIdPowerSubsystemPowerSuppliesGet(chassisId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPowerSubsystemPowerSuppliesPowerSupplyIdActionsPowerSupplyResetPostTest() throws ApiException {
        String chassisId = null;
        String powerSupplyId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdPowerSubsystemPowerSuppliesPowerSupplyIdActionsPowerSupplyResetPost(chassisId, powerSupplyId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPowerSubsystemPowerSuppliesPowerSupplyIdAssemblyGetTest() throws ApiException {
        String chassisId = null;
        String powerSupplyId = null;
        Object response = api.redfishV1ChassisChassisIdPowerSubsystemPowerSuppliesPowerSupplyIdAssemblyGet(chassisId, powerSupplyId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPowerSubsystemPowerSuppliesPowerSupplyIdAssemblyPatchTest() throws ApiException {
        String chassisId = null;
        String powerSupplyId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdPowerSubsystemPowerSuppliesPowerSupplyIdAssemblyPatch(chassisId, powerSupplyId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPowerSubsystemPowerSuppliesPowerSupplyIdAssemblyPutTest() throws ApiException {
        String chassisId = null;
        String powerSupplyId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdPowerSubsystemPowerSuppliesPowerSupplyIdAssemblyPut(chassisId, powerSupplyId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPowerSubsystemPowerSuppliesPowerSupplyIdGetTest() throws ApiException {
        String chassisId = null;
        String powerSupplyId = null;
        Object response = api.redfishV1ChassisChassisIdPowerSubsystemPowerSuppliesPowerSupplyIdGet(chassisId, powerSupplyId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPowerSubsystemPowerSuppliesPowerSupplyIdMetricsActionsPowerSupplyMetricsResetMetricsPostTest() throws ApiException {
        String chassisId = null;
        String powerSupplyId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdPowerSubsystemPowerSuppliesPowerSupplyIdMetricsActionsPowerSupplyMetricsResetMetricsPost(chassisId, powerSupplyId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPowerSubsystemPowerSuppliesPowerSupplyIdMetricsGetTest() throws ApiException {
        String chassisId = null;
        String powerSupplyId = null;
        Object response = api.redfishV1ChassisChassisIdPowerSubsystemPowerSuppliesPowerSupplyIdMetricsGet(chassisId, powerSupplyId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPowerSubsystemPowerSuppliesPowerSupplyIdPatchTest() throws ApiException {
        String chassisId = null;
        String powerSupplyId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdPowerSubsystemPowerSuppliesPowerSupplyIdPatch(chassisId, powerSupplyId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPowerSubsystemPowerSuppliesPowerSupplyIdPutTest() throws ApiException {
        String chassisId = null;
        String powerSupplyId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdPowerSubsystemPowerSuppliesPowerSupplyIdPut(chassisId, powerSupplyId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdPutTest() throws ApiException {
        String chassisId = null;
        ChassisV1160Chassis chassisV1160Chassis = null;
        ChassisV1160Chassis response = api.redfishV1ChassisChassisIdPut(chassisId, chassisV1160Chassis);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdSensorsGetTest() throws ApiException {
        String chassisId = null;
        Object response = api.redfishV1ChassisChassisIdSensorsGet(chassisId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdSensorsSensorIdActionsSensorResetMetricsPostTest() throws ApiException {
        String chassisId = null;
        String sensorId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdSensorsSensorIdActionsSensorResetMetricsPost(chassisId, sensorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdSensorsSensorIdGetTest() throws ApiException {
        String chassisId = null;
        String sensorId = null;
        Object response = api.redfishV1ChassisChassisIdSensorsSensorIdGet(chassisId, sensorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdSensorsSensorIdPatchTest() throws ApiException {
        String chassisId = null;
        String sensorId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdSensorsSensorIdPatch(chassisId, sensorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdSensorsSensorIdPutTest() throws ApiException {
        String chassisId = null;
        String sensorId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdSensorsSensorIdPut(chassisId, sensorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdThermalFansFanIdAssemblyGetTest() throws ApiException {
        String chassisId = null;
        String fanId = null;
        Object response = api.redfishV1ChassisChassisIdThermalFansFanIdAssemblyGet(chassisId, fanId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdThermalFansFanIdAssemblyPatchTest() throws ApiException {
        String chassisId = null;
        String fanId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdThermalFansFanIdAssemblyPatch(chassisId, fanId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdThermalFansFanIdAssemblyPutTest() throws ApiException {
        String chassisId = null;
        String fanId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdThermalFansFanIdAssemblyPut(chassisId, fanId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdThermalGetTest() throws ApiException {
        String chassisId = null;
        Object response = api.redfishV1ChassisChassisIdThermalGet(chassisId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdThermalPatchTest() throws ApiException {
        String chassisId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdThermalPatch(chassisId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdThermalPutTest() throws ApiException {
        String chassisId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdThermalPut(chassisId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdThermalSubsystemFansFanIdAssemblyGetTest() throws ApiException {
        String chassisId = null;
        String fanId = null;
        Object response = api.redfishV1ChassisChassisIdThermalSubsystemFansFanIdAssemblyGet(chassisId, fanId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdThermalSubsystemFansFanIdAssemblyPatchTest() throws ApiException {
        String chassisId = null;
        String fanId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdThermalSubsystemFansFanIdAssemblyPatch(chassisId, fanId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdThermalSubsystemFansFanIdAssemblyPutTest() throws ApiException {
        String chassisId = null;
        String fanId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdThermalSubsystemFansFanIdAssemblyPut(chassisId, fanId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdThermalSubsystemFansFanIdGetTest() throws ApiException {
        String chassisId = null;
        String fanId = null;
        Object response = api.redfishV1ChassisChassisIdThermalSubsystemFansFanIdGet(chassisId, fanId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdThermalSubsystemFansFanIdPatchTest() throws ApiException {
        String chassisId = null;
        String fanId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdThermalSubsystemFansFanIdPatch(chassisId, fanId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdThermalSubsystemFansFanIdPutTest() throws ApiException {
        String chassisId = null;
        String fanId = null;
        Object body = null;
        Object response = api.redfishV1ChassisChassisIdThermalSubsystemFansFanIdPut(chassisId, fanId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdThermalSubsystemFansGetTest() throws ApiException {
        String chassisId = null;
        Object response = api.redfishV1ChassisChassisIdThermalSubsystemFansGet(chassisId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdThermalSubsystemGetTest() throws ApiException {
        String chassisId = null;
        Object response = api.redfishV1ChassisChassisIdThermalSubsystemGet(chassisId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdThermalSubsystemThermalMetricsActionsThermalMetricsResetMetricsPostTest() throws ApiException {
        String chassisId = null;
        Object body = null;
        RedfishError response = api.redfishV1ChassisChassisIdThermalSubsystemThermalMetricsActionsThermalMetricsResetMetricsPost(chassisId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisChassisIdThermalSubsystemThermalMetricsGetTest() throws ApiException {
        String chassisId = null;
        Object response = api.redfishV1ChassisChassisIdThermalSubsystemThermalMetricsGet(chassisId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisGetTest() throws ApiException {
        ChassisCollectionChassisCollection response = api.redfishV1ChassisGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ChassisPostTest() throws ApiException {
        ChassisV1160Chassis chassisV1160Chassis = null;
        ChassisV1160Chassis response = api.redfishV1ChassisPost(chassisV1160Chassis);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceActionsCompositionServiceComposePostTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1CompositionServiceActionsCompositionServiceComposePost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceActivePoolGetTest() throws ApiException {
        Object response = api.redfishV1CompositionServiceActivePoolGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceActivePoolPostTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1CompositionServiceActivePoolPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceCompositionReservationsCompositionReservationIdDeleteTest() throws ApiException {
        String compositionReservationId = null;
        Object response = api.redfishV1CompositionServiceCompositionReservationsCompositionReservationIdDelete(compositionReservationId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceCompositionReservationsCompositionReservationIdGetTest() throws ApiException {
        String compositionReservationId = null;
        Object response = api.redfishV1CompositionServiceCompositionReservationsCompositionReservationIdGet(compositionReservationId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceCompositionReservationsGetTest() throws ApiException {
        Object response = api.redfishV1CompositionServiceCompositionReservationsGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceFreePoolGetTest() throws ApiException {
        Object response = api.redfishV1CompositionServiceFreePoolGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceFreePoolPostTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1CompositionServiceFreePoolPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceGetTest() throws ApiException {
        Object response = api.redfishV1CompositionServiceGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServicePatchTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1CompositionServicePatch(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServicePutTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1CompositionServicePut(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksGetTest() throws ApiException {
        Object response = api.redfishV1CompositionServiceResourceBlocksGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksPostTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdDelete(resourceBlockId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveResetPost(resourceBlockId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveSecureErasePostTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveSecureErasePost(resourceBlockId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdAssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdAssemblyGet(resourceBlockId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPatch(resourceBlockId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPut(resourceBlockId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, driveId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, driveId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdCertificatesCertificateIdDelete(resourceBlockId, driveId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdCertificatesCertificateIdGet(resourceBlockId, driveId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdCertificatesGet(resourceBlockId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdCertificatesPost(resourceBlockId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdEnvironmentMetricsGet(resourceBlockId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdGet(resourceBlockId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdPatch(resourceBlockId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdDrivesDriveIdPut(resourceBlockId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String ethernetInterfaceId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdGet(resourceBlockId, ethernetInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String ethernetInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPatch(resourceBlockId, ethernetInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String ethernetInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPut(resourceBlockId, ethernetInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsGetTest() throws ApiException {
        String resourceBlockId = null;
        String ethernetInterfaceId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsGet(resourceBlockId, ethernetInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsPostTest() throws ApiException {
        String resourceBlockId = null;
        String ethernetInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsPost(resourceBlockId, ethernetInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String ethernetInterfaceId = null;
        String vlanNetworkInterfaceId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete(resourceBlockId, ethernetInterfaceId, vlanNetworkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String ethernetInterfaceId = null;
        String vlanNetworkInterfaceId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet(resourceBlockId, ethernetInterfaceId, vlanNetworkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String ethernetInterfaceId = null;
        String vlanNetworkInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch(resourceBlockId, ethernetInterfaceId, vlanNetworkInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String ethernetInterfaceId = null;
        String vlanNetworkInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut(resourceBlockId, ethernetInterfaceId, vlanNetworkInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdGetTest() throws ApiException {
        String resourceBlockId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdGet(resourceBlockId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryDisablePassphrasePostTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryDisablePassphrasePost(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryOverwriteUnitPostTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryOverwriteUnitPost(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryResetPost(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySecureEraseUnitPostTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySecureEraseUnitPost(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySetPassphrasePostTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySetPassphrasePost(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryUnlockUnitPostTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryUnlockUnitPost(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyGet(resourceBlockId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPatch(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPut(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, memoryId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, memoryId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdCertificatesCertificateIdDelete(resourceBlockId, memoryId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdCertificatesCertificateIdGet(resourceBlockId, memoryId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdCertificatesGet(resourceBlockId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdCertificatesPost(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdEnvironmentMetricsGet(resourceBlockId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdGet(resourceBlockId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPostTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsGet(resourceBlockId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdPatch(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdMemoryMemoryIdPut(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String networkInterfaceId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdGet(resourceBlockId, networkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGetTest() throws ApiException {
        String resourceBlockId = null;
        String networkInterfaceId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet(resourceBlockId, networkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGetTest() throws ApiException {
        String resourceBlockId = null;
        String networkInterfaceId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet(resourceBlockId, networkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdPortsGetTest() throws ApiException {
        String resourceBlockId = null;
        String networkInterfaceId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdPortsGet(resourceBlockId, networkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdPatch(resourceBlockId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String accelerationFunctionId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet(resourceBlockId, processorId, accelerationFunctionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsGetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsGet(resourceBlockId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdActionsProcessorResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdActionsProcessorResetPost(resourceBlockId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyGet(resourceBlockId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPatch(resourceBlockId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPut(resourceBlockId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, processorId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, processorId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdCertificatesCertificateIdDelete(resourceBlockId, processorId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdCertificatesCertificateIdGet(resourceBlockId, processorId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdCertificatesGet(resourceBlockId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdCertificatesPost(resourceBlockId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdEnvironmentMetricsGet(resourceBlockId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdGet(resourceBlockId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPostTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(resourceBlockId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdMemorySummaryMemoryMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdMemorySummaryMemoryMetricsGet(resourceBlockId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdPatch(resourceBlockId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPostTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPost(resourceBlockId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdProcessorMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdProcessorMetricsGet(resourceBlockId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdPut(resourceBlockId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsGetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsGet(resourceBlockId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost(resourceBlockId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String processorId2 = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet(resourceBlockId, processorId, processorId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch(resourceBlockId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut(resourceBlockId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2GetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String processorId2 = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Get(resourceBlockId, processorId, processorId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2PatchTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Patch(resourceBlockId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPostTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPost(resourceBlockId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String processorId2 = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet(resourceBlockId, processorId, processorId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2PutTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Put(resourceBlockId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdPutTest() throws ApiException {
        String resourceBlockId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdPut(resourceBlockId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSimpleStorageSimpleStorageIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String simpleStorageId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSimpleStorageSimpleStorageIdGet(resourceBlockId, simpleStorageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageGetTest() throws ApiException {
        String resourceBlockId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageGet(resourceBlockId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdActionsStorageSetEncryptionKeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdActionsStorageSetEncryptionKeyPost(resourceBlockId, storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String controllerId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, storageId, controllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String controllerId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdEnvironmentMetricsGet(resourceBlockId, storageId, controllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String controllerId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdGet(resourceBlockId, storageId, controllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String controllerId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPatch(resourceBlockId, storageId, controllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String controllerId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPut(resourceBlockId, storageId, controllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersGet(resourceBlockId, storageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdAssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdAssemblyGet(resourceBlockId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdAssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdAssemblyPatch(resourceBlockId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdAssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdAssemblyPut(resourceBlockId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, storageId, storageControllerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, storageId, storageControllerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdDelete(resourceBlockId, storageId, storageControllerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdGet(resourceBlockId, storageId, storageControllerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdCertificatesGet(resourceBlockId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdCertificatesPost(resourceBlockId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsGet(resourceBlockId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsPortIdActionsPortResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsPortIdActionsPortResetPost(resourceBlockId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsPortIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsPortIdEnvironmentMetricsGet(resourceBlockId, storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsPortIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsPortIdGet(resourceBlockId, storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsPortIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsPortIdPatch(resourceBlockId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsPortIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsPortIdPut(resourceBlockId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveResetPost(resourceBlockId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost(resourceBlockId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyGet(resourceBlockId, storageId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPatch(resourceBlockId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPut(resourceBlockId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, storageId, driveId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, storageId, driveId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdDelete(resourceBlockId, storageId, driveId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdGet(resourceBlockId, storageId, driveId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdCertificatesGet(resourceBlockId, storageId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdCertificatesPost(resourceBlockId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdEnvironmentMetricsGet(resourceBlockId, storageId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdGet(resourceBlockId, storageId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPatch(resourceBlockId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPut(resourceBlockId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdGet(resourceBlockId, storageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdPatch(resourceBlockId, storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdPut(resourceBlockId, storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdAssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdAssemblyGet(resourceBlockId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdAssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdAssemblyPatch(resourceBlockId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdAssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdAssemblyPut(resourceBlockId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, storageId, storageControllerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, storageId, storageControllerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdDelete(resourceBlockId, storageId, storageControllerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdGet(resourceBlockId, storageId, storageControllerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdCertificatesGet(resourceBlockId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdCertificatesPost(resourceBlockId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsGet(resourceBlockId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost(resourceBlockId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdEnvironmentMetricsGet(resourceBlockId, storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet(resourceBlockId, storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet(resourceBlockId, storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch(resourceBlockId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut(resourceBlockId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesGet(resourceBlockId, storageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesPost(resourceBlockId, storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdDelete(resourceBlockId, storageId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdGet(resourceBlockId, storageId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPatch(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPut(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemAddResourceBlockPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemAddResourceBlockPost(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemRemoveResourceBlockPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemRemoveResourceBlockPost(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemResetPost(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPost(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosChangePasswordPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosChangePasswordPost(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosResetBiosPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosResetBiosPost(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPatch(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPut(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, computerSystemId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, computerSystemId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdDelete(resourceBlockId, computerSystemId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdGet(resourceBlockId, computerSystemId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesPost(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String bootOptionId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdDelete(resourceBlockId, computerSystemId, bootOptionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String bootOptionId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdGet(resourceBlockId, computerSystemId, bootOptionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String bootOptionId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPatch(resourceBlockId, computerSystemId, bootOptionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String bootOptionId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPut(resourceBlockId, computerSystemId, bootOptionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsPost(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, computerSystemId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, computerSystemId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdCertificatesCertificateIdDelete(resourceBlockId, computerSystemId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdCertificatesCertificateIdGet(resourceBlockId, computerSystemId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdCertificatesGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdCertificatesPost(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdDelete(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdGet(resourceBlockId, computerSystemId, ethernetInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPatch(resourceBlockId, computerSystemId, ethernetInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPut(resourceBlockId, computerSystemId, ethernetInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsGet(resourceBlockId, computerSystemId, ethernetInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsPost(resourceBlockId, computerSystemId, ethernetInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        String vlanNetworkInterfaceId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete(resourceBlockId, computerSystemId, ethernetInterfaceId, vlanNetworkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        String vlanNetworkInterfaceId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet(resourceBlockId, computerSystemId, ethernetInterfaceId, vlanNetworkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        String vlanNetworkInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch(resourceBlockId, computerSystemId, ethernetInterfaceId, vlanNetworkInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        String vlanNetworkInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut(resourceBlockId, computerSystemId, ethernetInterfaceId, vlanNetworkInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceClearLogPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String logServiceId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceClearLogPost(resourceBlockId, computerSystemId, logServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String logServiceId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost(resourceBlockId, computerSystemId, logServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String logServiceId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesGet(resourceBlockId, computerSystemId, logServiceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String logServiceId = null;
        String logEntryId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdDelete(resourceBlockId, computerSystemId, logServiceId, logEntryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String logServiceId = null;
        String logEntryId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdGet(resourceBlockId, computerSystemId, logServiceId, logEntryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String logServiceId = null;
        String logEntryId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdPatch(resourceBlockId, computerSystemId, logServiceId, logEntryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String logServiceId = null;
        String logEntryId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdPut(resourceBlockId, computerSystemId, logServiceId, logEntryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String logServiceId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesPost(resourceBlockId, computerSystemId, logServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String logServiceId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdGet(resourceBlockId, computerSystemId, logServiceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String logServiceId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPatch(resourceBlockId, computerSystemId, logServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String logServiceId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPut(resourceBlockId, computerSystemId, logServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryDomainId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdGet(resourceBlockId, computerSystemId, memoryDomainId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryDomainId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGet(resourceBlockId, computerSystemId, memoryDomainId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryDomainId = null;
        String memoryChunksId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete(resourceBlockId, computerSystemId, memoryDomainId, memoryChunksId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryDomainId = null;
        String memoryChunksId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet(resourceBlockId, computerSystemId, memoryDomainId, memoryChunksId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryDomainId = null;
        String memoryChunksId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatch(resourceBlockId, computerSystemId, memoryDomainId, memoryChunksId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryDomainId = null;
        String memoryChunksId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPut(resourceBlockId, computerSystemId, memoryDomainId, memoryChunksId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryDomainId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPost(resourceBlockId, computerSystemId, memoryDomainId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryDisablePassphrasePostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryDisablePassphrasePost(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryOverwriteUnitPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryOverwriteUnitPost(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryResetPost(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySecureEraseUnitPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySecureEraseUnitPost(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySetPassphrasePostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySetPassphrasePost(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryUnlockUnitPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryUnlockUnitPost(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyGet(resourceBlockId, computerSystemId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPatch(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPut(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, computerSystemId, memoryId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, computerSystemId, memoryId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdCertificatesCertificateIdDelete(resourceBlockId, computerSystemId, memoryId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdCertificatesCertificateIdGet(resourceBlockId, computerSystemId, memoryId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdCertificatesGet(resourceBlockId, computerSystemId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdCertificatesPost(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdEnvironmentMetricsGet(resourceBlockId, computerSystemId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdGet(resourceBlockId, computerSystemId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsGet(resourceBlockId, computerSystemId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPatch(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPut(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String networkInterfaceId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdGet(resourceBlockId, computerSystemId, networkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String networkInterfaceId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet(resourceBlockId, computerSystemId, networkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String networkInterfaceId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet(resourceBlockId, computerSystemId, networkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdPortsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String networkInterfaceId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdPortsGet(resourceBlockId, computerSystemId, networkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String pcIeDeviceId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, computerSystemId, pcIeDeviceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String pcIeDeviceId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdEnvironmentMetricsGet(resourceBlockId, computerSystemId, pcIeDeviceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String pcIeDeviceId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdGet(resourceBlockId, computerSystemId, pcIeDeviceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String pcIeDeviceId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet(resourceBlockId, computerSystemId, pcIeDeviceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String pcIeDeviceId = null;
        String pcIeFunctionId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet(resourceBlockId, computerSystemId, pcIeDeviceId, pcIeFunctionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String pcIeDeviceId = null;
        String pcIeFunctionId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdPatch(resourceBlockId, computerSystemId, pcIeDeviceId, pcIeFunctionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String pcIeDeviceId = null;
        String pcIeFunctionId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdPut(resourceBlockId, computerSystemId, pcIeDeviceId, pcIeFunctionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String pcIeDeviceId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPatch(resourceBlockId, computerSystemId, pcIeDeviceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String pcIeDeviceId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPut(resourceBlockId, computerSystemId, pcIeDeviceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPatch(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorSummaryProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorSummaryProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPost(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorSummaryProcessorMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorSummaryProcessorMetricsGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String accelerationFunctionId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet(resourceBlockId, computerSystemId, processorId, accelerationFunctionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsGet(resourceBlockId, computerSystemId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdActionsProcessorResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdActionsProcessorResetPost(resourceBlockId, computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyGet(resourceBlockId, computerSystemId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPatch(resourceBlockId, computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPut(resourceBlockId, computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, computerSystemId, processorId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, computerSystemId, processorId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdCertificatesCertificateIdDelete(resourceBlockId, computerSystemId, processorId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdCertificatesCertificateIdGet(resourceBlockId, computerSystemId, processorId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdCertificatesGet(resourceBlockId, computerSystemId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdCertificatesPost(resourceBlockId, computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdEnvironmentMetricsGet(resourceBlockId, computerSystemId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdGet(resourceBlockId, computerSystemId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(resourceBlockId, computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdMemorySummaryMemoryMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdMemorySummaryMemoryMetricsGet(resourceBlockId, computerSystemId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPatch(resourceBlockId, computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPost(resourceBlockId, computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsGet(resourceBlockId, computerSystemId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPut(resourceBlockId, computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsGet(resourceBlockId, computerSystemId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost(resourceBlockId, computerSystemId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet(resourceBlockId, computerSystemId, processorId, processorId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch(resourceBlockId, computerSystemId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut(resourceBlockId, computerSystemId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2GetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Get(resourceBlockId, computerSystemId, processorId, processorId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2PatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Patch(resourceBlockId, computerSystemId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPost(resourceBlockId, computerSystemId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet(resourceBlockId, computerSystemId, processorId, processorId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2PutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Put(resourceBlockId, computerSystemId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdPut(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootActionsSecureBootResetKeysPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootActionsSecureBootResetKeysPost(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPatch(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPut(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdActionsSecureBootDatabaseResetKeysPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String databaseId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdActionsSecureBootDatabaseResetKeysPost(resourceBlockId, computerSystemId, databaseId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String databaseId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, computerSystemId, databaseId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String databaseId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, computerSystemId, databaseId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String databaseId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdDelete(resourceBlockId, computerSystemId, databaseId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String databaseId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdGet(resourceBlockId, computerSystemId, databaseId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String databaseId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesGet(resourceBlockId, computerSystemId, databaseId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String databaseId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesPost(resourceBlockId, computerSystemId, databaseId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String databaseId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdGet(resourceBlockId, computerSystemId, databaseId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String databaseId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesGet(resourceBlockId, computerSystemId, databaseId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String databaseId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesPost(resourceBlockId, computerSystemId, databaseId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String databaseId = null;
        String signatureId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdDelete(resourceBlockId, computerSystemId, databaseId, signatureId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String databaseId = null;
        String signatureId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdGet(resourceBlockId, computerSystemId, databaseId, signatureId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageSimpleStorageIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String simpleStorageId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageSimpleStorageIdGet(resourceBlockId, computerSystemId, simpleStorageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdActionsStorageSetEncryptionKeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdActionsStorageSetEncryptionKeyPost(resourceBlockId, computerSystemId, storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String controllerId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, computerSystemId, storageId, controllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String controllerId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdEnvironmentMetricsGet(resourceBlockId, computerSystemId, storageId, controllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String controllerId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdGet(resourceBlockId, computerSystemId, storageId, controllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String controllerId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPatch(resourceBlockId, computerSystemId, storageId, controllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String controllerId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPut(resourceBlockId, computerSystemId, storageId, controllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersGet(resourceBlockId, computerSystemId, storageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdAssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdAssemblyGet(resourceBlockId, computerSystemId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdAssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdAssemblyPatch(resourceBlockId, computerSystemId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdAssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdAssemblyPut(resourceBlockId, computerSystemId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, computerSystemId, storageId, storageControllerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, computerSystemId, storageId, storageControllerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdDelete(resourceBlockId, computerSystemId, storageId, storageControllerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdGet(resourceBlockId, computerSystemId, storageId, storageControllerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesGet(resourceBlockId, computerSystemId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesPost(resourceBlockId, computerSystemId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsGet(resourceBlockId, computerSystemId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdActionsPortResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdActionsPortResetPost(resourceBlockId, computerSystemId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, computerSystemId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdEnvironmentMetricsGet(resourceBlockId, computerSystemId, storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdGet(resourceBlockId, computerSystemId, storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdPatch(resourceBlockId, computerSystemId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdPut(resourceBlockId, computerSystemId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveResetPost(resourceBlockId, computerSystemId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost(resourceBlockId, computerSystemId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyGet(resourceBlockId, computerSystemId, storageId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPatch(resourceBlockId, computerSystemId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPut(resourceBlockId, computerSystemId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, computerSystemId, storageId, driveId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, computerSystemId, storageId, driveId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdDelete(resourceBlockId, computerSystemId, storageId, driveId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdGet(resourceBlockId, computerSystemId, storageId, driveId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesGet(resourceBlockId, computerSystemId, storageId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesPost(resourceBlockId, computerSystemId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, computerSystemId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdEnvironmentMetricsGet(resourceBlockId, computerSystemId, storageId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdGet(resourceBlockId, computerSystemId, storageId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPatch(resourceBlockId, computerSystemId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPut(resourceBlockId, computerSystemId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdGet(resourceBlockId, computerSystemId, storageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPatch(resourceBlockId, computerSystemId, storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPut(resourceBlockId, computerSystemId, storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdAssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdAssemblyGet(resourceBlockId, computerSystemId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdAssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdAssemblyPatch(resourceBlockId, computerSystemId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdAssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdAssemblyPut(resourceBlockId, computerSystemId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, computerSystemId, storageId, storageControllerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, computerSystemId, storageId, storageControllerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdDelete(resourceBlockId, computerSystemId, storageId, storageControllerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdGet(resourceBlockId, computerSystemId, storageId, storageControllerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesGet(resourceBlockId, computerSystemId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesPost(resourceBlockId, computerSystemId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsGet(resourceBlockId, computerSystemId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost(resourceBlockId, computerSystemId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, computerSystemId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdEnvironmentMetricsGet(resourceBlockId, computerSystemId, storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet(resourceBlockId, computerSystemId, storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet(resourceBlockId, computerSystemId, storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch(resourceBlockId, computerSystemId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut(resourceBlockId, computerSystemId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesGet(resourceBlockId, computerSystemId, storageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesPost(resourceBlockId, computerSystemId, storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdDelete(resourceBlockId, computerSystemId, storageId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdGet(resourceBlockId, computerSystemId, storageId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPatch(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPut(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String virtualMediaId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost(resourceBlockId, computerSystemId, virtualMediaId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String virtualMediaId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost(resourceBlockId, computerSystemId, virtualMediaId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String virtualMediaId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, computerSystemId, virtualMediaId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String virtualMediaId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, computerSystemId, virtualMediaId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String virtualMediaId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesCertificateIdDelete(resourceBlockId, computerSystemId, virtualMediaId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String virtualMediaId = null;
        String certificateId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesCertificateIdGet(resourceBlockId, computerSystemId, virtualMediaId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String virtualMediaId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesGet(resourceBlockId, computerSystemId, virtualMediaId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String virtualMediaId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesPost(resourceBlockId, computerSystemId, virtualMediaId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String virtualMediaId = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdGet(resourceBlockId, computerSystemId, virtualMediaId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String virtualMediaId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPatch(resourceBlockId, computerSystemId, virtualMediaId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String virtualMediaId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPut(resourceBlockId, computerSystemId, virtualMediaId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceZonesGetTest() throws ApiException {
        Object response = api.redfishV1CompositionServiceResourceZonesGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceZonesPostTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceZonesPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceZonesZoneIdActionsZoneAddEndpointPostTest() throws ApiException {
        String zoneId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceZonesZoneIdActionsZoneAddEndpointPost(zoneId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceZonesZoneIdActionsZoneRemoveEndpointPostTest() throws ApiException {
        String zoneId = null;
        Object body = null;
        RedfishError response = api.redfishV1CompositionServiceResourceZonesZoneIdActionsZoneRemoveEndpointPost(zoneId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceZonesZoneIdDeleteTest() throws ApiException {
        String zoneId = null;
        Object response = api.redfishV1CompositionServiceResourceZonesZoneIdDelete(zoneId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceZonesZoneIdGetTest() throws ApiException {
        String zoneId = null;
        Object response = api.redfishV1CompositionServiceResourceZonesZoneIdGet(zoneId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceZonesZoneIdPatchTest() throws ApiException {
        String zoneId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceZonesZoneIdPatch(zoneId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1CompositionServiceResourceZonesZoneIdPutTest() throws ApiException {
        String zoneId = null;
        Object body = null;
        Object response = api.redfishV1CompositionServiceResourceZonesZoneIdPut(zoneId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1EventServiceActionsEventServiceSubmitTestEventPostTest() throws ApiException {
        Object body = null;
        RedfishError response = api.redfishV1EventServiceActionsEventServiceSubmitTestEventPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1EventServiceGetTest() throws ApiException {
        Object response = api.redfishV1EventServiceGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1EventServicePatchTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1EventServicePatch(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1EventServicePutTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1EventServicePut(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1EventServiceSubscriptionsEventDestinationIdActionsEventDestinationResumeSubscriptionPostTest() throws ApiException {
        String eventDestinationId = null;
        Object body = null;
        RedfishError response = api.redfishV1EventServiceSubscriptionsEventDestinationIdActionsEventDestinationResumeSubscriptionPost(eventDestinationId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String eventDestinationId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdActionsCertificateRekeyPost(eventDestinationId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String eventDestinationId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdActionsCertificateRenewPost(eventDestinationId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String eventDestinationId = null;
        String certificateId = null;
        Object response = api.redfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdDelete(eventDestinationId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdGetTest() throws ApiException {
        String eventDestinationId = null;
        String certificateId = null;
        Object response = api.redfishV1EventServiceSubscriptionsEventDestinationIdCertificatesCertificateIdGet(eventDestinationId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1EventServiceSubscriptionsEventDestinationIdCertificatesGetTest() throws ApiException {
        String eventDestinationId = null;
        Object response = api.redfishV1EventServiceSubscriptionsEventDestinationIdCertificatesGet(eventDestinationId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1EventServiceSubscriptionsEventDestinationIdCertificatesPostTest() throws ApiException {
        String eventDestinationId = null;
        Object body = null;
        Object response = api.redfishV1EventServiceSubscriptionsEventDestinationIdCertificatesPost(eventDestinationId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1EventServiceSubscriptionsEventDestinationIdDeleteTest() throws ApiException {
        String eventDestinationId = null;
        Object response = api.redfishV1EventServiceSubscriptionsEventDestinationIdDelete(eventDestinationId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1EventServiceSubscriptionsEventDestinationIdGetTest() throws ApiException {
        String eventDestinationId = null;
        Object response = api.redfishV1EventServiceSubscriptionsEventDestinationIdGet(eventDestinationId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1EventServiceSubscriptionsEventDestinationIdPatchTest() throws ApiException {
        String eventDestinationId = null;
        Object body = null;
        Object response = api.redfishV1EventServiceSubscriptionsEventDestinationIdPatch(eventDestinationId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1EventServiceSubscriptionsEventDestinationIdPutTest() throws ApiException {
        String eventDestinationId = null;
        Object body = null;
        Object response = api.redfishV1EventServiceSubscriptionsEventDestinationIdPut(eventDestinationId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1EventServiceSubscriptionsGetTest() throws ApiException {
        Object response = api.redfishV1EventServiceSubscriptionsGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1EventServiceSubscriptionsPostTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1EventServiceSubscriptionsPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdAddressPoolsAddressPoolIdDeleteTest() throws ApiException {
        String fabricId = null;
        String addressPoolId = null;
        Object response = api.redfishV1FabricsFabricIdAddressPoolsAddressPoolIdDelete(fabricId, addressPoolId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdAddressPoolsAddressPoolIdGetTest() throws ApiException {
        String fabricId = null;
        String addressPoolId = null;
        Object response = api.redfishV1FabricsFabricIdAddressPoolsAddressPoolIdGet(fabricId, addressPoolId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdAddressPoolsAddressPoolIdPatchTest() throws ApiException {
        String fabricId = null;
        String addressPoolId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdAddressPoolsAddressPoolIdPatch(fabricId, addressPoolId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdAddressPoolsAddressPoolIdPutTest() throws ApiException {
        String fabricId = null;
        String addressPoolId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdAddressPoolsAddressPoolIdPut(fabricId, addressPoolId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdAddressPoolsGetTest() throws ApiException {
        String fabricId = null;
        Object response = api.redfishV1FabricsFabricIdAddressPoolsGet(fabricId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdAddressPoolsPostTest() throws ApiException {
        String fabricId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdAddressPoolsPost(fabricId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdConnectionsConnectionIdDeleteTest() throws ApiException {
        String fabricId = null;
        String connectionId = null;
        Object response = api.redfishV1FabricsFabricIdConnectionsConnectionIdDelete(fabricId, connectionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdConnectionsConnectionIdGetTest() throws ApiException {
        String fabricId = null;
        String connectionId = null;
        Object response = api.redfishV1FabricsFabricIdConnectionsConnectionIdGet(fabricId, connectionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdConnectionsConnectionIdPatchTest() throws ApiException {
        String fabricId = null;
        String connectionId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdConnectionsConnectionIdPatch(fabricId, connectionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdConnectionsConnectionIdPutTest() throws ApiException {
        String fabricId = null;
        String connectionId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdConnectionsConnectionIdPut(fabricId, connectionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdConnectionsGetTest() throws ApiException {
        String fabricId = null;
        Object response = api.redfishV1FabricsFabricIdConnectionsGet(fabricId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdConnectionsPostTest() throws ApiException {
        String fabricId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdConnectionsPost(fabricId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdDeleteTest() throws ApiException {
        String fabricId = null;
        String endpointGroupId = null;
        Object response = api.redfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdDelete(fabricId, endpointGroupId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdGetTest() throws ApiException {
        String fabricId = null;
        String endpointGroupId = null;
        Object response = api.redfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdGet(fabricId, endpointGroupId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdPatchTest() throws ApiException {
        String fabricId = null;
        String endpointGroupId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdPatch(fabricId, endpointGroupId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdPutTest() throws ApiException {
        String fabricId = null;
        String endpointGroupId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdEndpointGroupsEndpointGroupIdPut(fabricId, endpointGroupId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdEndpointGroupsGetTest() throws ApiException {
        String fabricId = null;
        Object response = api.redfishV1FabricsFabricIdEndpointGroupsGet(fabricId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdEndpointGroupsPostTest() throws ApiException {
        String fabricId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdEndpointGroupsPost(fabricId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdEndpointsEndpointIdDeleteTest() throws ApiException {
        String fabricId = null;
        String endpointId = null;
        Object response = api.redfishV1FabricsFabricIdEndpointsEndpointIdDelete(fabricId, endpointId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdEndpointsEndpointIdGetTest() throws ApiException {
        String fabricId = null;
        String endpointId = null;
        Object response = api.redfishV1FabricsFabricIdEndpointsEndpointIdGet(fabricId, endpointId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdEndpointsEndpointIdPatchTest() throws ApiException {
        String fabricId = null;
        String endpointId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdEndpointsEndpointIdPatch(fabricId, endpointId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdEndpointsEndpointIdPutTest() throws ApiException {
        String fabricId = null;
        String endpointId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdEndpointsEndpointIdPut(fabricId, endpointId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdEndpointsGetTest() throws ApiException {
        String fabricId = null;
        Object response = api.redfishV1FabricsFabricIdEndpointsGet(fabricId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdEndpointsPostTest() throws ApiException {
        String fabricId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdEndpointsPost(fabricId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdGetTest() throws ApiException {
        String fabricId = null;
        Object response = api.redfishV1FabricsFabricIdGet(fabricId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesGetTest() throws ApiException {
        String fabricId = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesGet(fabricId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdActionsSwitchResetPostTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        Object body = null;
        RedfishError response = api.redfishV1FabricsFabricIdSwitchesSwitchIdActionsSwitchResetPost(fabricId, switchId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdCertificatesCertificateIdActionsCertificateRekeyPost(fabricId, switchId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdCertificatesCertificateIdActionsCertificateRenewPost(fabricId, switchId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String certificateId = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdCertificatesCertificateIdDelete(fabricId, switchId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdCertificatesCertificateIdGetTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String certificateId = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdCertificatesCertificateIdGet(fabricId, switchId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdCertificatesGetTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdCertificatesGet(fabricId, switchId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdCertificatesPostTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdCertificatesPost(fabricId, switchId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        Object body = null;
        RedfishError response = api.redfishV1FabricsFabricIdSwitchesSwitchIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(fabricId, switchId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdEnvironmentMetricsGetTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdEnvironmentMetricsGet(fabricId, switchId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdGetTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdGet(fabricId, switchId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPatchTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPatch(fabricId, switchId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsGetTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsGet(fabricId, switchId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdActionsPortResetPostTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdActionsPortResetPost(fabricId, switchId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(fabricId, switchId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdEnvironmentMetricsGetTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdEnvironmentMetricsGet(fabricId, switchId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdGetTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdGet(fabricId, switchId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTGetTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTGet(fabricId, switchId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdDeleteTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        String lpRTId = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdDelete(fabricId, switchId, portId, lpRTId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdGetTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        String lpRTId = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdGet(fabricId, switchId, portId, lpRTId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdPatchTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        String lpRTId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdPatch(fabricId, switchId, portId, lpRTId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdPutTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        String lpRTId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdPut(fabricId, switchId, portId, lpRTId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetGetTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        String lpRTId = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetGet(fabricId, switchId, portId, lpRTId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetPostTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        String lpRTId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetPost(fabricId, switchId, portId, lpRTId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdDeleteTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        String lpRTId = null;
        String routeId = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdDelete(fabricId, switchId, portId, lpRTId, routeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdGetTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        String lpRTId = null;
        String routeId = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdGet(fabricId, switchId, portId, lpRTId, routeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPatchTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        String lpRTId = null;
        String routeId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPatch(fabricId, switchId, portId, lpRTId, routeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPutTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        String lpRTId = null;
        String routeId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPut(fabricId, switchId, portId, lpRTId, routeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTPostTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdLPRTPost(fabricId, switchId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTGetTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTGet(fabricId, switchId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdDeleteTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        String mpRTId = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdDelete(fabricId, switchId, portId, mpRTId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdGetTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        String mpRTId = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdGet(fabricId, switchId, portId, mpRTId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdPatchTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        String mpRTId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdPatch(fabricId, switchId, portId, mpRTId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdPutTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        String mpRTId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdPut(fabricId, switchId, portId, mpRTId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetGetTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        String mpRTId = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetGet(fabricId, switchId, portId, mpRTId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetPostTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        String mpRTId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetPost(fabricId, switchId, portId, mpRTId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdDeleteTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        String mpRTId = null;
        String routeId = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdDelete(fabricId, switchId, portId, mpRTId, routeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdGetTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        String mpRTId = null;
        String routeId = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdGet(fabricId, switchId, portId, mpRTId, routeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPatchTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        String mpRTId = null;
        String routeId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPatch(fabricId, switchId, portId, mpRTId, routeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPutTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        String mpRTId = null;
        String routeId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPut(fabricId, switchId, portId, mpRTId, routeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTPostTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMPRTPost(fabricId, switchId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMetricsGetTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdMetricsGet(fabricId, switchId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdPatchTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdPatch(fabricId, switchId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdPutTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdPut(fabricId, switchId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATGetTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATGet(fabricId, switchId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATPostTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATPost(fabricId, switchId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdDeleteTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        String vcATEntryId = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdDelete(fabricId, switchId, portId, vcATEntryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdGetTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        String vcATEntryId = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdGet(fabricId, switchId, portId, vcATEntryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdPatchTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        String vcATEntryId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdPatch(fabricId, switchId, portId, vcATEntryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdPutTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        String portId = null;
        String vcATEntryId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPortsPortIdVCATVCATEntryIdPut(fabricId, switchId, portId, vcATEntryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdSwitchesSwitchIdPutTest() throws ApiException {
        String fabricId = null;
        String switchId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdSwitchesSwitchIdPut(fabricId, switchId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdZonesGetTest() throws ApiException {
        String fabricId = null;
        Object response = api.redfishV1FabricsFabricIdZonesGet(fabricId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdZonesPostTest() throws ApiException {
        String fabricId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdZonesPost(fabricId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdZonesZoneIdActionsZoneAddEndpointPostTest() throws ApiException {
        String fabricId = null;
        String zoneId = null;
        Object body = null;
        RedfishError response = api.redfishV1FabricsFabricIdZonesZoneIdActionsZoneAddEndpointPost(fabricId, zoneId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdZonesZoneIdActionsZoneRemoveEndpointPostTest() throws ApiException {
        String fabricId = null;
        String zoneId = null;
        Object body = null;
        RedfishError response = api.redfishV1FabricsFabricIdZonesZoneIdActionsZoneRemoveEndpointPost(fabricId, zoneId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdZonesZoneIdDeleteTest() throws ApiException {
        String fabricId = null;
        String zoneId = null;
        Object response = api.redfishV1FabricsFabricIdZonesZoneIdDelete(fabricId, zoneId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdZonesZoneIdGetTest() throws ApiException {
        String fabricId = null;
        String zoneId = null;
        Object response = api.redfishV1FabricsFabricIdZonesZoneIdGet(fabricId, zoneId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdZonesZoneIdPatchTest() throws ApiException {
        String fabricId = null;
        String zoneId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdZonesZoneIdPatch(fabricId, zoneId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsFabricIdZonesZoneIdPutTest() throws ApiException {
        String fabricId = null;
        String zoneId = null;
        Object body = null;
        Object response = api.redfishV1FabricsFabricIdZonesZoneIdPut(fabricId, zoneId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FabricsGetTest() throws ApiException {
        Object response = api.redfishV1FabricsGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FacilitiesFacilityIdAmbientMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String facilityId = null;
        Object body = null;
        RedfishError response = api.redfishV1FacilitiesFacilityIdAmbientMetricsActionsEnvironmentMetricsResetMetricsPost(facilityId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FacilitiesFacilityIdAmbientMetricsGetTest() throws ApiException {
        String facilityId = null;
        Object response = api.redfishV1FacilitiesFacilityIdAmbientMetricsGet(facilityId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FacilitiesFacilityIdDeleteTest() throws ApiException {
        String facilityId = null;
        Object response = api.redfishV1FacilitiesFacilityIdDelete(facilityId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FacilitiesFacilityIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String facilityId = null;
        Object body = null;
        RedfishError response = api.redfishV1FacilitiesFacilityIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(facilityId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FacilitiesFacilityIdEnvironmentMetricsGetTest() throws ApiException {
        String facilityId = null;
        Object response = api.redfishV1FacilitiesFacilityIdEnvironmentMetricsGet(facilityId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FacilitiesFacilityIdGetTest() throws ApiException {
        String facilityId = null;
        Object response = api.redfishV1FacilitiesFacilityIdGet(facilityId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FacilitiesFacilityIdPatchTest() throws ApiException {
        String facilityId = null;
        Object body = null;
        Object response = api.redfishV1FacilitiesFacilityIdPatch(facilityId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FacilitiesFacilityIdPowerDomainsGetTest() throws ApiException {
        String facilityId = null;
        Object response = api.redfishV1FacilitiesFacilityIdPowerDomainsGet(facilityId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FacilitiesFacilityIdPowerDomainsPostTest() throws ApiException {
        String facilityId = null;
        Object body = null;
        Object response = api.redfishV1FacilitiesFacilityIdPowerDomainsPost(facilityId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdDeleteTest() throws ApiException {
        String facilityId = null;
        String powerDomainId = null;
        Object response = api.redfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdDelete(facilityId, powerDomainId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdGetTest() throws ApiException {
        String facilityId = null;
        String powerDomainId = null;
        Object response = api.redfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdGet(facilityId, powerDomainId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdPatchTest() throws ApiException {
        String facilityId = null;
        String powerDomainId = null;
        Object body = null;
        Object response = api.redfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdPatch(facilityId, powerDomainId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdPutTest() throws ApiException {
        String facilityId = null;
        String powerDomainId = null;
        Object body = null;
        Object response = api.redfishV1FacilitiesFacilityIdPowerDomainsPowerDomainIdPut(facilityId, powerDomainId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FacilitiesFacilityIdPutTest() throws ApiException {
        String facilityId = null;
        Object body = null;
        Object response = api.redfishV1FacilitiesFacilityIdPut(facilityId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FacilitiesFacilityIdSensorsGetTest() throws ApiException {
        String facilityId = null;
        Object response = api.redfishV1FacilitiesFacilityIdSensorsGet(facilityId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FacilitiesGetTest() throws ApiException {
        Object response = api.redfishV1FacilitiesGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1FacilitiesPostTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1FacilitiesPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1GetTest() throws ApiException {
        ServiceRootV1100ServiceRoot response = api.redfishV1Get();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1Get_0Test() throws ApiException {
        ServiceRootV1100ServiceRoot response = api.redfishV1Get_0();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServiceGetTest() throws ApiException {
        Object response = api.redfishV1JobServiceGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServiceJobsGetTest() throws ApiException {
        Object response = api.redfishV1JobServiceJobsGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServiceJobsJobIdDeleteTest() throws ApiException {
        String jobId = null;
        Object response = api.redfishV1JobServiceJobsJobIdDelete(jobId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServiceJobsJobIdGetTest() throws ApiException {
        String jobId = null;
        Object response = api.redfishV1JobServiceJobsJobIdGet(jobId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServiceJobsJobIdPatchTest() throws ApiException {
        String jobId = null;
        Object body = null;
        Object response = api.redfishV1JobServiceJobsJobIdPatch(jobId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServiceJobsJobIdPutTest() throws ApiException {
        String jobId = null;
        Object body = null;
        Object response = api.redfishV1JobServiceJobsJobIdPut(jobId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServiceJobsJobIdStepsGetTest() throws ApiException {
        String jobId = null;
        Object response = api.redfishV1JobServiceJobsJobIdStepsGet(jobId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServiceJobsJobIdStepsJobId2DeleteTest() throws ApiException {
        String jobId = null;
        String jobId2 = null;
        Object response = api.redfishV1JobServiceJobsJobIdStepsJobId2Delete(jobId, jobId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServiceJobsJobIdStepsJobId2GetTest() throws ApiException {
        String jobId = null;
        String jobId2 = null;
        Object response = api.redfishV1JobServiceJobsJobIdStepsJobId2Get(jobId, jobId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServiceJobsJobIdStepsJobId2PatchTest() throws ApiException {
        String jobId = null;
        String jobId2 = null;
        Object body = null;
        Object response = api.redfishV1JobServiceJobsJobIdStepsJobId2Patch(jobId, jobId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServiceJobsJobIdStepsJobId2PutTest() throws ApiException {
        String jobId = null;
        String jobId2 = null;
        Object body = null;
        Object response = api.redfishV1JobServiceJobsJobIdStepsJobId2Put(jobId, jobId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServiceJobsJobIdStepsPostTest() throws ApiException {
        String jobId = null;
        Object body = null;
        Object response = api.redfishV1JobServiceJobsJobIdStepsPost(jobId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServiceJobsPostTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1JobServiceJobsPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServiceLogActionsLogServiceClearLogPostTest() throws ApiException {
        Object body = null;
        RedfishError response = api.redfishV1JobServiceLogActionsLogServiceClearLogPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServiceLogActionsLogServiceCollectDiagnosticDataPostTest() throws ApiException {
        Object body = null;
        RedfishError response = api.redfishV1JobServiceLogActionsLogServiceCollectDiagnosticDataPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServiceLogEntriesGetTest() throws ApiException {
        Object response = api.redfishV1JobServiceLogEntriesGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServiceLogEntriesLogEntryIdDeleteTest() throws ApiException {
        String logEntryId = null;
        Object response = api.redfishV1JobServiceLogEntriesLogEntryIdDelete(logEntryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServiceLogEntriesLogEntryIdGetTest() throws ApiException {
        String logEntryId = null;
        Object response = api.redfishV1JobServiceLogEntriesLogEntryIdGet(logEntryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServiceLogEntriesLogEntryIdPatchTest() throws ApiException {
        String logEntryId = null;
        Object body = null;
        Object response = api.redfishV1JobServiceLogEntriesLogEntryIdPatch(logEntryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServiceLogEntriesLogEntryIdPutTest() throws ApiException {
        String logEntryId = null;
        Object body = null;
        Object response = api.redfishV1JobServiceLogEntriesLogEntryIdPut(logEntryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServiceLogEntriesPostTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1JobServiceLogEntriesPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServiceLogGetTest() throws ApiException {
        Object response = api.redfishV1JobServiceLogGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServiceLogPatchTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1JobServiceLogPatch(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServiceLogPutTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1JobServiceLogPut(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServicePatchTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1JobServicePatch(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JobServicePutTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1JobServicePut(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JsonSchemasGetTest() throws ApiException {
        Object response = api.redfishV1JsonSchemasGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1JsonSchemasJsonSchemaFileIdGetTest() throws ApiException {
        String jsonSchemaFileId = null;
        Object response = api.redfishV1JsonSchemasJsonSchemaFileIdGet(jsonSchemaFileId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersGetTest() throws ApiException {
        Object response = api.redfishV1ManagersGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdActionsManagerForceFailoverPostTest() throws ApiException {
        String managerId = null;
        Object body = null;
        RedfishError response = api.redfishV1ManagersManagerIdActionsManagerForceFailoverPost(managerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdActionsManagerModifyRedundancySetPostTest() throws ApiException {
        String managerId = null;
        Object body = null;
        RedfishError response = api.redfishV1ManagersManagerIdActionsManagerModifyRedundancySetPost(managerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdActionsManagerResetPostTest() throws ApiException {
        String managerId = null;
        Object body = null;
        RedfishError response = api.redfishV1ManagersManagerIdActionsManagerResetPost(managerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdActionsManagerResetToDefaultsPostTest() throws ApiException {
        String managerId = null;
        Object body = null;
        RedfishError response = api.redfishV1ManagersManagerIdActionsManagerResetToDefaultsPost(managerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdGetTest() throws ApiException {
        String managerId = null;
        String ethernetInterfaceId = null;
        Object response = api.redfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdGet(managerId, ethernetInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdPatchTest() throws ApiException {
        String managerId = null;
        String ethernetInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdPatch(managerId, ethernetInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdPutTest() throws ApiException {
        String managerId = null;
        String ethernetInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdPut(managerId, ethernetInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsGetTest() throws ApiException {
        String managerId = null;
        String ethernetInterfaceId = null;
        Object response = api.redfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsGet(managerId, ethernetInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsPostTest() throws ApiException {
        String managerId = null;
        String ethernetInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsPost(managerId, ethernetInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDeleteTest() throws ApiException {
        String managerId = null;
        String ethernetInterfaceId = null;
        String vlanNetworkInterfaceId = null;
        Object response = api.redfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete(managerId, ethernetInterfaceId, vlanNetworkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGetTest() throws ApiException {
        String managerId = null;
        String ethernetInterfaceId = null;
        String vlanNetworkInterfaceId = null;
        Object response = api.redfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet(managerId, ethernetInterfaceId, vlanNetworkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatchTest() throws ApiException {
        String managerId = null;
        String ethernetInterfaceId = null;
        String vlanNetworkInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch(managerId, ethernetInterfaceId, vlanNetworkInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPutTest() throws ApiException {
        String managerId = null;
        String ethernetInterfaceId = null;
        String vlanNetworkInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut(managerId, ethernetInterfaceId, vlanNetworkInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdEthernetInterfacesGetTest() throws ApiException {
        String managerId = null;
        Object response = api.redfishV1ManagersManagerIdEthernetInterfacesGet(managerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdGetTest() throws ApiException {
        String managerId = null;
        Object response = api.redfishV1ManagersManagerIdGet(managerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdHostInterfacesGetTest() throws ApiException {
        String managerId = null;
        Object response = api.redfishV1ManagersManagerIdHostInterfacesGet(managerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdHostInterfacesHostInterfaceIdGetTest() throws ApiException {
        String managerId = null;
        String hostInterfaceId = null;
        Object response = api.redfishV1ManagersManagerIdHostInterfacesHostInterfaceIdGet(managerId, hostInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdHostInterfacesHostInterfaceIdHostEthernetInterfacesGetTest() throws ApiException {
        String managerId = null;
        String hostInterfaceId = null;
        Object response = api.redfishV1ManagersManagerIdHostInterfacesHostInterfaceIdHostEthernetInterfacesGet(managerId, hostInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdHostInterfacesHostInterfaceIdPatchTest() throws ApiException {
        String managerId = null;
        String hostInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdHostInterfacesHostInterfaceIdPatch(managerId, hostInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdHostInterfacesHostInterfaceIdPutTest() throws ApiException {
        String managerId = null;
        String hostInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdHostInterfacesHostInterfaceIdPut(managerId, hostInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdLogServicesGetTest() throws ApiException {
        String managerId = null;
        Object response = api.redfishV1ManagersManagerIdLogServicesGet(managerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdLogServicesLogServiceIdActionsLogServiceClearLogPostTest() throws ApiException {
        String managerId = null;
        String logServiceId = null;
        Object body = null;
        RedfishError response = api.redfishV1ManagersManagerIdLogServicesLogServiceIdActionsLogServiceClearLogPost(managerId, logServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPostTest() throws ApiException {
        String managerId = null;
        String logServiceId = null;
        Object body = null;
        RedfishError response = api.redfishV1ManagersManagerIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost(managerId, logServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdLogServicesLogServiceIdEntriesGetTest() throws ApiException {
        String managerId = null;
        String logServiceId = null;
        Object response = api.redfishV1ManagersManagerIdLogServicesLogServiceIdEntriesGet(managerId, logServiceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdLogServicesLogServiceIdEntriesLogEntryIdDeleteTest() throws ApiException {
        String managerId = null;
        String logServiceId = null;
        String logEntryId = null;
        Object response = api.redfishV1ManagersManagerIdLogServicesLogServiceIdEntriesLogEntryIdDelete(managerId, logServiceId, logEntryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdLogServicesLogServiceIdEntriesLogEntryIdGetTest() throws ApiException {
        String managerId = null;
        String logServiceId = null;
        String logEntryId = null;
        Object response = api.redfishV1ManagersManagerIdLogServicesLogServiceIdEntriesLogEntryIdGet(managerId, logServiceId, logEntryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdLogServicesLogServiceIdEntriesLogEntryIdPatchTest() throws ApiException {
        String managerId = null;
        String logServiceId = null;
        String logEntryId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdLogServicesLogServiceIdEntriesLogEntryIdPatch(managerId, logServiceId, logEntryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdLogServicesLogServiceIdEntriesLogEntryIdPutTest() throws ApiException {
        String managerId = null;
        String logServiceId = null;
        String logEntryId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdLogServicesLogServiceIdEntriesLogEntryIdPut(managerId, logServiceId, logEntryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdLogServicesLogServiceIdEntriesPostTest() throws ApiException {
        String managerId = null;
        String logServiceId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdLogServicesLogServiceIdEntriesPost(managerId, logServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdLogServicesLogServiceIdGetTest() throws ApiException {
        String managerId = null;
        String logServiceId = null;
        Object response = api.redfishV1ManagersManagerIdLogServicesLogServiceIdGet(managerId, logServiceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdLogServicesLogServiceIdPatchTest() throws ApiException {
        String managerId = null;
        String logServiceId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdLogServicesLogServiceIdPatch(managerId, logServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdLogServicesLogServiceIdPutTest() throws ApiException {
        String managerId = null;
        String logServiceId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdLogServicesLogServiceIdPut(managerId, logServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdNetworkProtocolGetTest() throws ApiException {
        String managerId = null;
        Object response = api.redfishV1ManagersManagerIdNetworkProtocolGet(managerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String managerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdActionsCertificateRekeyPost(managerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String managerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdActionsCertificateRenewPost(managerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdDeleteTest() throws ApiException {
        String managerId = null;
        String certificateId = null;
        Object response = api.redfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdDelete(managerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdGetTest() throws ApiException {
        String managerId = null;
        String certificateId = null;
        Object response = api.redfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesCertificateIdGet(managerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesGetTest() throws ApiException {
        String managerId = null;
        Object response = api.redfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesGet(managerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesPostTest() throws ApiException {
        String managerId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdNetworkProtocolHTTPSCertificatesPost(managerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdNetworkProtocolPatchTest() throws ApiException {
        String managerId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdNetworkProtocolPatch(managerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdNetworkProtocolPutTest() throws ApiException {
        String managerId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdNetworkProtocolPut(managerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdPatchTest() throws ApiException {
        String managerId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdPatch(managerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdPutTest() throws ApiException {
        String managerId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdPut(managerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceAccountsGetTest() throws ApiException {
        String managerId = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceAccountsGet(managerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String managerId = null;
        String managerAccountId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRekeyPost(managerId, managerAccountId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String managerId = null;
        String managerAccountId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdActionsCertificateRenewPost(managerId, managerAccountId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String managerId = null;
        String managerAccountId = null;
        String certificateId = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdDelete(managerId, managerAccountId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdGetTest() throws ApiException {
        String managerId = null;
        String managerAccountId = null;
        String certificateId = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesCertificateIdGet(managerId, managerAccountId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesGetTest() throws ApiException {
        String managerId = null;
        String managerAccountId = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesGet(managerId, managerAccountId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesPostTest() throws ApiException {
        String managerId = null;
        String managerAccountId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdCertificatesPost(managerId, managerAccountId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdDeleteTest() throws ApiException {
        String managerId = null;
        String managerAccountId = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdDelete(managerId, managerAccountId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdGetTest() throws ApiException {
        String managerId = null;
        String managerAccountId = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdGet(managerId, managerAccountId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdPatchTest() throws ApiException {
        String managerId = null;
        String managerAccountId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdPatch(managerId, managerAccountId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdPutTest() throws ApiException {
        String managerId = null;
        String managerAccountId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceAccountsManagerAccountIdPut(managerId, managerAccountId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceAccountsPostTest() throws ApiException {
        String managerId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceAccountsPost(managerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String managerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRekeyPost(managerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String managerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdActionsCertificateRenewPost(managerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdDeleteTest() throws ApiException {
        String managerId = null;
        String certificateId = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdDelete(managerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdGetTest() throws ApiException {
        String managerId = null;
        String certificateId = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesCertificateIdGet(managerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesGetTest() throws ApiException {
        String managerId = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesGet(managerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesPostTest() throws ApiException {
        String managerId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceActiveDirectoryCertificatesPost(managerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String managerId = null;
        String externalAccountProviderId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRekeyPost(managerId, externalAccountProviderId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String managerId = null;
        String externalAccountProviderId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdActionsCertificateRenewPost(managerId, externalAccountProviderId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String managerId = null;
        String externalAccountProviderId = null;
        String certificateId = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdDelete(managerId, externalAccountProviderId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdGetTest() throws ApiException {
        String managerId = null;
        String externalAccountProviderId = null;
        String certificateId = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesCertificateIdGet(managerId, externalAccountProviderId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesGetTest() throws ApiException {
        String managerId = null;
        String externalAccountProviderId = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesGet(managerId, externalAccountProviderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesPostTest() throws ApiException {
        String managerId = null;
        String externalAccountProviderId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdCertificatesPost(managerId, externalAccountProviderId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdDeleteTest() throws ApiException {
        String managerId = null;
        String externalAccountProviderId = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdDelete(managerId, externalAccountProviderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdGetTest() throws ApiException {
        String managerId = null;
        String externalAccountProviderId = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdGet(managerId, externalAccountProviderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdPatchTest() throws ApiException {
        String managerId = null;
        String externalAccountProviderId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdPatch(managerId, externalAccountProviderId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdPutTest() throws ApiException {
        String managerId = null;
        String externalAccountProviderId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersExternalAccountProviderIdPut(managerId, externalAccountProviderId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersGetTest() throws ApiException {
        String managerId = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersGet(managerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersPostTest() throws ApiException {
        String managerId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceExternalAccountProvidersPost(managerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceGetTest() throws ApiException {
        String managerId = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceGet(managerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String managerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdActionsCertificateRekeyPost(managerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String managerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdActionsCertificateRenewPost(managerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdDeleteTest() throws ApiException {
        String managerId = null;
        String certificateId = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdDelete(managerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdGetTest() throws ApiException {
        String managerId = null;
        String certificateId = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesCertificateIdGet(managerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesGetTest() throws ApiException {
        String managerId = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesGet(managerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesPostTest() throws ApiException {
        String managerId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceLDAPCertificatesPost(managerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServicePatchTest() throws ApiException {
        String managerId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServicePatch(managerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServicePutTest() throws ApiException {
        String managerId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServicePut(managerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceRolesGetTest() throws ApiException {
        String managerId = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceRolesGet(managerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceRolesRoleIdGetTest() throws ApiException {
        String managerId = null;
        String roleId = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceRolesRoleIdGet(managerId, roleId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceRolesRoleIdPatchTest() throws ApiException {
        String managerId = null;
        String roleId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceRolesRoleIdPatch(managerId, roleId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdRemoteAccountServiceRolesRoleIdPutTest() throws ApiException {
        String managerId = null;
        String roleId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdRemoteAccountServiceRolesRoleIdPut(managerId, roleId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdSerialInterfacesGetTest() throws ApiException {
        String managerId = null;
        Object response = api.redfishV1ManagersManagerIdSerialInterfacesGet(managerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdSerialInterfacesSerialInterfaceIdGetTest() throws ApiException {
        String managerId = null;
        String serialInterfaceId = null;
        Object response = api.redfishV1ManagersManagerIdSerialInterfacesSerialInterfaceIdGet(managerId, serialInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdSerialInterfacesSerialInterfaceIdPatchTest() throws ApiException {
        String managerId = null;
        String serialInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdSerialInterfacesSerialInterfaceIdPatch(managerId, serialInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdSerialInterfacesSerialInterfaceIdPutTest() throws ApiException {
        String managerId = null;
        String serialInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdSerialInterfacesSerialInterfaceIdPut(managerId, serialInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdUSBPortsGetTest() throws ApiException {
        String managerId = null;
        Object response = api.redfishV1ManagersManagerIdUSBPortsGet(managerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdUSBPortsPortIdActionsPortResetPostTest() throws ApiException {
        String managerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1ManagersManagerIdUSBPortsPortIdActionsPortResetPost(managerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdUSBPortsPortIdGetTest() throws ApiException {
        String managerId = null;
        String portId = null;
        Object response = api.redfishV1ManagersManagerIdUSBPortsPortIdGet(managerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdUSBPortsPortIdPatchTest() throws ApiException {
        String managerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdUSBPortsPortIdPatch(managerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdUSBPortsPortIdPutTest() throws ApiException {
        String managerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdUSBPortsPortIdPut(managerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdVirtualMediaGetTest() throws ApiException {
        String managerId = null;
        Object response = api.redfishV1ManagersManagerIdVirtualMediaGet(managerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPostTest() throws ApiException {
        String managerId = null;
        String virtualMediaId = null;
        Object body = null;
        RedfishError response = api.redfishV1ManagersManagerIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost(managerId, virtualMediaId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPostTest() throws ApiException {
        String managerId = null;
        String virtualMediaId = null;
        Object body = null;
        RedfishError response = api.redfishV1ManagersManagerIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost(managerId, virtualMediaId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdVirtualMediaVirtualMediaIdGetTest() throws ApiException {
        String managerId = null;
        String virtualMediaId = null;
        Object response = api.redfishV1ManagersManagerIdVirtualMediaVirtualMediaIdGet(managerId, virtualMediaId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdVirtualMediaVirtualMediaIdPatchTest() throws ApiException {
        String managerId = null;
        String virtualMediaId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdVirtualMediaVirtualMediaIdPatch(managerId, virtualMediaId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ManagersManagerIdVirtualMediaVirtualMediaIdPutTest() throws ApiException {
        String managerId = null;
        String virtualMediaId = null;
        Object body = null;
        Object response = api.redfishV1ManagersManagerIdVirtualMediaVirtualMediaIdPut(managerId, virtualMediaId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsGetTest() throws ApiException {
        Object response = api.redfishV1PowerEquipmentFloorPDUsGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdActionsPowerDistributionTransferControlPostTest() throws ApiException {
        String powerDistributionId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdActionsPowerDistributionTransferControlPost(powerDistributionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitBreakerControlPostTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitBreakerControlPost(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitPowerControlPostTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitPowerControlPost(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitResetMetricsPostTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitResetMetricsPost(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdGetTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdGet(powerDistributionId, circuitId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdPatchTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdPatch(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdPutTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesCircuitIdPut(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesGetTest() throws ApiException {
        String powerDistributionId = null;
        Object response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdBranchesGet(powerDistributionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdGetTest() throws ApiException {
        String powerDistributionId = null;
        Object response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdGet(powerDistributionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdActionsCircuitBreakerControlPostTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdActionsCircuitBreakerControlPost(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdActionsCircuitPowerControlPostTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdActionsCircuitPowerControlPost(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdActionsCircuitResetMetricsPostTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdActionsCircuitResetMetricsPost(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdGetTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdGet(powerDistributionId, circuitId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdPatchTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdPatch(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdPutTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsCircuitIdPut(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsGetTest() throws ApiException {
        String powerDistributionId = null;
        Object response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdMainsGet(powerDistributionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdMetricsActionsPowerDistributionMetricsResetMetricsPostTest() throws ApiException {
        String powerDistributionId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdMetricsActionsPowerDistributionMetricsResetMetricsPost(powerDistributionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdMetricsGetTest() throws ApiException {
        String powerDistributionId = null;
        Object response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdMetricsGet(powerDistributionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdActionsOutletPowerControlPostTest() throws ApiException {
        String powerDistributionId = null;
        String outletId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdActionsOutletPowerControlPost(powerDistributionId, outletId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdActionsOutletResetMetricsPostTest() throws ApiException {
        String powerDistributionId = null;
        String outletId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdActionsOutletResetMetricsPost(powerDistributionId, outletId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdGetTest() throws ApiException {
        String powerDistributionId = null;
        String outletId = null;
        Object response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdGet(powerDistributionId, outletId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdPatchTest() throws ApiException {
        String powerDistributionId = null;
        String outletId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdPatch(powerDistributionId, outletId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdPutTest() throws ApiException {
        String powerDistributionId = null;
        String outletId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdOutletsOutletIdPut(powerDistributionId, outletId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdPatchTest() throws ApiException {
        String powerDistributionId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdPatch(powerDistributionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdPutTest() throws ApiException {
        String powerDistributionId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdPut(powerDistributionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsGetTest() throws ApiException {
        String powerDistributionId = null;
        Object response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsGet(powerDistributionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdActionsSensorResetMetricsPostTest() throws ApiException {
        String powerDistributionId = null;
        String sensorId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdActionsSensorResetMetricsPost(powerDistributionId, sensorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdGetTest() throws ApiException {
        String powerDistributionId = null;
        String sensorId = null;
        Object response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdGet(powerDistributionId, sensorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdPatchTest() throws ApiException {
        String powerDistributionId = null;
        String sensorId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdPatch(powerDistributionId, sensorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdPutTest() throws ApiException {
        String powerDistributionId = null;
        String sensorId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdSensorsSensorIdPut(powerDistributionId, sensorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdActionsCircuitBreakerControlPostTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdActionsCircuitBreakerControlPost(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdActionsCircuitPowerControlPostTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdActionsCircuitPowerControlPost(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdActionsCircuitResetMetricsPostTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdActionsCircuitResetMetricsPost(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdGetTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdGet(powerDistributionId, circuitId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdPatchTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdPatch(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdPutTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsCircuitIdPut(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsGetTest() throws ApiException {
        String powerDistributionId = null;
        Object response = api.redfishV1PowerEquipmentFloorPDUsPowerDistributionIdSubfeedsGet(powerDistributionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentGetTest() throws ApiException {
        Object response = api.redfishV1PowerEquipmentGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsGetTest() throws ApiException {
        Object response = api.redfishV1PowerEquipmentRackPDUsGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdActionsPowerDistributionTransferControlPostTest() throws ApiException {
        String powerDistributionId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdActionsPowerDistributionTransferControlPost(powerDistributionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitBreakerControlPostTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitBreakerControlPost(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitPowerControlPostTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitPowerControlPost(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitResetMetricsPostTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdActionsCircuitResetMetricsPost(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdGetTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdGet(powerDistributionId, circuitId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdPatchTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdPatch(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdPutTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesCircuitIdPut(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesGetTest() throws ApiException {
        String powerDistributionId = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdBranchesGet(powerDistributionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdGetTest() throws ApiException {
        String powerDistributionId = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdGet(powerDistributionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdActionsCircuitBreakerControlPostTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdActionsCircuitBreakerControlPost(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdActionsCircuitPowerControlPostTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdActionsCircuitPowerControlPost(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdActionsCircuitResetMetricsPostTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdActionsCircuitResetMetricsPost(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdGetTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdGet(powerDistributionId, circuitId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdPatchTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdPatch(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdPutTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsCircuitIdPut(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsGetTest() throws ApiException {
        String powerDistributionId = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdMainsGet(powerDistributionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdMetricsActionsPowerDistributionMetricsResetMetricsPostTest() throws ApiException {
        String powerDistributionId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdMetricsActionsPowerDistributionMetricsResetMetricsPost(powerDistributionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdMetricsGetTest() throws ApiException {
        String powerDistributionId = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdMetricsGet(powerDistributionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsGetTest() throws ApiException {
        String powerDistributionId = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsGet(powerDistributionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupPowerControlPostTest() throws ApiException {
        String powerDistributionId = null;
        String outletGroupId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupPowerControlPost(powerDistributionId, outletGroupId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupResetMetricsPostTest() throws ApiException {
        String powerDistributionId = null;
        String outletGroupId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupResetMetricsPost(powerDistributionId, outletGroupId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdDeleteTest() throws ApiException {
        String powerDistributionId = null;
        String outletGroupId = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdDelete(powerDistributionId, outletGroupId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdGetTest() throws ApiException {
        String powerDistributionId = null;
        String outletGroupId = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdGet(powerDistributionId, outletGroupId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdPatchTest() throws ApiException {
        String powerDistributionId = null;
        String outletGroupId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdPatch(powerDistributionId, outletGroupId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdPutTest() throws ApiException {
        String powerDistributionId = null;
        String outletGroupId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsOutletGroupIdPut(powerDistributionId, outletGroupId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsPostTest() throws ApiException {
        String powerDistributionId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletGroupsPost(powerDistributionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsGetTest() throws ApiException {
        String powerDistributionId = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsGet(powerDistributionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdActionsOutletPowerControlPostTest() throws ApiException {
        String powerDistributionId = null;
        String outletId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdActionsOutletPowerControlPost(powerDistributionId, outletId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdActionsOutletResetMetricsPostTest() throws ApiException {
        String powerDistributionId = null;
        String outletId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdActionsOutletResetMetricsPost(powerDistributionId, outletId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdGetTest() throws ApiException {
        String powerDistributionId = null;
        String outletId = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdGet(powerDistributionId, outletId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdPatchTest() throws ApiException {
        String powerDistributionId = null;
        String outletId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdPatch(powerDistributionId, outletId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdPutTest() throws ApiException {
        String powerDistributionId = null;
        String outletId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdOutletsOutletIdPut(powerDistributionId, outletId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdPatchTest() throws ApiException {
        String powerDistributionId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdPatch(powerDistributionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdPutTest() throws ApiException {
        String powerDistributionId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdPut(powerDistributionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsGetTest() throws ApiException {
        String powerDistributionId = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsGet(powerDistributionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdActionsSensorResetMetricsPostTest() throws ApiException {
        String powerDistributionId = null;
        String sensorId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdActionsSensorResetMetricsPost(powerDistributionId, sensorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdGetTest() throws ApiException {
        String powerDistributionId = null;
        String sensorId = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdGet(powerDistributionId, sensorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdPatchTest() throws ApiException {
        String powerDistributionId = null;
        String sensorId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdPatch(powerDistributionId, sensorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdPutTest() throws ApiException {
        String powerDistributionId = null;
        String sensorId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentRackPDUsPowerDistributionIdSensorsSensorIdPut(powerDistributionId, sensorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentSensorsSensorIdActionsSensorResetMetricsPostTest() throws ApiException {
        String sensorId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentSensorsSensorIdActionsSensorResetMetricsPost(sensorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentSensorsSensorIdGetTest() throws ApiException {
        String sensorId = null;
        Object response = api.redfishV1PowerEquipmentSensorsSensorIdGet(sensorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentSensorsSensorIdPatchTest() throws ApiException {
        String sensorId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentSensorsSensorIdPatch(sensorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentSensorsSensorIdPutTest() throws ApiException {
        String sensorId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentSensorsSensorIdPut(sensorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentSwitchgearGetTest() throws ApiException {
        Object response = api.redfishV1PowerEquipmentSwitchgearGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentSwitchgearPowerDistributionIdSensorsGetTest() throws ApiException {
        String powerDistributionId = null;
        Object response = api.redfishV1PowerEquipmentSwitchgearPowerDistributionIdSensorsGet(powerDistributionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesGetTest() throws ApiException {
        Object response = api.redfishV1PowerEquipmentTransferSwitchesGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdActionsPowerDistributionTransferControlPostTest() throws ApiException {
        String powerDistributionId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdActionsPowerDistributionTransferControlPost(powerDistributionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdActionsCircuitBreakerControlPostTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdActionsCircuitBreakerControlPost(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdActionsCircuitPowerControlPostTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdActionsCircuitPowerControlPost(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdActionsCircuitResetMetricsPostTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdActionsCircuitResetMetricsPost(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdGetTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdGet(powerDistributionId, circuitId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdPatchTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdPatch(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdPutTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesCircuitIdPut(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesGetTest() throws ApiException {
        String powerDistributionId = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdBranchesGet(powerDistributionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdActionsCircuitBreakerControlPostTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdActionsCircuitBreakerControlPost(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdActionsCircuitPowerControlPostTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdActionsCircuitPowerControlPost(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdActionsCircuitResetMetricsPostTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdActionsCircuitResetMetricsPost(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdGetTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdGet(powerDistributionId, circuitId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdPatchTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdPatch(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdPutTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersCircuitIdPut(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersGetTest() throws ApiException {
        String powerDistributionId = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdFeedersGet(powerDistributionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdGetTest() throws ApiException {
        String powerDistributionId = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdGet(powerDistributionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdActionsCircuitBreakerControlPostTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdActionsCircuitBreakerControlPost(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdActionsCircuitPowerControlPostTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdActionsCircuitPowerControlPost(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdActionsCircuitResetMetricsPostTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdActionsCircuitResetMetricsPost(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdGetTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdGet(powerDistributionId, circuitId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdPatchTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdPatch(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdPutTest() throws ApiException {
        String powerDistributionId = null;
        String circuitId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsCircuitIdPut(powerDistributionId, circuitId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsGetTest() throws ApiException {
        String powerDistributionId = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMainsGet(powerDistributionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMetricsActionsPowerDistributionMetricsResetMetricsPostTest() throws ApiException {
        String powerDistributionId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMetricsActionsPowerDistributionMetricsResetMetricsPost(powerDistributionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMetricsGetTest() throws ApiException {
        String powerDistributionId = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdMetricsGet(powerDistributionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsGetTest() throws ApiException {
        String powerDistributionId = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsGet(powerDistributionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupPowerControlPostTest() throws ApiException {
        String powerDistributionId = null;
        String outletGroupId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupPowerControlPost(powerDistributionId, outletGroupId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupResetMetricsPostTest() throws ApiException {
        String powerDistributionId = null;
        String outletGroupId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdActionsOutletGroupResetMetricsPost(powerDistributionId, outletGroupId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdDeleteTest() throws ApiException {
        String powerDistributionId = null;
        String outletGroupId = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdDelete(powerDistributionId, outletGroupId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdGetTest() throws ApiException {
        String powerDistributionId = null;
        String outletGroupId = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdGet(powerDistributionId, outletGroupId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdPatchTest() throws ApiException {
        String powerDistributionId = null;
        String outletGroupId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdPatch(powerDistributionId, outletGroupId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdPutTest() throws ApiException {
        String powerDistributionId = null;
        String outletGroupId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsOutletGroupIdPut(powerDistributionId, outletGroupId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsPostTest() throws ApiException {
        String powerDistributionId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletGroupsPost(powerDistributionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsGetTest() throws ApiException {
        String powerDistributionId = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsGet(powerDistributionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdActionsOutletPowerControlPostTest() throws ApiException {
        String powerDistributionId = null;
        String outletId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdActionsOutletPowerControlPost(powerDistributionId, outletId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdActionsOutletResetMetricsPostTest() throws ApiException {
        String powerDistributionId = null;
        String outletId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdActionsOutletResetMetricsPost(powerDistributionId, outletId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdGetTest() throws ApiException {
        String powerDistributionId = null;
        String outletId = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdGet(powerDistributionId, outletId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdPatchTest() throws ApiException {
        String powerDistributionId = null;
        String outletId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdPatch(powerDistributionId, outletId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdPutTest() throws ApiException {
        String powerDistributionId = null;
        String outletId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdOutletsOutletIdPut(powerDistributionId, outletId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdPatchTest() throws ApiException {
        String powerDistributionId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdPatch(powerDistributionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdPutTest() throws ApiException {
        String powerDistributionId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdPut(powerDistributionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsGetTest() throws ApiException {
        String powerDistributionId = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsGet(powerDistributionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdActionsSensorResetMetricsPostTest() throws ApiException {
        String powerDistributionId = null;
        String sensorId = null;
        Object body = null;
        RedfishError response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdActionsSensorResetMetricsPost(powerDistributionId, sensorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdGetTest() throws ApiException {
        String powerDistributionId = null;
        String sensorId = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdGet(powerDistributionId, sensorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdPatchTest() throws ApiException {
        String powerDistributionId = null;
        String sensorId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdPatch(powerDistributionId, sensorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdPutTest() throws ApiException {
        String powerDistributionId = null;
        String sensorId = null;
        Object body = null;
        Object response = api.redfishV1PowerEquipmentTransferSwitchesPowerDistributionIdSensorsSensorIdPut(powerDistributionId, sensorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1RegistriesGetTest() throws ApiException {
        Object response = api.redfishV1RegistriesGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1RegistriesMessageRegistryFileIdGetTest() throws ApiException {
        String messageRegistryFileId = null;
        Object response = api.redfishV1RegistriesMessageRegistryFileIdGet(messageRegistryFileId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksGetTest() throws ApiException {
        Object response = api.redfishV1ResourceBlocksGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksPostTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1ResourceBlocksPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdDelete(resourceBlockId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveResetPost(resourceBlockId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveSecureErasePostTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdActionsDriveSecureErasePost(resourceBlockId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdAssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdAssemblyGet(resourceBlockId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPatch(resourceBlockId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdAssemblyPut(resourceBlockId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, driveId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, driveId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdCertificatesCertificateIdDelete(resourceBlockId, driveId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdCertificatesCertificateIdGet(resourceBlockId, driveId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdCertificatesGet(resourceBlockId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdCertificatesPost(resourceBlockId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdEnvironmentMetricsGet(resourceBlockId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdGet(resourceBlockId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdPatch(resourceBlockId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdDrivesDriveIdPut(resourceBlockId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String ethernetInterfaceId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdGet(resourceBlockId, ethernetInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String ethernetInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPatch(resourceBlockId, ethernetInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String ethernetInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdPut(resourceBlockId, ethernetInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsGetTest() throws ApiException {
        String resourceBlockId = null;
        String ethernetInterfaceId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsGet(resourceBlockId, ethernetInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsPostTest() throws ApiException {
        String resourceBlockId = null;
        String ethernetInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsPost(resourceBlockId, ethernetInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String ethernetInterfaceId = null;
        String vlanNetworkInterfaceId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete(resourceBlockId, ethernetInterfaceId, vlanNetworkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String ethernetInterfaceId = null;
        String vlanNetworkInterfaceId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet(resourceBlockId, ethernetInterfaceId, vlanNetworkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String ethernetInterfaceId = null;
        String vlanNetworkInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch(resourceBlockId, ethernetInterfaceId, vlanNetworkInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String ethernetInterfaceId = null;
        String vlanNetworkInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut(resourceBlockId, ethernetInterfaceId, vlanNetworkInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdGetTest() throws ApiException {
        String resourceBlockId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdGet(resourceBlockId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryDisablePassphrasePostTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryDisablePassphrasePost(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryOverwriteUnitPostTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryOverwriteUnitPost(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryResetPost(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySecureEraseUnitPostTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySecureEraseUnitPost(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySetPassphrasePostTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemorySetPassphrasePost(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryUnlockUnitPostTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdActionsMemoryUnlockUnitPost(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyGet(resourceBlockId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPatch(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdAssemblyPut(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, memoryId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, memoryId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdCertificatesCertificateIdDelete(resourceBlockId, memoryId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdCertificatesCertificateIdGet(resourceBlockId, memoryId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdCertificatesGet(resourceBlockId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdCertificatesPost(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdEnvironmentMetricsGet(resourceBlockId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdGet(resourceBlockId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPostTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdMemoryMetricsGet(resourceBlockId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdPatch(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdMemoryMemoryIdPut(resourceBlockId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String networkInterfaceId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdGet(resourceBlockId, networkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGetTest() throws ApiException {
        String resourceBlockId = null;
        String networkInterfaceId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet(resourceBlockId, networkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGetTest() throws ApiException {
        String resourceBlockId = null;
        String networkInterfaceId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet(resourceBlockId, networkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdPortsGetTest() throws ApiException {
        String resourceBlockId = null;
        String networkInterfaceId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdNetworkInterfacesNetworkInterfaceIdPortsGet(resourceBlockId, networkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdPatch(resourceBlockId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String accelerationFunctionId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet(resourceBlockId, processorId, accelerationFunctionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsGetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAccelerationFunctionsGet(resourceBlockId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdActionsProcessorResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdActionsProcessorResetPost(resourceBlockId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyGet(resourceBlockId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPatch(resourceBlockId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdAssemblyPut(resourceBlockId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, processorId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, processorId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdCertificatesCertificateIdDelete(resourceBlockId, processorId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdCertificatesCertificateIdGet(resourceBlockId, processorId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdCertificatesGet(resourceBlockId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdCertificatesPost(resourceBlockId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdEnvironmentMetricsGet(resourceBlockId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdGet(resourceBlockId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPostTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(resourceBlockId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdMemorySummaryMemoryMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdMemorySummaryMemoryMetricsGet(resourceBlockId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdPatch(resourceBlockId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPostTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPost(resourceBlockId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdProcessorMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdProcessorMetricsGet(resourceBlockId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdPut(resourceBlockId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsGetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsGet(resourceBlockId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost(resourceBlockId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String processorId2 = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet(resourceBlockId, processorId, processorId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch(resourceBlockId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut(resourceBlockId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2GetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String processorId2 = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Get(resourceBlockId, processorId, processorId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2PatchTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Patch(resourceBlockId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPostTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPost(resourceBlockId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String processorId2 = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet(resourceBlockId, processorId, processorId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2PutTest() throws ApiException {
        String resourceBlockId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdProcessorsProcessorIdSubProcessorsProcessorId2Put(resourceBlockId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdPutTest() throws ApiException {
        String resourceBlockId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdPut(resourceBlockId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSimpleStorageSimpleStorageIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String simpleStorageId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSimpleStorageSimpleStorageIdGet(resourceBlockId, simpleStorageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageGetTest() throws ApiException {
        String resourceBlockId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageGet(resourceBlockId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdActionsStorageSetEncryptionKeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdActionsStorageSetEncryptionKeyPost(resourceBlockId, storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String controllerId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, storageId, controllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String controllerId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdEnvironmentMetricsGet(resourceBlockId, storageId, controllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String controllerId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdGet(resourceBlockId, storageId, controllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String controllerId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPatch(resourceBlockId, storageId, controllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String controllerId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersControllerIdPut(resourceBlockId, storageId, controllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersGet(resourceBlockId, storageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdAssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdAssemblyGet(resourceBlockId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdAssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdAssemblyPatch(resourceBlockId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdAssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdAssemblyPut(resourceBlockId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, storageId, storageControllerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, storageId, storageControllerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdDelete(resourceBlockId, storageId, storageControllerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdGet(resourceBlockId, storageId, storageControllerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdCertificatesGet(resourceBlockId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdCertificatesPost(resourceBlockId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsGet(resourceBlockId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsPortIdActionsPortResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsPortIdActionsPortResetPost(resourceBlockId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsPortIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsPortIdEnvironmentMetricsGet(resourceBlockId, storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsPortIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsPortIdGet(resourceBlockId, storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsPortIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsPortIdPatch(resourceBlockId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsPortIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdControllersStorageControllerIdPortsPortIdPut(resourceBlockId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveResetPost(resourceBlockId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost(resourceBlockId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyGet(resourceBlockId, storageId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPatch(resourceBlockId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdAssemblyPut(resourceBlockId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, storageId, driveId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, storageId, driveId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdDelete(resourceBlockId, storageId, driveId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdGet(resourceBlockId, storageId, driveId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdCertificatesGet(resourceBlockId, storageId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdCertificatesPost(resourceBlockId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdEnvironmentMetricsGet(resourceBlockId, storageId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdGet(resourceBlockId, storageId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPatch(resourceBlockId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdDrivesDriveIdPut(resourceBlockId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdGet(resourceBlockId, storageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdPatch(resourceBlockId, storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdPut(resourceBlockId, storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdAssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdAssemblyGet(resourceBlockId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdAssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdAssemblyPatch(resourceBlockId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdAssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdAssemblyPut(resourceBlockId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, storageId, storageControllerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, storageId, storageControllerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdDelete(resourceBlockId, storageId, storageControllerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdGet(resourceBlockId, storageId, storageControllerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdCertificatesGet(resourceBlockId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdCertificatesPost(resourceBlockId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsGet(resourceBlockId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost(resourceBlockId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdEnvironmentMetricsGet(resourceBlockId, storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet(resourceBlockId, storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet(resourceBlockId, storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch(resourceBlockId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut(resourceBlockId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesGet(resourceBlockId, storageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesPost(resourceBlockId, storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPostTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdDelete(resourceBlockId, storageId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdGet(resourceBlockId, storageId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPatch(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdStorageStorageIdVolumesVolumeIdPut(resourceBlockId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemAddResourceBlockPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemAddResourceBlockPost(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemRemoveResourceBlockPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemRemoveResourceBlockPost(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemResetPost(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPost(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosChangePasswordPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosChangePasswordPost(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosResetBiosPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosActionsBiosResetBiosPost(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPatch(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBiosPut(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, computerSystemId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, computerSystemId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdDelete(resourceBlockId, computerSystemId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesCertificateIdGet(resourceBlockId, computerSystemId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootCertificatesPost(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String bootOptionId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdDelete(resourceBlockId, computerSystemId, bootOptionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String bootOptionId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdGet(resourceBlockId, computerSystemId, bootOptionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String bootOptionId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPatch(resourceBlockId, computerSystemId, bootOptionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String bootOptionId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsBootOptionIdPut(resourceBlockId, computerSystemId, bootOptionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdBootOptionsPost(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, computerSystemId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, computerSystemId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdCertificatesCertificateIdDelete(resourceBlockId, computerSystemId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdCertificatesCertificateIdGet(resourceBlockId, computerSystemId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdCertificatesGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdCertificatesPost(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdDelete(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdGet(resourceBlockId, computerSystemId, ethernetInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPatch(resourceBlockId, computerSystemId, ethernetInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPut(resourceBlockId, computerSystemId, ethernetInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsGet(resourceBlockId, computerSystemId, ethernetInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsPost(resourceBlockId, computerSystemId, ethernetInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        String vlanNetworkInterfaceId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete(resourceBlockId, computerSystemId, ethernetInterfaceId, vlanNetworkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        String vlanNetworkInterfaceId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet(resourceBlockId, computerSystemId, ethernetInterfaceId, vlanNetworkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        String vlanNetworkInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch(resourceBlockId, computerSystemId, ethernetInterfaceId, vlanNetworkInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        String vlanNetworkInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut(resourceBlockId, computerSystemId, ethernetInterfaceId, vlanNetworkInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdEthernetInterfacesGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceClearLogPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String logServiceId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceClearLogPost(resourceBlockId, computerSystemId, logServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String logServiceId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost(resourceBlockId, computerSystemId, logServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String logServiceId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesGet(resourceBlockId, computerSystemId, logServiceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String logServiceId = null;
        String logEntryId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdDelete(resourceBlockId, computerSystemId, logServiceId, logEntryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String logServiceId = null;
        String logEntryId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdGet(resourceBlockId, computerSystemId, logServiceId, logEntryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String logServiceId = null;
        String logEntryId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdPatch(resourceBlockId, computerSystemId, logServiceId, logEntryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String logServiceId = null;
        String logEntryId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdPut(resourceBlockId, computerSystemId, logServiceId, logEntryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String logServiceId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdEntriesPost(resourceBlockId, computerSystemId, logServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String logServiceId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdGet(resourceBlockId, computerSystemId, logServiceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String logServiceId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPatch(resourceBlockId, computerSystemId, logServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String logServiceId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdLogServicesLogServiceIdPut(resourceBlockId, computerSystemId, logServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryDomainId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdGet(resourceBlockId, computerSystemId, memoryDomainId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryDomainId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGet(resourceBlockId, computerSystemId, memoryDomainId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryDomainId = null;
        String memoryChunksId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete(resourceBlockId, computerSystemId, memoryDomainId, memoryChunksId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryDomainId = null;
        String memoryChunksId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet(resourceBlockId, computerSystemId, memoryDomainId, memoryChunksId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryDomainId = null;
        String memoryChunksId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatch(resourceBlockId, computerSystemId, memoryDomainId, memoryChunksId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryDomainId = null;
        String memoryChunksId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPut(resourceBlockId, computerSystemId, memoryDomainId, memoryChunksId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryDomainId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPost(resourceBlockId, computerSystemId, memoryDomainId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryDisablePassphrasePostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryDisablePassphrasePost(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryOverwriteUnitPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryOverwriteUnitPost(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryResetPost(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySecureEraseUnitPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySecureEraseUnitPost(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySetPassphrasePostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemorySetPassphrasePost(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryUnlockUnitPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdActionsMemoryUnlockUnitPost(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyGet(resourceBlockId, computerSystemId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPatch(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdAssemblyPut(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, computerSystemId, memoryId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, computerSystemId, memoryId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdCertificatesCertificateIdDelete(resourceBlockId, computerSystemId, memoryId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdCertificatesCertificateIdGet(resourceBlockId, computerSystemId, memoryId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdCertificatesGet(resourceBlockId, computerSystemId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdCertificatesPost(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdEnvironmentMetricsGet(resourceBlockId, computerSystemId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdGet(resourceBlockId, computerSystemId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdMemoryMetricsGet(resourceBlockId, computerSystemId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPatch(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemoryMemoryIdPut(resourceBlockId, computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdMemorySummaryMemoryMetricsGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String networkInterfaceId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdGet(resourceBlockId, computerSystemId, networkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String networkInterfaceId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet(resourceBlockId, computerSystemId, networkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String networkInterfaceId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet(resourceBlockId, computerSystemId, networkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdPortsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String networkInterfaceId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdPortsGet(resourceBlockId, computerSystemId, networkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String pcIeDeviceId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, computerSystemId, pcIeDeviceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String pcIeDeviceId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdEnvironmentMetricsGet(resourceBlockId, computerSystemId, pcIeDeviceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String pcIeDeviceId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdGet(resourceBlockId, computerSystemId, pcIeDeviceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String pcIeDeviceId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet(resourceBlockId, computerSystemId, pcIeDeviceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String pcIeDeviceId = null;
        String pcIeFunctionId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet(resourceBlockId, computerSystemId, pcIeDeviceId, pcIeFunctionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String pcIeDeviceId = null;
        String pcIeFunctionId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdPatch(resourceBlockId, computerSystemId, pcIeDeviceId, pcIeFunctionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String pcIeDeviceId = null;
        String pcIeFunctionId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdPut(resourceBlockId, computerSystemId, pcIeDeviceId, pcIeFunctionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String pcIeDeviceId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPatch(resourceBlockId, computerSystemId, pcIeDeviceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String pcIeDeviceId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPut(resourceBlockId, computerSystemId, pcIeDeviceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPatch(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorSummaryProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorSummaryProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPost(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorSummaryProcessorMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorSummaryProcessorMetricsGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String accelerationFunctionId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet(resourceBlockId, computerSystemId, processorId, accelerationFunctionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsGet(resourceBlockId, computerSystemId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdActionsProcessorResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdActionsProcessorResetPost(resourceBlockId, computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyGet(resourceBlockId, computerSystemId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPatch(resourceBlockId, computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdAssemblyPut(resourceBlockId, computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, computerSystemId, processorId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, computerSystemId, processorId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdCertificatesCertificateIdDelete(resourceBlockId, computerSystemId, processorId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdCertificatesCertificateIdGet(resourceBlockId, computerSystemId, processorId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdCertificatesGet(resourceBlockId, computerSystemId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdCertificatesPost(resourceBlockId, computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdEnvironmentMetricsGet(resourceBlockId, computerSystemId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdGet(resourceBlockId, computerSystemId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(resourceBlockId, computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdMemorySummaryMemoryMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdMemorySummaryMemoryMetricsGet(resourceBlockId, computerSystemId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPatch(resourceBlockId, computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPost(resourceBlockId, computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsGet(resourceBlockId, computerSystemId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdPut(resourceBlockId, computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsGet(resourceBlockId, computerSystemId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost(resourceBlockId, computerSystemId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet(resourceBlockId, computerSystemId, processorId, processorId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch(resourceBlockId, computerSystemId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut(resourceBlockId, computerSystemId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2GetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Get(resourceBlockId, computerSystemId, processorId, processorId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2PatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Patch(resourceBlockId, computerSystemId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPost(resourceBlockId, computerSystemId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet(resourceBlockId, computerSystemId, processorId, processorId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2PutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Put(resourceBlockId, computerSystemId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdPut(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootActionsSecureBootResetKeysPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootActionsSecureBootResetKeysPost(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPatch(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootPut(resourceBlockId, computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdActionsSecureBootDatabaseResetKeysPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String databaseId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdActionsSecureBootDatabaseResetKeysPost(resourceBlockId, computerSystemId, databaseId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String databaseId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, computerSystemId, databaseId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String databaseId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, computerSystemId, databaseId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String databaseId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdDelete(resourceBlockId, computerSystemId, databaseId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String databaseId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdGet(resourceBlockId, computerSystemId, databaseId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String databaseId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesGet(resourceBlockId, computerSystemId, databaseId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String databaseId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesPost(resourceBlockId, computerSystemId, databaseId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String databaseId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdGet(resourceBlockId, computerSystemId, databaseId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String databaseId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesGet(resourceBlockId, computerSystemId, databaseId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String databaseId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesPost(resourceBlockId, computerSystemId, databaseId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String databaseId = null;
        String signatureId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdDelete(resourceBlockId, computerSystemId, databaseId, signatureId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String databaseId = null;
        String signatureId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdGet(resourceBlockId, computerSystemId, databaseId, signatureId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSecureBootSecureBootDatabasesGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageSimpleStorageIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String simpleStorageId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdSimpleStorageSimpleStorageIdGet(resourceBlockId, computerSystemId, simpleStorageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdActionsStorageSetEncryptionKeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdActionsStorageSetEncryptionKeyPost(resourceBlockId, computerSystemId, storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String controllerId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, computerSystemId, storageId, controllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String controllerId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdEnvironmentMetricsGet(resourceBlockId, computerSystemId, storageId, controllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String controllerId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdGet(resourceBlockId, computerSystemId, storageId, controllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String controllerId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPatch(resourceBlockId, computerSystemId, storageId, controllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String controllerId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersControllerIdPut(resourceBlockId, computerSystemId, storageId, controllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersGet(resourceBlockId, computerSystemId, storageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdAssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdAssemblyGet(resourceBlockId, computerSystemId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdAssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdAssemblyPatch(resourceBlockId, computerSystemId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdAssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdAssemblyPut(resourceBlockId, computerSystemId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, computerSystemId, storageId, storageControllerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, computerSystemId, storageId, storageControllerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdDelete(resourceBlockId, computerSystemId, storageId, storageControllerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdGet(resourceBlockId, computerSystemId, storageId, storageControllerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesGet(resourceBlockId, computerSystemId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesPost(resourceBlockId, computerSystemId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsGet(resourceBlockId, computerSystemId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdActionsPortResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdActionsPortResetPost(resourceBlockId, computerSystemId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, computerSystemId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdEnvironmentMetricsGet(resourceBlockId, computerSystemId, storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdGet(resourceBlockId, computerSystemId, storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdPatch(resourceBlockId, computerSystemId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdPut(resourceBlockId, computerSystemId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveResetPost(resourceBlockId, computerSystemId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost(resourceBlockId, computerSystemId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyGet(resourceBlockId, computerSystemId, storageId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPatch(resourceBlockId, computerSystemId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPut(resourceBlockId, computerSystemId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, computerSystemId, storageId, driveId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, computerSystemId, storageId, driveId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdDelete(resourceBlockId, computerSystemId, storageId, driveId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdGet(resourceBlockId, computerSystemId, storageId, driveId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesGet(resourceBlockId, computerSystemId, storageId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesPost(resourceBlockId, computerSystemId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, computerSystemId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdEnvironmentMetricsGet(resourceBlockId, computerSystemId, storageId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdGet(resourceBlockId, computerSystemId, storageId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPatch(resourceBlockId, computerSystemId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdDrivesDriveIdPut(resourceBlockId, computerSystemId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdGet(resourceBlockId, computerSystemId, storageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPatch(resourceBlockId, computerSystemId, storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdPut(resourceBlockId, computerSystemId, storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdAssemblyGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdAssemblyGet(resourceBlockId, computerSystemId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdAssemblyPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdAssemblyPatch(resourceBlockId, computerSystemId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdAssemblyPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdAssemblyPut(resourceBlockId, computerSystemId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, computerSystemId, storageId, storageControllerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, computerSystemId, storageId, storageControllerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdDelete(resourceBlockId, computerSystemId, storageId, storageControllerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdGet(resourceBlockId, computerSystemId, storageId, storageControllerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesGet(resourceBlockId, computerSystemId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesPost(resourceBlockId, computerSystemId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsGet(resourceBlockId, computerSystemId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost(resourceBlockId, computerSystemId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(resourceBlockId, computerSystemId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdEnvironmentMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdEnvironmentMetricsGet(resourceBlockId, computerSystemId, storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet(resourceBlockId, computerSystemId, storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet(resourceBlockId, computerSystemId, storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch(resourceBlockId, computerSystemId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut(resourceBlockId, computerSystemId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesGet(resourceBlockId, computerSystemId, storageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesPost(resourceBlockId, computerSystemId, storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdDelete(resourceBlockId, computerSystemId, storageId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdGet(resourceBlockId, computerSystemId, storageId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPatch(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPut(resourceBlockId, computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaGet(resourceBlockId, computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String virtualMediaId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost(resourceBlockId, computerSystemId, virtualMediaId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String virtualMediaId = null;
        Object body = null;
        RedfishError response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost(resourceBlockId, computerSystemId, virtualMediaId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String virtualMediaId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesCertificateIdActionsCertificateRekeyPost(resourceBlockId, computerSystemId, virtualMediaId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String virtualMediaId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesCertificateIdActionsCertificateRenewPost(resourceBlockId, computerSystemId, virtualMediaId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String virtualMediaId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesCertificateIdDelete(resourceBlockId, computerSystemId, virtualMediaId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesCertificateIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String virtualMediaId = null;
        String certificateId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesCertificateIdGet(resourceBlockId, computerSystemId, virtualMediaId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String virtualMediaId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesGet(resourceBlockId, computerSystemId, virtualMediaId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesPostTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String virtualMediaId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesPost(resourceBlockId, computerSystemId, virtualMediaId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdGetTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String virtualMediaId = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdGet(resourceBlockId, computerSystemId, virtualMediaId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPatchTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String virtualMediaId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPatch(resourceBlockId, computerSystemId, virtualMediaId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPutTest() throws ApiException {
        String resourceBlockId = null;
        String computerSystemId = null;
        String virtualMediaId = null;
        Object body = null;
        Object response = api.redfishV1ResourceBlocksResourceBlockIdSystemsComputerSystemIdVirtualMediaVirtualMediaIdPut(resourceBlockId, computerSystemId, virtualMediaId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SessionServiceGetTest() throws ApiException {
        Object response = api.redfishV1SessionServiceGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SessionServicePatchTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1SessionServicePatch(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SessionServicePutTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1SessionServicePut(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SessionServiceSessionsGetTest() throws ApiException {
        Object response = api.redfishV1SessionServiceSessionsGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SessionServiceSessionsPostTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1SessionServiceSessionsPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SessionServiceSessionsSessionIdDeleteTest() throws ApiException {
        String sessionId = null;
        Object response = api.redfishV1SessionServiceSessionsSessionIdDelete(sessionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SessionServiceSessionsSessionIdGetTest() throws ApiException {
        String sessionId = null;
        Object response = api.redfishV1SessionServiceSessionsSessionIdGet(sessionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageGetTest() throws ApiException {
        Object response = api.redfishV1StorageGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesGetTest() throws ApiException {
        String storageServiceId = null;
        String consistencyGroupId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesGet(storageServiceId, consistencyGroupId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesPostTest() throws ApiException {
        String storageServiceId = null;
        String consistencyGroupId = null;
        Object body = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesPost(storageServiceId, consistencyGroupId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPostTest() throws ApiException {
        String storageServiceId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(storageServiceId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPostTest() throws ApiException {
        String storageServiceId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(storageServiceId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCheckConsistencyPostTest() throws ApiException {
        String storageServiceId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(storageServiceId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPostTest() throws ApiException {
        String storageServiceId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(storageServiceId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeForceEnablePostTest() throws ApiException {
        String storageServiceId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeForceEnablePost(storageServiceId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeInitializePostTest() throws ApiException {
        String storageServiceId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeInitializePost(storageServiceId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPostTest() throws ApiException {
        String storageServiceId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(storageServiceId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeResumeReplicationPostTest() throws ApiException {
        String storageServiceId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeResumeReplicationPost(storageServiceId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPostTest() throws ApiException {
        String storageServiceId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(storageServiceId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSplitReplicationPostTest() throws ApiException {
        String storageServiceId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSplitReplicationPost(storageServiceId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSuspendReplicationPostTest() throws ApiException {
        String storageServiceId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(storageServiceId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdDeleteTest() throws ApiException {
        String storageServiceId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdDelete(storageServiceId, consistencyGroupId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdGetTest() throws ApiException {
        String storageServiceId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdGet(storageServiceId, consistencyGroupId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPatchTest() throws ApiException {
        String storageServiceId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPatch(storageServiceId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPutTest() throws ApiException {
        String storageServiceId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPut(storageServiceId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdDrivesGetTest() throws ApiException {
        String storageServiceId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdDrivesGet(storageServiceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdDeleteTest() throws ApiException {
        String storageServiceId = null;
        String endpointGroupId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdDelete(storageServiceId, endpointGroupId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdGetTest() throws ApiException {
        String storageServiceId = null;
        String endpointGroupId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdGet(storageServiceId, endpointGroupId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdPatchTest() throws ApiException {
        String storageServiceId = null;
        String endpointGroupId = null;
        Object body = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdPatch(storageServiceId, endpointGroupId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdPutTest() throws ApiException {
        String storageServiceId = null;
        String endpointGroupId = null;
        Object body = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdEndpointGroupsEndpointGroupIdPut(storageServiceId, endpointGroupId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdEndpointGroupsGetTest() throws ApiException {
        String storageServiceId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdEndpointGroupsGet(storageServiceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdEndpointGroupsPostTest() throws ApiException {
        String storageServiceId = null;
        Object body = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdEndpointGroupsPost(storageServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdEndpointsEndpointIdDeleteTest() throws ApiException {
        String storageServiceId = null;
        String endpointId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdEndpointsEndpointIdDelete(storageServiceId, endpointId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdEndpointsEndpointIdGetTest() throws ApiException {
        String storageServiceId = null;
        String endpointId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdEndpointsEndpointIdGet(storageServiceId, endpointId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdEndpointsEndpointIdPatchTest() throws ApiException {
        String storageServiceId = null;
        String endpointId = null;
        Object body = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdEndpointsEndpointIdPatch(storageServiceId, endpointId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdEndpointsEndpointIdPutTest() throws ApiException {
        String storageServiceId = null;
        String endpointId = null;
        Object body = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdEndpointsEndpointIdPut(storageServiceId, endpointId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdEndpointsGetTest() throws ApiException {
        String storageServiceId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdEndpointsGet(storageServiceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdEndpointsPostTest() throws ApiException {
        String storageServiceId = null;
        Object body = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdEndpointsPost(storageServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingDrivesGetTest() throws ApiException {
        String storageServiceId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(storageServiceId, fileSystemId, capacitySourceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesGetTest() throws ApiException {
        String storageServiceId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesGet(storageServiceId, fileSystemId, capacitySourceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesPostTest() throws ApiException {
        String storageServiceId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        Object body = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesPost(storageServiceId, fileSystemId, capacitySourceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPostTest() throws ApiException {
        String storageServiceId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(storageServiceId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPostTest() throws ApiException {
        String storageServiceId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(storageServiceId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPostTest() throws ApiException {
        String storageServiceId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost(storageServiceId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPostTest() throws ApiException {
        String storageServiceId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(storageServiceId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePostTest() throws ApiException {
        String storageServiceId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost(storageServiceId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePostTest() throws ApiException {
        String storageServiceId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost(storageServiceId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPostTest() throws ApiException {
        String storageServiceId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(storageServiceId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPostTest() throws ApiException {
        String storageServiceId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost(storageServiceId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPostTest() throws ApiException {
        String storageServiceId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(storageServiceId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPostTest() throws ApiException {
        String storageServiceId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost(storageServiceId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPostTest() throws ApiException {
        String storageServiceId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost(storageServiceId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDeleteTest() throws ApiException {
        String storageServiceId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete(storageServiceId, fileSystemId, capacitySourceId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGetTest() throws ApiException {
        String storageServiceId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet(storageServiceId, fileSystemId, capacitySourceId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatchTest() throws ApiException {
        String storageServiceId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch(storageServiceId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPutTest() throws ApiException {
        String storageServiceId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut(storageServiceId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesGetTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesGet(storageServiceId, storagePoolId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesPostTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        Object body = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesPost(storageServiceId, storagePoolId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeAssignReplicaTargetPostTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(storageServiceId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeChangeRAIDLayoutPostTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(storageServiceId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCheckConsistencyPostTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCheckConsistencyPost(storageServiceId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCreateReplicaTargetPostTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(storageServiceId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeForceEnablePostTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeForceEnablePost(storageServiceId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeInitializePostTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeInitializePost(storageServiceId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPostTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(storageServiceId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeResumeReplicationPostTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeResumeReplicationPost(storageServiceId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPostTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(storageServiceId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSplitReplicationPostTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSplitReplicationPost(storageServiceId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSuspendReplicationPostTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSuspendReplicationPost(storageServiceId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdDeleteTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdDelete(storageServiceId, storagePoolId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdGetTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdGet(storageServiceId, storagePoolId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPatchTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPatch(storageServiceId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPutTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPut(storageServiceId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingDrivesGetTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(storageServiceId, storagePoolId, capacitySourceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesGetTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesGet(storageServiceId, storagePoolId, capacitySourceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesPostTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        Object body = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesPost(storageServiceId, storagePoolId, capacitySourceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPostTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(storageServiceId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPostTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(storageServiceId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPostTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost(storageServiceId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPostTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(storageServiceId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePostTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost(storageServiceId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePostTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost(storageServiceId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPostTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(storageServiceId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPostTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost(storageServiceId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPostTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(storageServiceId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPostTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost(storageServiceId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPostTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost(storageServiceId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDeleteTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete(storageServiceId, storagePoolId, capacitySourceId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGetTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet(storageServiceId, storagePoolId, capacitySourceId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatchTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch(storageServiceId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPutTest() throws ApiException {
        String storageServiceId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut(storageServiceId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesGetTest() throws ApiException {
        String storageServiceId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdVolumesGet(storageServiceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesPostTest() throws ApiException {
        String storageServiceId = null;
        Object body = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdVolumesPost(storageServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPostTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(storageServiceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPostTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(storageServiceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeCheckConsistencyPostTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(storageServiceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPostTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(storageServiceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeForceEnablePostTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeForceEnablePost(storageServiceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeInitializePostTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeInitializePost(storageServiceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPostTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(storageServiceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeResumeReplicationPostTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeResumeReplicationPost(storageServiceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPostTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(storageServiceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeSplitReplicationPostTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeSplitReplicationPost(storageServiceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeSuspendReplicationPostTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(storageServiceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingDrivesGetTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        String capacitySourceId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(storageServiceId, volumeId, capacitySourceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesGetTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        String capacitySourceId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesGet(storageServiceId, volumeId, capacitySourceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesPostTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        String capacitySourceId = null;
        Object body = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesPost(storageServiceId, volumeId, capacitySourceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeAssignReplicaTargetPostTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        String capacitySourceId = null;
        String providingVolumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeAssignReplicaTargetPost(storageServiceId, volumeId, capacitySourceId, providingVolumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeChangeRAIDLayoutPostTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        String capacitySourceId = null;
        String providingVolumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeChangeRAIDLayoutPost(storageServiceId, volumeId, capacitySourceId, providingVolumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeCheckConsistencyPostTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        String capacitySourceId = null;
        String providingVolumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeCheckConsistencyPost(storageServiceId, volumeId, capacitySourceId, providingVolumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeCreateReplicaTargetPostTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        String capacitySourceId = null;
        String providingVolumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeCreateReplicaTargetPost(storageServiceId, volumeId, capacitySourceId, providingVolumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeForceEnablePostTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        String capacitySourceId = null;
        String providingVolumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeForceEnablePost(storageServiceId, volumeId, capacitySourceId, providingVolumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeInitializePostTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        String capacitySourceId = null;
        String providingVolumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeInitializePost(storageServiceId, volumeId, capacitySourceId, providingVolumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeRemoveReplicaRelationshipPostTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        String capacitySourceId = null;
        String providingVolumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeRemoveReplicaRelationshipPost(storageServiceId, volumeId, capacitySourceId, providingVolumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeResumeReplicationPostTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        String capacitySourceId = null;
        String providingVolumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeResumeReplicationPost(storageServiceId, volumeId, capacitySourceId, providingVolumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeReverseReplicationRelationshipPostTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        String capacitySourceId = null;
        String providingVolumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeReverseReplicationRelationshipPost(storageServiceId, volumeId, capacitySourceId, providingVolumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeSplitReplicationPostTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        String capacitySourceId = null;
        String providingVolumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeSplitReplicationPost(storageServiceId, volumeId, capacitySourceId, providingVolumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeSuspendReplicationPostTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        String capacitySourceId = null;
        String providingVolumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdActionsVolumeSuspendReplicationPost(storageServiceId, volumeId, capacitySourceId, providingVolumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdDeleteTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        String capacitySourceId = null;
        String providingVolumeId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdDelete(storageServiceId, volumeId, capacitySourceId, providingVolumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdGetTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        String capacitySourceId = null;
        String providingVolumeId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdGet(storageServiceId, volumeId, capacitySourceId, providingVolumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdPatchTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        String capacitySourceId = null;
        String providingVolumeId = null;
        Object body = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdPatch(storageServiceId, volumeId, capacitySourceId, providingVolumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdPutTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        String capacitySourceId = null;
        String providingVolumeId = null;
        Object body = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingVolumesProvidingVolumeIdPut(storageServiceId, volumeId, capacitySourceId, providingVolumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdDeleteTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdDelete(storageServiceId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdGetTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdGet(storageServiceId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdPatchTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdPatch(storageServiceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageServicesStorageServiceIdVolumesVolumeIdPutTest() throws ApiException {
        String storageServiceId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1StorageServicesStorageServiceIdVolumesVolumeIdPut(storageServiceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdActionsStorageSetEncryptionKeyPostTest() throws ApiException {
        String storageId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdActionsStorageSetEncryptionKeyPost(storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesGetTest() throws ApiException {
        String storageId = null;
        String consistencyGroupId = null;
        Object response = api.redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesGet(storageId, consistencyGroupId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesPostTest() throws ApiException {
        String storageId = null;
        String consistencyGroupId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesPost(storageId, consistencyGroupId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPostTest() throws ApiException {
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPostTest() throws ApiException {
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCheckConsistencyPostTest() throws ApiException {
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPostTest() throws ApiException {
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeForceEnablePostTest() throws ApiException {
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeForceEnablePost(storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeInitializePostTest() throws ApiException {
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeInitializePost(storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPostTest() throws ApiException {
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeResumeReplicationPostTest() throws ApiException {
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeResumeReplicationPost(storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPostTest() throws ApiException {
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSplitReplicationPostTest() throws ApiException {
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSplitReplicationPost(storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSuspendReplicationPostTest() throws ApiException {
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdDeleteTest() throws ApiException {
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object response = api.redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdDelete(storageId, consistencyGroupId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdGetTest() throws ApiException {
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object response = api.redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdGet(storageId, consistencyGroupId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPatchTest() throws ApiException {
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPatch(storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPutTest() throws ApiException {
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPut(storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdControllersControllerIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String storageId = null;
        String controllerId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdControllersControllerIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(storageId, controllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdControllersControllerIdEnvironmentMetricsGetTest() throws ApiException {
        String storageId = null;
        String controllerId = null;
        Object response = api.redfishV1StorageStorageIdControllersControllerIdEnvironmentMetricsGet(storageId, controllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdControllersControllerIdGetTest() throws ApiException {
        String storageId = null;
        String controllerId = null;
        Object response = api.redfishV1StorageStorageIdControllersControllerIdGet(storageId, controllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdControllersControllerIdPatchTest() throws ApiException {
        String storageId = null;
        String controllerId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdControllersControllerIdPatch(storageId, controllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdControllersControllerIdPutTest() throws ApiException {
        String storageId = null;
        String controllerId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdControllersControllerIdPut(storageId, controllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdControllersGetTest() throws ApiException {
        String storageId = null;
        Object response = api.redfishV1StorageStorageIdControllersGet(storageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdControllersStorageControllerIdAssemblyGetTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1StorageStorageIdControllersStorageControllerIdAssemblyGet(storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdControllersStorageControllerIdAssemblyPatchTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdControllersStorageControllerIdAssemblyPatch(storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdControllersStorageControllerIdAssemblyPutTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdControllersStorageControllerIdAssemblyPut(storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRekeyPost(storageId, storageControllerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRenewPost(storageId, storageControllerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdControllersStorageControllerIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object response = api.redfishV1StorageStorageIdControllersStorageControllerIdCertificatesCertificateIdDelete(storageId, storageControllerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdControllersStorageControllerIdCertificatesCertificateIdGetTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object response = api.redfishV1StorageStorageIdControllersStorageControllerIdCertificatesCertificateIdGet(storageId, storageControllerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdControllersStorageControllerIdCertificatesGetTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1StorageStorageIdControllersStorageControllerIdCertificatesGet(storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdControllersStorageControllerIdCertificatesPostTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdControllersStorageControllerIdCertificatesPost(storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdControllersStorageControllerIdPortsGetTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1StorageStorageIdControllersStorageControllerIdPortsGet(storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdControllersStorageControllerIdPortsPortIdActionsPortResetPostTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdControllersStorageControllerIdPortsPortIdActionsPortResetPost(storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdControllersStorageControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdControllersStorageControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdControllersStorageControllerIdPortsPortIdEnvironmentMetricsGetTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1StorageStorageIdControllersStorageControllerIdPortsPortIdEnvironmentMetricsGet(storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdControllersStorageControllerIdPortsPortIdGetTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1StorageStorageIdControllersStorageControllerIdPortsPortIdGet(storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdControllersStorageControllerIdPortsPortIdPatchTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdControllersStorageControllerIdPortsPortIdPatch(storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdControllersStorageControllerIdPortsPortIdPutTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdControllersStorageControllerIdPortsPortIdPut(storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdEndpointGroupsEndpointGroupIdDeleteTest() throws ApiException {
        String storageId = null;
        String endpointGroupId = null;
        Object response = api.redfishV1StorageStorageIdEndpointGroupsEndpointGroupIdDelete(storageId, endpointGroupId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdEndpointGroupsEndpointGroupIdGetTest() throws ApiException {
        String storageId = null;
        String endpointGroupId = null;
        Object response = api.redfishV1StorageStorageIdEndpointGroupsEndpointGroupIdGet(storageId, endpointGroupId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdEndpointGroupsEndpointGroupIdPatchTest() throws ApiException {
        String storageId = null;
        String endpointGroupId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdEndpointGroupsEndpointGroupIdPatch(storageId, endpointGroupId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdEndpointGroupsEndpointGroupIdPutTest() throws ApiException {
        String storageId = null;
        String endpointGroupId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdEndpointGroupsEndpointGroupIdPut(storageId, endpointGroupId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdEndpointGroupsGetTest() throws ApiException {
        String storageId = null;
        Object response = api.redfishV1StorageStorageIdEndpointGroupsGet(storageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdEndpointGroupsPostTest() throws ApiException {
        String storageId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdEndpointGroupsPost(storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdEndpointsEndpointIdDeleteTest() throws ApiException {
        String storageId = null;
        String endpointId = null;
        Object response = api.redfishV1StorageStorageIdEndpointsEndpointIdDelete(storageId, endpointId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdEndpointsEndpointIdGetTest() throws ApiException {
        String storageId = null;
        String endpointId = null;
        Object response = api.redfishV1StorageStorageIdEndpointsEndpointIdGet(storageId, endpointId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdEndpointsEndpointIdPatchTest() throws ApiException {
        String storageId = null;
        String endpointId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdEndpointsEndpointIdPatch(storageId, endpointId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdEndpointsEndpointIdPutTest() throws ApiException {
        String storageId = null;
        String endpointId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdEndpointsEndpointIdPut(storageId, endpointId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdEndpointsGetTest() throws ApiException {
        String storageId = null;
        Object response = api.redfishV1StorageStorageIdEndpointsGet(storageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdEndpointsPostTest() throws ApiException {
        String storageId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdEndpointsPost(storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingDrivesGetTest() throws ApiException {
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        Object response = api.redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(storageId, fileSystemId, capacitySourceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesGetTest() throws ApiException {
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        Object response = api.redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesGet(storageId, fileSystemId, capacitySourceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesPostTest() throws ApiException {
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesPost(storageId, fileSystemId, capacitySourceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPostTest() throws ApiException {
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPostTest() throws ApiException {
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPostTest() throws ApiException {
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost(storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPostTest() throws ApiException {
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePostTest() throws ApiException {
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost(storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePostTest() throws ApiException {
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost(storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPostTest() throws ApiException {
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPostTest() throws ApiException {
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost(storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPostTest() throws ApiException {
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPostTest() throws ApiException {
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost(storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPostTest() throws ApiException {
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost(storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDeleteTest() throws ApiException {
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object response = api.redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete(storageId, fileSystemId, capacitySourceId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGetTest() throws ApiException {
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object response = api.redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet(storageId, fileSystemId, capacitySourceId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatchTest() throws ApiException {
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch(storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPutTest() throws ApiException {
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut(storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdGetTest() throws ApiException {
        String storageId = null;
        Object response = api.redfishV1StorageStorageIdGet(storageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdPatchTest() throws ApiException {
        String storageId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdPatch(storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdPutTest() throws ApiException {
        String storageId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdPut(storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStorageControllersStorageControllerIdAssemblyGetTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1StorageStorageIdStorageControllersStorageControllerIdAssemblyGet(storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStorageControllersStorageControllerIdAssemblyPatchTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdStorageControllersStorageControllerIdAssemblyPatch(storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStorageControllersStorageControllerIdAssemblyPutTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdStorageControllersStorageControllerIdAssemblyPut(storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRekeyPost(storageId, storageControllerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRenewPost(storageId, storageControllerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object response = api.redfishV1StorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdDelete(storageId, storageControllerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdGetTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object response = api.redfishV1StorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdGet(storageId, storageControllerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStorageControllersStorageControllerIdCertificatesGetTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1StorageStorageIdStorageControllersStorageControllerIdCertificatesGet(storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStorageControllersStorageControllerIdCertificatesPostTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdStorageControllersStorageControllerIdCertificatesPost(storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStorageControllersStorageControllerIdPortsGetTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1StorageStorageIdStorageControllersStorageControllerIdPortsGet(storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPostTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost(storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStorageControllersStorageControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdStorageControllersStorageControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStorageControllersStorageControllerIdPortsPortIdEnvironmentMetricsGetTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1StorageStorageIdStorageControllersStorageControllerIdPortsPortIdEnvironmentMetricsGet(storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStorageControllersStorageControllerIdPortsPortIdGetTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1StorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet(storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatchTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch(storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStorageControllersStorageControllerIdPortsPortIdPutTest() throws ApiException {
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut(storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesGetTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        Object response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesGet(storageId, storagePoolId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesPostTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesPost(storageId, storagePoolId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeAssignReplicaTargetPostTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeChangeRAIDLayoutPostTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCheckConsistencyPostTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCheckConsistencyPost(storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCreateReplicaTargetPostTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeForceEnablePostTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeForceEnablePost(storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeInitializePostTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeInitializePost(storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPostTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeResumeReplicationPostTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeResumeReplicationPost(storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPostTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSplitReplicationPostTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSplitReplicationPost(storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSuspendReplicationPostTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSuspendReplicationPost(storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdDeleteTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdDelete(storageId, storagePoolId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdGetTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdGet(storageId, storagePoolId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPatchTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPatch(storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPutTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPut(storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingDrivesGetTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        Object response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(storageId, storagePoolId, capacitySourceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesGetTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        Object response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesGet(storageId, storagePoolId, capacitySourceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesPostTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesPost(storageId, storagePoolId, capacitySourceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPostTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPostTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPostTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost(storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPostTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePostTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost(storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePostTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost(storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPostTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPostTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost(storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPostTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPostTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost(storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPostTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost(storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDeleteTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete(storageId, storagePoolId, capacitySourceId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGetTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet(storageId, storagePoolId, capacitySourceId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatchTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch(storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPutTest() throws ApiException {
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut(storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdVolumesGetTest() throws ApiException {
        String storageId = null;
        Object response = api.redfishV1StorageStorageIdVolumesGet(storageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdVolumesPostTest() throws ApiException {
        String storageId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdVolumesPost(storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPostTest() throws ApiException {
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPostTest() throws ApiException {
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPostTest() throws ApiException {
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPostTest() throws ApiException {
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePostTest() throws ApiException {
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost(storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdVolumesVolumeIdActionsVolumeInitializePostTest() throws ApiException {
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdVolumesVolumeIdActionsVolumeInitializePost(storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPostTest() throws ApiException {
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPostTest() throws ApiException {
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost(storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPostTest() throws ApiException {
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPostTest() throws ApiException {
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost(storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPostTest() throws ApiException {
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1StorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingDrivesGetTest() throws ApiException {
        String storageId = null;
        String volumeId = null;
        String capacitySourceId = null;
        Object response = api.redfishV1StorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(storageId, volumeId, capacitySourceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdVolumesVolumeIdDeleteTest() throws ApiException {
        String storageId = null;
        String volumeId = null;
        Object response = api.redfishV1StorageStorageIdVolumesVolumeIdDelete(storageId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdVolumesVolumeIdGetTest() throws ApiException {
        String storageId = null;
        String volumeId = null;
        Object response = api.redfishV1StorageStorageIdVolumesVolumeIdGet(storageId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdVolumesVolumeIdPatchTest() throws ApiException {
        String storageId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdVolumesVolumeIdPatch(storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1StorageStorageIdVolumesVolumeIdPutTest() throws ApiException {
        String storageId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1StorageStorageIdVolumesVolumeIdPut(storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdActionsComputerSystemAddResourceBlockPostTest() throws ApiException {
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdActionsComputerSystemAddResourceBlockPost(computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdActionsComputerSystemRemoveResourceBlockPostTest() throws ApiException {
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdActionsComputerSystemRemoveResourceBlockPost(computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdActionsComputerSystemResetPostTest() throws ApiException {
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdActionsComputerSystemResetPost(computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPostTest() throws ApiException {
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPost(computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdBiosActionsBiosChangePasswordPostTest() throws ApiException {
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdBiosActionsBiosChangePasswordPost(computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdBiosActionsBiosResetBiosPostTest() throws ApiException {
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdBiosActionsBiosResetBiosPost(computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdBiosGetTest() throws ApiException {
        String computerSystemId = null;
        Object response = api.redfishV1SystemsComputerSystemIdBiosGet(computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdBiosPatchTest() throws ApiException {
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdBiosPatch(computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdBiosPutTest() throws ApiException {
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdBiosPut(computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String computerSystemId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRekeyPost(computerSystemId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String computerSystemId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdBootCertificatesCertificateIdActionsCertificateRenewPost(computerSystemId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdBootCertificatesCertificateIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String certificateId = null;
        Object response = api.redfishV1SystemsComputerSystemIdBootCertificatesCertificateIdDelete(computerSystemId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdBootCertificatesCertificateIdGetTest() throws ApiException {
        String computerSystemId = null;
        String certificateId = null;
        Object response = api.redfishV1SystemsComputerSystemIdBootCertificatesCertificateIdGet(computerSystemId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdBootCertificatesGetTest() throws ApiException {
        String computerSystemId = null;
        Object response = api.redfishV1SystemsComputerSystemIdBootCertificatesGet(computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdBootCertificatesPostTest() throws ApiException {
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdBootCertificatesPost(computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdBootOptionsBootOptionIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String bootOptionId = null;
        Object response = api.redfishV1SystemsComputerSystemIdBootOptionsBootOptionIdDelete(computerSystemId, bootOptionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdBootOptionsBootOptionIdGetTest() throws ApiException {
        String computerSystemId = null;
        String bootOptionId = null;
        Object response = api.redfishV1SystemsComputerSystemIdBootOptionsBootOptionIdGet(computerSystemId, bootOptionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdBootOptionsBootOptionIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String bootOptionId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdBootOptionsBootOptionIdPatch(computerSystemId, bootOptionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdBootOptionsBootOptionIdPutTest() throws ApiException {
        String computerSystemId = null;
        String bootOptionId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdBootOptionsBootOptionIdPut(computerSystemId, bootOptionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdBootOptionsGetTest() throws ApiException {
        String computerSystemId = null;
        Object response = api.redfishV1SystemsComputerSystemIdBootOptionsGet(computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdBootOptionsPostTest() throws ApiException {
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdBootOptionsPost(computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String computerSystemId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdCertificatesCertificateIdActionsCertificateRekeyPost(computerSystemId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String computerSystemId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdCertificatesCertificateIdActionsCertificateRenewPost(computerSystemId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String certificateId = null;
        Object response = api.redfishV1SystemsComputerSystemIdCertificatesCertificateIdDelete(computerSystemId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdCertificatesCertificateIdGetTest() throws ApiException {
        String computerSystemId = null;
        String certificateId = null;
        Object response = api.redfishV1SystemsComputerSystemIdCertificatesCertificateIdGet(computerSystemId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdCertificatesGetTest() throws ApiException {
        String computerSystemId = null;
        Object response = api.redfishV1SystemsComputerSystemIdCertificatesGet(computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdCertificatesPostTest() throws ApiException {
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdCertificatesPost(computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        Object response = api.redfishV1SystemsComputerSystemIdDelete(computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdGetTest() throws ApiException {
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        Object response = api.redfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdGet(computerSystemId, ethernetInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPatch(computerSystemId, ethernetInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPutTest() throws ApiException {
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdPut(computerSystemId, ethernetInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsGetTest() throws ApiException {
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        Object response = api.redfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsGet(computerSystemId, ethernetInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsPostTest() throws ApiException {
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsPost(computerSystemId, ethernetInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        String vlanNetworkInterfaceId = null;
        Object response = api.redfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdDelete(computerSystemId, ethernetInterfaceId, vlanNetworkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGetTest() throws ApiException {
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        String vlanNetworkInterfaceId = null;
        Object response = api.redfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdGet(computerSystemId, ethernetInterfaceId, vlanNetworkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        String vlanNetworkInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPatch(computerSystemId, ethernetInterfaceId, vlanNetworkInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPutTest() throws ApiException {
        String computerSystemId = null;
        String ethernetInterfaceId = null;
        String vlanNetworkInterfaceId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdEthernetInterfacesEthernetInterfaceIdVLANsVLanNetworkInterfaceIdPut(computerSystemId, ethernetInterfaceId, vlanNetworkInterfaceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdEthernetInterfacesGetTest() throws ApiException {
        String computerSystemId = null;
        Object response = api.redfishV1SystemsComputerSystemIdEthernetInterfacesGet(computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTGetTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTGet(computerSystemId, fabricAdapterId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String msDTId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdDelete(computerSystemId, fabricAdapterId, msDTId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdGetTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String msDTId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdGet(computerSystemId, fabricAdapterId, msDTId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String msDTId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdPatch(computerSystemId, fabricAdapterId, msDTId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdPutTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String msDTId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdPut(computerSystemId, fabricAdapterId, msDTId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetGetTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String msDTId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetGet(computerSystemId, fabricAdapterId, msDTId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetPostTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String msDTId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetPost(computerSystemId, fabricAdapterId, msDTId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String msDTId = null;
        String routeId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdDelete(computerSystemId, fabricAdapterId, msDTId, routeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdGetTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String msDTId = null;
        String routeId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdGet(computerSystemId, fabricAdapterId, msDTId, routeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String msDTId = null;
        String routeId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdPatch(computerSystemId, fabricAdapterId, msDTId, routeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdPutTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String msDTId = null;
        String routeId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTMSDTIdRouteSetRouteIdPut(computerSystemId, fabricAdapterId, msDTId, routeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTPostTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdMSDTPost(computerSystemId, fabricAdapterId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsGetTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsGet(computerSystemId, fabricAdapterId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdActionsPortResetPostTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdActionsPortResetPost(computerSystemId, fabricAdapterId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(computerSystemId, fabricAdapterId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdEnvironmentMetricsGetTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdEnvironmentMetricsGet(computerSystemId, fabricAdapterId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdGetTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdGet(computerSystemId, fabricAdapterId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTGetTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTGet(computerSystemId, fabricAdapterId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        String lpRTId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdDelete(computerSystemId, fabricAdapterId, portId, lpRTId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdGetTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        String lpRTId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdGet(computerSystemId, fabricAdapterId, portId, lpRTId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        String lpRTId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdPatch(computerSystemId, fabricAdapterId, portId, lpRTId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdPutTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        String lpRTId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdPut(computerSystemId, fabricAdapterId, portId, lpRTId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetGetTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        String lpRTId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetGet(computerSystemId, fabricAdapterId, portId, lpRTId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetPostTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        String lpRTId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetPost(computerSystemId, fabricAdapterId, portId, lpRTId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        String lpRTId = null;
        String routeId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdDelete(computerSystemId, fabricAdapterId, portId, lpRTId, routeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdGetTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        String lpRTId = null;
        String routeId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdGet(computerSystemId, fabricAdapterId, portId, lpRTId, routeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        String lpRTId = null;
        String routeId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPatch(computerSystemId, fabricAdapterId, portId, lpRTId, routeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPutTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        String lpRTId = null;
        String routeId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTLPRTIdRouteSetRouteIdPut(computerSystemId, fabricAdapterId, portId, lpRTId, routeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTPostTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdLPRTPost(computerSystemId, fabricAdapterId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTGetTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTGet(computerSystemId, fabricAdapterId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        String mpRTId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdDelete(computerSystemId, fabricAdapterId, portId, mpRTId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdGetTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        String mpRTId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdGet(computerSystemId, fabricAdapterId, portId, mpRTId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        String mpRTId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdPatch(computerSystemId, fabricAdapterId, portId, mpRTId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdPutTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        String mpRTId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdPut(computerSystemId, fabricAdapterId, portId, mpRTId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetGetTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        String mpRTId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetGet(computerSystemId, fabricAdapterId, portId, mpRTId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetPostTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        String mpRTId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetPost(computerSystemId, fabricAdapterId, portId, mpRTId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        String mpRTId = null;
        String routeId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdDelete(computerSystemId, fabricAdapterId, portId, mpRTId, routeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdGetTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        String mpRTId = null;
        String routeId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdGet(computerSystemId, fabricAdapterId, portId, mpRTId, routeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        String mpRTId = null;
        String routeId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPatch(computerSystemId, fabricAdapterId, portId, mpRTId, routeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPutTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        String mpRTId = null;
        String routeId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTMPRTIdRouteSetRouteIdPut(computerSystemId, fabricAdapterId, portId, mpRTId, routeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTPostTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMPRTPost(computerSystemId, fabricAdapterId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMetricsGetTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdMetricsGet(computerSystemId, fabricAdapterId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdPatch(computerSystemId, fabricAdapterId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdPutTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdPortsPortIdPut(computerSystemId, fabricAdapterId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTGetTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTGet(computerSystemId, fabricAdapterId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTPostTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTPost(computerSystemId, fabricAdapterId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String ssDTId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdDelete(computerSystemId, fabricAdapterId, ssDTId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdGetTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String ssDTId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdGet(computerSystemId, fabricAdapterId, ssDTId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String ssDTId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdPatch(computerSystemId, fabricAdapterId, ssDTId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdPutTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String ssDTId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdPut(computerSystemId, fabricAdapterId, ssDTId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetGetTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String ssDTId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetGet(computerSystemId, fabricAdapterId, ssDTId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetPostTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String ssDTId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetPost(computerSystemId, fabricAdapterId, ssDTId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String ssDTId = null;
        String routeId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdDelete(computerSystemId, fabricAdapterId, ssDTId, routeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdGetTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String ssDTId = null;
        String routeId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdGet(computerSystemId, fabricAdapterId, ssDTId, routeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String ssDTId = null;
        String routeId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdPatch(computerSystemId, fabricAdapterId, ssDTId, routeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdPutTest() throws ApiException {
        String computerSystemId = null;
        String fabricAdapterId = null;
        String ssDTId = null;
        String routeId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersFabricAdapterIdSSDTSSDTIdRouteSetRouteIdPut(computerSystemId, fabricAdapterId, ssDTId, routeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdFabricAdaptersGetTest() throws ApiException {
        String computerSystemId = null;
        Object response = api.redfishV1SystemsComputerSystemIdFabricAdaptersGet(computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdGetTest() throws ApiException {
        String computerSystemId = null;
        Object response = api.redfishV1SystemsComputerSystemIdGet(computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdGraphicsControllersControllerIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String controllerId = null;
        Object response = api.redfishV1SystemsComputerSystemIdGraphicsControllersControllerIdDelete(computerSystemId, controllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdGraphicsControllersControllerIdGetTest() throws ApiException {
        String computerSystemId = null;
        String controllerId = null;
        Object response = api.redfishV1SystemsComputerSystemIdGraphicsControllersControllerIdGet(computerSystemId, controllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdGraphicsControllersControllerIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String controllerId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdGraphicsControllersControllerIdPatch(computerSystemId, controllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdGraphicsControllersControllerIdPortsGetTest() throws ApiException {
        String computerSystemId = null;
        String controllerId = null;
        Object response = api.redfishV1SystemsComputerSystemIdGraphicsControllersControllerIdPortsGet(computerSystemId, controllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdGraphicsControllersControllerIdPortsPortIdActionsPortResetPostTest() throws ApiException {
        String computerSystemId = null;
        String controllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdGraphicsControllersControllerIdPortsPortIdActionsPortResetPost(computerSystemId, controllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdGraphicsControllersControllerIdPortsPortIdGetTest() throws ApiException {
        String computerSystemId = null;
        String controllerId = null;
        String portId = null;
        Object response = api.redfishV1SystemsComputerSystemIdGraphicsControllersControllerIdPortsPortIdGet(computerSystemId, controllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdGraphicsControllersControllerIdPortsPortIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String controllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdGraphicsControllersControllerIdPortsPortIdPatch(computerSystemId, controllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdGraphicsControllersControllerIdPortsPortIdPutTest() throws ApiException {
        String computerSystemId = null;
        String controllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdGraphicsControllersControllerIdPortsPortIdPut(computerSystemId, controllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdGraphicsControllersControllerIdPutTest() throws ApiException {
        String computerSystemId = null;
        String controllerId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdGraphicsControllersControllerIdPut(computerSystemId, controllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdGraphicsControllersGetTest() throws ApiException {
        String computerSystemId = null;
        Object response = api.redfishV1SystemsComputerSystemIdGraphicsControllersGet(computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdLogServicesGetTest() throws ApiException {
        String computerSystemId = null;
        Object response = api.redfishV1SystemsComputerSystemIdLogServicesGet(computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceClearLogPostTest() throws ApiException {
        String computerSystemId = null;
        String logServiceId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceClearLogPost(computerSystemId, logServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPostTest() throws ApiException {
        String computerSystemId = null;
        String logServiceId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdLogServicesLogServiceIdActionsLogServiceCollectDiagnosticDataPost(computerSystemId, logServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesGetTest() throws ApiException {
        String computerSystemId = null;
        String logServiceId = null;
        Object response = api.redfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesGet(computerSystemId, logServiceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String logServiceId = null;
        String logEntryId = null;
        Object response = api.redfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdDelete(computerSystemId, logServiceId, logEntryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdGetTest() throws ApiException {
        String computerSystemId = null;
        String logServiceId = null;
        String logEntryId = null;
        Object response = api.redfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdGet(computerSystemId, logServiceId, logEntryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String logServiceId = null;
        String logEntryId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdPatch(computerSystemId, logServiceId, logEntryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdPutTest() throws ApiException {
        String computerSystemId = null;
        String logServiceId = null;
        String logEntryId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesLogEntryIdPut(computerSystemId, logServiceId, logEntryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesPostTest() throws ApiException {
        String computerSystemId = null;
        String logServiceId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdLogServicesLogServiceIdEntriesPost(computerSystemId, logServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdLogServicesLogServiceIdGetTest() throws ApiException {
        String computerSystemId = null;
        String logServiceId = null;
        Object response = api.redfishV1SystemsComputerSystemIdLogServicesLogServiceIdGet(computerSystemId, logServiceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdLogServicesLogServiceIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String logServiceId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdLogServicesLogServiceIdPatch(computerSystemId, logServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdLogServicesLogServiceIdPutTest() throws ApiException {
        String computerSystemId = null;
        String logServiceId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdLogServicesLogServiceIdPut(computerSystemId, logServiceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryDomainsGetTest() throws ApiException {
        String computerSystemId = null;
        Object response = api.redfishV1SystemsComputerSystemIdMemoryDomainsGet(computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdGetTest() throws ApiException {
        String computerSystemId = null;
        String memoryDomainId = null;
        Object response = api.redfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdGet(computerSystemId, memoryDomainId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGetTest() throws ApiException {
        String computerSystemId = null;
        String memoryDomainId = null;
        Object response = api.redfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksGet(computerSystemId, memoryDomainId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String memoryDomainId = null;
        String memoryChunksId = null;
        Object response = api.redfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdDelete(computerSystemId, memoryDomainId, memoryChunksId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGetTest() throws ApiException {
        String computerSystemId = null;
        String memoryDomainId = null;
        String memoryChunksId = null;
        Object response = api.redfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdGet(computerSystemId, memoryDomainId, memoryChunksId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String memoryDomainId = null;
        String memoryChunksId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPatch(computerSystemId, memoryDomainId, memoryChunksId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPutTest() throws ApiException {
        String computerSystemId = null;
        String memoryDomainId = null;
        String memoryChunksId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksMemoryChunksIdPut(computerSystemId, memoryDomainId, memoryChunksId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPostTest() throws ApiException {
        String computerSystemId = null;
        String memoryDomainId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdMemoryDomainsMemoryDomainIdMemoryChunksPost(computerSystemId, memoryDomainId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryGetTest() throws ApiException {
        String computerSystemId = null;
        Object response = api.redfishV1SystemsComputerSystemIdMemoryGet(computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryDisablePassphrasePostTest() throws ApiException {
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryDisablePassphrasePost(computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryOverwriteUnitPostTest() throws ApiException {
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryOverwriteUnitPost(computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryResetPostTest() throws ApiException {
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryResetPost(computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemorySecureEraseUnitPostTest() throws ApiException {
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemorySecureEraseUnitPost(computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemorySetPassphrasePostTest() throws ApiException {
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemorySetPassphrasePost(computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryUnlockUnitPostTest() throws ApiException {
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdMemoryMemoryIdActionsMemoryUnlockUnitPost(computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryMemoryIdAssemblyGetTest() throws ApiException {
        String computerSystemId = null;
        String memoryId = null;
        Object response = api.redfishV1SystemsComputerSystemIdMemoryMemoryIdAssemblyGet(computerSystemId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryMemoryIdAssemblyPatchTest() throws ApiException {
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdMemoryMemoryIdAssemblyPatch(computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryMemoryIdAssemblyPutTest() throws ApiException {
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdMemoryMemoryIdAssemblyPut(computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryMemoryIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String computerSystemId = null;
        String memoryId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdMemoryMemoryIdCertificatesCertificateIdActionsCertificateRekeyPost(computerSystemId, memoryId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryMemoryIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String computerSystemId = null;
        String memoryId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdMemoryMemoryIdCertificatesCertificateIdActionsCertificateRenewPost(computerSystemId, memoryId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryMemoryIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String memoryId = null;
        String certificateId = null;
        Object response = api.redfishV1SystemsComputerSystemIdMemoryMemoryIdCertificatesCertificateIdDelete(computerSystemId, memoryId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryMemoryIdCertificatesCertificateIdGetTest() throws ApiException {
        String computerSystemId = null;
        String memoryId = null;
        String certificateId = null;
        Object response = api.redfishV1SystemsComputerSystemIdMemoryMemoryIdCertificatesCertificateIdGet(computerSystemId, memoryId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryMemoryIdCertificatesGetTest() throws ApiException {
        String computerSystemId = null;
        String memoryId = null;
        Object response = api.redfishV1SystemsComputerSystemIdMemoryMemoryIdCertificatesGet(computerSystemId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryMemoryIdCertificatesPostTest() throws ApiException {
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdMemoryMemoryIdCertificatesPost(computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryMemoryIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdMemoryMemoryIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryMemoryIdEnvironmentMetricsGetTest() throws ApiException {
        String computerSystemId = null;
        String memoryId = null;
        Object response = api.redfishV1SystemsComputerSystemIdMemoryMemoryIdEnvironmentMetricsGet(computerSystemId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryMemoryIdGetTest() throws ApiException {
        String computerSystemId = null;
        String memoryId = null;
        Object response = api.redfishV1SystemsComputerSystemIdMemoryMemoryIdGet(computerSystemId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPostTest() throws ApiException {
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdMemoryMemoryIdMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryMemoryIdMemoryMetricsGetTest() throws ApiException {
        String computerSystemId = null;
        String memoryId = null;
        Object response = api.redfishV1SystemsComputerSystemIdMemoryMemoryIdMemoryMetricsGet(computerSystemId, memoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryMemoryIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdMemoryMemoryIdPatch(computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemoryMemoryIdPutTest() throws ApiException {
        String computerSystemId = null;
        String memoryId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdMemoryMemoryIdPut(computerSystemId, memoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPostTest() throws ApiException {
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdMemorySummaryMemoryMetricsGetTest() throws ApiException {
        String computerSystemId = null;
        Object response = api.redfishV1SystemsComputerSystemIdMemorySummaryMemoryMetricsGet(computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdNetworkInterfacesGetTest() throws ApiException {
        String computerSystemId = null;
        Object response = api.redfishV1SystemsComputerSystemIdNetworkInterfacesGet(computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdGetTest() throws ApiException {
        String computerSystemId = null;
        String networkInterfaceId = null;
        Object response = api.redfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdGet(computerSystemId, networkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGetTest() throws ApiException {
        String computerSystemId = null;
        String networkInterfaceId = null;
        Object response = api.redfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkDeviceFunctionsGet(computerSystemId, networkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGetTest() throws ApiException {
        String computerSystemId = null;
        String networkInterfaceId = null;
        Object response = api.redfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdNetworkPortsGet(computerSystemId, networkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdPortsGetTest() throws ApiException {
        String computerSystemId = null;
        String networkInterfaceId = null;
        Object response = api.redfishV1SystemsComputerSystemIdNetworkInterfacesNetworkInterfaceIdPortsGet(computerSystemId, networkInterfaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdOperatingConfigsGetTest() throws ApiException {
        String computerSystemId = null;
        Object response = api.redfishV1SystemsComputerSystemIdOperatingConfigsGet(computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdPCIeDevicesGetTest() throws ApiException {
        String computerSystemId = null;
        Object response = api.redfishV1SystemsComputerSystemIdPCIeDevicesGet(computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdAssemblyGetTest() throws ApiException {
        String computerSystemId = null;
        String pcIeDeviceId = null;
        Object response = api.redfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdAssemblyGet(computerSystemId, pcIeDeviceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdAssemblyPatchTest() throws ApiException {
        String computerSystemId = null;
        String pcIeDeviceId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdAssemblyPatch(computerSystemId, pcIeDeviceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdAssemblyPutTest() throws ApiException {
        String computerSystemId = null;
        String pcIeDeviceId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdAssemblyPut(computerSystemId, pcIeDeviceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String computerSystemId = null;
        String pcIeDeviceId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(computerSystemId, pcIeDeviceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdEnvironmentMetricsGetTest() throws ApiException {
        String computerSystemId = null;
        String pcIeDeviceId = null;
        Object response = api.redfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdEnvironmentMetricsGet(computerSystemId, pcIeDeviceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdGetTest() throws ApiException {
        String computerSystemId = null;
        String pcIeDeviceId = null;
        Object response = api.redfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdGet(computerSystemId, pcIeDeviceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGetTest() throws ApiException {
        String computerSystemId = null;
        String pcIeDeviceId = null;
        Object response = api.redfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsGet(computerSystemId, pcIeDeviceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGetTest() throws ApiException {
        String computerSystemId = null;
        String pcIeDeviceId = null;
        String pcIeFunctionId = null;
        Object response = api.redfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdGet(computerSystemId, pcIeDeviceId, pcIeFunctionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String pcIeDeviceId = null;
        String pcIeFunctionId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdPatch(computerSystemId, pcIeDeviceId, pcIeFunctionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdPutTest() throws ApiException {
        String computerSystemId = null;
        String pcIeDeviceId = null;
        String pcIeFunctionId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPCIeFunctionsPCIeFunctionIdPut(computerSystemId, pcIeDeviceId, pcIeFunctionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String pcIeDeviceId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPatch(computerSystemId, pcIeDeviceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPutTest() throws ApiException {
        String computerSystemId = null;
        String pcIeDeviceId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdPCIeDevicesPCIeDeviceIdPut(computerSystemId, pcIeDeviceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdPatchTest() throws ApiException {
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdPatch(computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorSummaryProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPostTest() throws ApiException {
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdProcessorSummaryProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPost(computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorSummaryProcessorMetricsGetTest() throws ApiException {
        String computerSystemId = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorSummaryProcessorMetricsGet(computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsGetTest() throws ApiException {
        String computerSystemId = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsGet(computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGetTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        String accelerationFunctionId = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsAccelerationFunctionIdGet(computerSystemId, processorId, accelerationFunctionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsGetTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdAccelerationFunctionsGet(computerSystemId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdActionsProcessorResetPostTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdActionsProcessorResetPost(computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdAssemblyGetTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdAssemblyGet(computerSystemId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdAssemblyPatchTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdAssemblyPatch(computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdAssemblyPutTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdAssemblyPut(computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdCertificatesCertificateIdActionsCertificateRekeyPost(computerSystemId, processorId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdCertificatesCertificateIdActionsCertificateRenewPost(computerSystemId, processorId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        String certificateId = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdCertificatesCertificateIdDelete(computerSystemId, processorId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdCertificatesCertificateIdGetTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        String certificateId = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdCertificatesCertificateIdGet(computerSystemId, processorId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdCertificatesGetTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdCertificatesGet(computerSystemId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdCertificatesPostTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdCertificatesPost(computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdEnvironmentMetricsGetTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdEnvironmentMetricsGet(computerSystemId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdGetTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdGet(computerSystemId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPostTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdMemorySummaryMemoryMetricsActionsMemoryMetricsClearCurrentPeriodPost(computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdMemorySummaryMemoryMetricsGetTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdMemorySummaryMemoryMetricsGet(computerSystemId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdOperatingConfigsGetTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdOperatingConfigsGet(computerSystemId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdOperatingConfigsOperatingConfigIdGetTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        String operatingConfigId = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdOperatingConfigsOperatingConfigIdGet(computerSystemId, processorId, operatingConfigId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdPatch(computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPostTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPost(computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsGetTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdProcessorMetricsGet(computerSystemId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdPutTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdPut(computerSystemId, processorId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsGetTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsGet(computerSystemId, processorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPostTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ActionsProcessorResetPost(computerSystemId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGetTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyGet(computerSystemId, processorId, processorId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatchTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPatch(computerSystemId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPutTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2AssemblyPut(computerSystemId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2GetTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Get(computerSystemId, processorId, processorId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2PatchTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Patch(computerSystemId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPostTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsActionsProcessorMetricsClearCurrentPeriodPost(computerSystemId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGetTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2ProcessorMetricsGet(computerSystemId, processorId, processorId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2PutTest() throws ApiException {
        String computerSystemId = null;
        String processorId = null;
        String processorId2 = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdProcessorsProcessorIdSubProcessorsProcessorId2Put(computerSystemId, processorId, processorId2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdPutTest() throws ApiException {
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdPut(computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdSecureBootActionsSecureBootResetKeysPostTest() throws ApiException {
        String computerSystemId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdSecureBootActionsSecureBootResetKeysPost(computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdSecureBootGetTest() throws ApiException {
        String computerSystemId = null;
        Object response = api.redfishV1SystemsComputerSystemIdSecureBootGet(computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdSecureBootPatchTest() throws ApiException {
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdSecureBootPatch(computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdSecureBootPutTest() throws ApiException {
        String computerSystemId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdSecureBootPut(computerSystemId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdActionsSecureBootDatabaseResetKeysPostTest() throws ApiException {
        String computerSystemId = null;
        String databaseId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdActionsSecureBootDatabaseResetKeysPost(computerSystemId, databaseId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String computerSystemId = null;
        String databaseId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRekeyPost(computerSystemId, databaseId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String computerSystemId = null;
        String databaseId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdActionsCertificateRenewPost(computerSystemId, databaseId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String databaseId = null;
        String certificateId = null;
        Object response = api.redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdDelete(computerSystemId, databaseId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdGetTest() throws ApiException {
        String computerSystemId = null;
        String databaseId = null;
        String certificateId = null;
        Object response = api.redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesCertificateIdGet(computerSystemId, databaseId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesGetTest() throws ApiException {
        String computerSystemId = null;
        String databaseId = null;
        Object response = api.redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesGet(computerSystemId, databaseId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesPostTest() throws ApiException {
        String computerSystemId = null;
        String databaseId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdCertificatesPost(computerSystemId, databaseId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdGetTest() throws ApiException {
        String computerSystemId = null;
        String databaseId = null;
        Object response = api.redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdGet(computerSystemId, databaseId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesGetTest() throws ApiException {
        String computerSystemId = null;
        String databaseId = null;
        Object response = api.redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesGet(computerSystemId, databaseId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesPostTest() throws ApiException {
        String computerSystemId = null;
        String databaseId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesPost(computerSystemId, databaseId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String databaseId = null;
        String signatureId = null;
        Object response = api.redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdDelete(computerSystemId, databaseId, signatureId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdGetTest() throws ApiException {
        String computerSystemId = null;
        String databaseId = null;
        String signatureId = null;
        Object response = api.redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesDatabaseIdSignaturesSignatureIdGet(computerSystemId, databaseId, signatureId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesGetTest() throws ApiException {
        String computerSystemId = null;
        Object response = api.redfishV1SystemsComputerSystemIdSecureBootSecureBootDatabasesGet(computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdSimpleStorageGetTest() throws ApiException {
        String computerSystemId = null;
        Object response = api.redfishV1SystemsComputerSystemIdSimpleStorageGet(computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdSimpleStorageSimpleStorageIdGetTest() throws ApiException {
        String computerSystemId = null;
        String simpleStorageId = null;
        Object response = api.redfishV1SystemsComputerSystemIdSimpleStorageSimpleStorageIdGet(computerSystemId, simpleStorageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageGetTest() throws ApiException {
        String computerSystemId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageGet(computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdActionsStorageSetEncryptionKeyPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdActionsStorageSetEncryptionKeyPost(computerSystemId, storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String consistencyGroupId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesGet(computerSystemId, storageId, consistencyGroupId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String consistencyGroupId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesPost(computerSystemId, storageId, consistencyGroupId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(computerSystemId, storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(computerSystemId, storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCheckConsistencyPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(computerSystemId, storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(computerSystemId, storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeForceEnablePostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeForceEnablePost(computerSystemId, storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeInitializePostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeInitializePost(computerSystemId, storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(computerSystemId, storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeResumeReplicationPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeResumeReplicationPost(computerSystemId, storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(computerSystemId, storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSplitReplicationPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSplitReplicationPost(computerSystemId, storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSuspendReplicationPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(computerSystemId, storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdDelete(computerSystemId, storageId, consistencyGroupId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdGet(computerSystemId, storageId, consistencyGroupId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPatch(computerSystemId, storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPutTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String consistencyGroupId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdConsistencyGroupsConsistencyGroupIdVolumesVolumeIdPut(computerSystemId, storageId, consistencyGroupId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdControllersControllerIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String controllerId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdControllersControllerIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(computerSystemId, storageId, controllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdControllersControllerIdEnvironmentMetricsGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String controllerId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdControllersControllerIdEnvironmentMetricsGet(computerSystemId, storageId, controllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdControllersControllerIdGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String controllerId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdControllersControllerIdGet(computerSystemId, storageId, controllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdControllersControllerIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String controllerId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdControllersControllerIdPatch(computerSystemId, storageId, controllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdControllersControllerIdPutTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String controllerId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdControllersControllerIdPut(computerSystemId, storageId, controllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdControllersGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdControllersGet(computerSystemId, storageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdAssemblyGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdAssemblyGet(computerSystemId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdAssemblyPatchTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdAssemblyPatch(computerSystemId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdAssemblyPutTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdAssemblyPut(computerSystemId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRekeyPost(computerSystemId, storageId, storageControllerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRenewPost(computerSystemId, storageId, storageControllerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdDelete(computerSystemId, storageId, storageControllerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesCertificateIdGet(computerSystemId, storageId, storageControllerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesGet(computerSystemId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdCertificatesPost(computerSystemId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsGet(computerSystemId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdActionsPortResetPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdActionsPortResetPost(computerSystemId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(computerSystemId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdEnvironmentMetricsGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdEnvironmentMetricsGet(computerSystemId, storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdGet(computerSystemId, storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdPatch(computerSystemId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdPutTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdControllersStorageControllerIdPortsPortIdPut(computerSystemId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveResetPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveResetPost(computerSystemId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdActionsDriveSecureErasePost(computerSystemId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyGet(computerSystemId, storageId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPatchTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPatch(computerSystemId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPutTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdAssemblyPut(computerSystemId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRekeyPost(computerSystemId, storageId, driveId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdActionsCertificateRenewPost(computerSystemId, storageId, driveId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        String certificateId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdDelete(computerSystemId, storageId, driveId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        String certificateId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesCertificateIdGet(computerSystemId, storageId, driveId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesGet(computerSystemId, storageId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdCertificatesPost(computerSystemId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(computerSystemId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdEnvironmentMetricsGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdEnvironmentMetricsGet(computerSystemId, storageId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdGet(computerSystemId, storageId, driveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdPatch(computerSystemId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdPutTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String driveId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdDrivesDriveIdPut(computerSystemId, storageId, driveId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String endpointGroupId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdDelete(computerSystemId, storageId, endpointGroupId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String endpointGroupId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdGet(computerSystemId, storageId, endpointGroupId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String endpointGroupId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdPatch(computerSystemId, storageId, endpointGroupId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdPutTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String endpointGroupId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsEndpointGroupIdPut(computerSystemId, storageId, endpointGroupId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsGet(computerSystemId, storageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdEndpointGroupsPost(computerSystemId, storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingDrivesGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(computerSystemId, storageId, fileSystemId, capacitySourceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesGet(computerSystemId, storageId, fileSystemId, capacitySourceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesPost(computerSystemId, storageId, fileSystemId, capacitySourceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPutTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String fileSystemId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdFileSystemsFileSystemIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut(computerSystemId, storageId, fileSystemId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdGet(computerSystemId, storageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdPatch(computerSystemId, storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdPutTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdPut(computerSystemId, storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdAssemblyGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdAssemblyGet(computerSystemId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdAssemblyPatchTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdAssemblyPatch(computerSystemId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdAssemblyPutTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdAssemblyPut(computerSystemId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRekeyPost(computerSystemId, storageId, storageControllerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdActionsCertificateRenewPost(computerSystemId, storageId, storageControllerId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdDelete(computerSystemId, storageId, storageControllerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String certificateId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesCertificateIdGet(computerSystemId, storageId, storageControllerId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesGet(computerSystemId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdCertificatesPost(computerSystemId, storageId, storageControllerId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsGet(computerSystemId, storageId, storageControllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdActionsPortResetPost(computerSystemId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdEnvironmentMetricsActionsEnvironmentMetricsResetMetricsPost(computerSystemId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdEnvironmentMetricsGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdEnvironmentMetricsGet(computerSystemId, storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdGet(computerSystemId, storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdMetricsGet(computerSystemId, storageId, storageControllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPatch(computerSystemId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPutTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storageControllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStorageControllersStorageControllerIdPortsPortIdPut(computerSystemId, storageId, storageControllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesGet(computerSystemId, storageId, storagePoolId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesPost(computerSystemId, storageId, storagePoolId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeAssignReplicaTargetPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(computerSystemId, storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeChangeRAIDLayoutPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(computerSystemId, storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCheckConsistencyPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCheckConsistencyPost(computerSystemId, storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCreateReplicaTargetPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(computerSystemId, storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeForceEnablePostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeForceEnablePost(computerSystemId, storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeInitializePostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeInitializePost(computerSystemId, storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(computerSystemId, storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeResumeReplicationPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeResumeReplicationPost(computerSystemId, storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(computerSystemId, storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSplitReplicationPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSplitReplicationPost(computerSystemId, storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSuspendReplicationPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdActionsVolumeSuspendReplicationPost(computerSystemId, storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdDelete(computerSystemId, storageId, storagePoolId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdGet(computerSystemId, storageId, storagePoolId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPatch(computerSystemId, storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPutTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdAllocatedVolumesVolumeIdPut(computerSystemId, storageId, storagePoolId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingDrivesGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(computerSystemId, storageId, storagePoolId, capacitySourceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesGet(computerSystemId, storageId, storagePoolId, capacitySourceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesPost(computerSystemId, storageId, storagePoolId, capacitySourceId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCheckConsistencyPost(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeForceEnablePost(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeInitializePost(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeResumeReplicationPost(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSplitReplicationPost(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdActionsVolumeSuspendReplicationPost(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdDelete(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdGet(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPatch(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPutTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String storagePoolId = null;
        String capacitySourceId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdStoragePoolsStoragePoolIdCapacitySourcesCapacitySourceIdProvidingVolumesVolumeIdPut(computerSystemId, storageId, storagePoolId, capacitySourceId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdVolumesGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdVolumesGet(computerSystemId, storageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdVolumesPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdVolumesPost(computerSystemId, storageId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeAssignReplicaTargetPost(computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeChangeRAIDLayoutPost(computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCheckConsistencyPost(computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeCreateReplicaTargetPost(computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeForceEnablePost(computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeInitializePost(computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeRemoveReplicaRelationshipPost(computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeResumeReplicationPost(computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeReverseReplicationRelationshipPost(computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSplitReplicationPost(computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPostTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdActionsVolumeSuspendReplicationPost(computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingDrivesGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        String capacitySourceId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdCapacitySourcesCapacitySourceIdProvidingDrivesGet(computerSystemId, storageId, volumeId, capacitySourceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdDelete(computerSystemId, storageId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdGetTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdGet(computerSystemId, storageId, volumeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPatch(computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPutTest() throws ApiException {
        String computerSystemId = null;
        String storageId = null;
        String volumeId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdStorageStorageIdVolumesVolumeIdPut(computerSystemId, storageId, volumeId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdUSBControllersControllerIdGetTest() throws ApiException {
        String computerSystemId = null;
        String controllerId = null;
        Object response = api.redfishV1SystemsComputerSystemIdUSBControllersControllerIdGet(computerSystemId, controllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdUSBControllersControllerIdPortsGetTest() throws ApiException {
        String computerSystemId = null;
        String controllerId = null;
        Object response = api.redfishV1SystemsComputerSystemIdUSBControllersControllerIdPortsGet(computerSystemId, controllerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdUSBControllersControllerIdPortsPortIdActionsPortResetPostTest() throws ApiException {
        String computerSystemId = null;
        String controllerId = null;
        String portId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdUSBControllersControllerIdPortsPortIdActionsPortResetPost(computerSystemId, controllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdUSBControllersControllerIdPortsPortIdGetTest() throws ApiException {
        String computerSystemId = null;
        String controllerId = null;
        String portId = null;
        Object response = api.redfishV1SystemsComputerSystemIdUSBControllersControllerIdPortsPortIdGet(computerSystemId, controllerId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdUSBControllersControllerIdPortsPortIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String controllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdUSBControllersControllerIdPortsPortIdPatch(computerSystemId, controllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdUSBControllersControllerIdPortsPortIdPutTest() throws ApiException {
        String computerSystemId = null;
        String controllerId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdUSBControllersControllerIdPortsPortIdPut(computerSystemId, controllerId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdUSBControllersGetTest() throws ApiException {
        String computerSystemId = null;
        Object response = api.redfishV1SystemsComputerSystemIdUSBControllersGet(computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdVirtualMediaGetTest() throws ApiException {
        String computerSystemId = null;
        Object response = api.redfishV1SystemsComputerSystemIdVirtualMediaGet(computerSystemId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPostTest() throws ApiException {
        String computerSystemId = null;
        String virtualMediaId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost(computerSystemId, virtualMediaId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPostTest() throws ApiException {
        String computerSystemId = null;
        String virtualMediaId = null;
        Object body = null;
        RedfishError response = api.redfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost(computerSystemId, virtualMediaId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String computerSystemId = null;
        String virtualMediaId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesCertificateIdActionsCertificateRekeyPost(computerSystemId, virtualMediaId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String computerSystemId = null;
        String virtualMediaId = null;
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesCertificateIdActionsCertificateRenewPost(computerSystemId, virtualMediaId, certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesCertificateIdDeleteTest() throws ApiException {
        String computerSystemId = null;
        String virtualMediaId = null;
        String certificateId = null;
        Object response = api.redfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesCertificateIdDelete(computerSystemId, virtualMediaId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesCertificateIdGetTest() throws ApiException {
        String computerSystemId = null;
        String virtualMediaId = null;
        String certificateId = null;
        Object response = api.redfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesCertificateIdGet(computerSystemId, virtualMediaId, certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesGetTest() throws ApiException {
        String computerSystemId = null;
        String virtualMediaId = null;
        Object response = api.redfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesGet(computerSystemId, virtualMediaId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesPostTest() throws ApiException {
        String computerSystemId = null;
        String virtualMediaId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdCertificatesPost(computerSystemId, virtualMediaId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdGetTest() throws ApiException {
        String computerSystemId = null;
        String virtualMediaId = null;
        Object response = api.redfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdGet(computerSystemId, virtualMediaId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdPatchTest() throws ApiException {
        String computerSystemId = null;
        String virtualMediaId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdPatch(computerSystemId, virtualMediaId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdPutTest() throws ApiException {
        String computerSystemId = null;
        String virtualMediaId = null;
        Object body = null;
        Object response = api.redfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdPut(computerSystemId, virtualMediaId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsGetTest() throws ApiException {
        Object response = api.redfishV1SystemsGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsPostTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1SystemsPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdGetTest() throws ApiException {
        String systemId = null;
        String fabricAdapterId = null;
        Object response = api.redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdGet(systemId, fabricAdapterId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPatchTest() throws ApiException {
        String systemId = null;
        String fabricAdapterId = null;
        Object body = null;
        Object response = api.redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPatch(systemId, fabricAdapterId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATGetTest() throws ApiException {
        String systemId = null;
        String fabricAdapterId = null;
        String portId = null;
        Object response = api.redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATGet(systemId, fabricAdapterId, portId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATPostTest() throws ApiException {
        String systemId = null;
        String fabricAdapterId = null;
        String portId = null;
        Object body = null;
        Object response = api.redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATPost(systemId, fabricAdapterId, portId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdDeleteTest() throws ApiException {
        String systemId = null;
        String fabricAdapterId = null;
        String portId = null;
        String vcATEntryId = null;
        Object response = api.redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdDelete(systemId, fabricAdapterId, portId, vcATEntryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdGetTest() throws ApiException {
        String systemId = null;
        String fabricAdapterId = null;
        String portId = null;
        String vcATEntryId = null;
        Object response = api.redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdGet(systemId, fabricAdapterId, portId, vcATEntryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdPatchTest() throws ApiException {
        String systemId = null;
        String fabricAdapterId = null;
        String portId = null;
        String vcATEntryId = null;
        Object body = null;
        Object response = api.redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdPatch(systemId, fabricAdapterId, portId, vcATEntryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdPutTest() throws ApiException {
        String systemId = null;
        String fabricAdapterId = null;
        String portId = null;
        String vcATEntryId = null;
        Object body = null;
        Object response = api.redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPortsPortIdVCATVCATEntryIdPut(systemId, fabricAdapterId, portId, vcATEntryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPutTest() throws ApiException {
        String systemId = null;
        String fabricAdapterId = null;
        Object body = null;
        Object response = api.redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdPut(systemId, fabricAdapterId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATGetTest() throws ApiException {
        String systemId = null;
        String fabricAdapterId = null;
        Object response = api.redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATGet(systemId, fabricAdapterId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATPostTest() throws ApiException {
        String systemId = null;
        String fabricAdapterId = null;
        Object body = null;
        Object response = api.redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATPost(systemId, fabricAdapterId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdDeleteTest() throws ApiException {
        String systemId = null;
        String fabricAdapterId = null;
        String vcATEntryId = null;
        Object response = api.redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdDelete(systemId, fabricAdapterId, vcATEntryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdGetTest() throws ApiException {
        String systemId = null;
        String fabricAdapterId = null;
        String vcATEntryId = null;
        Object response = api.redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdGet(systemId, fabricAdapterId, vcATEntryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdPatchTest() throws ApiException {
        String systemId = null;
        String fabricAdapterId = null;
        String vcATEntryId = null;
        Object body = null;
        Object response = api.redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdPatch(systemId, fabricAdapterId, vcATEntryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdPutTest() throws ApiException {
        String systemId = null;
        String fabricAdapterId = null;
        String vcATEntryId = null;
        Object body = null;
        Object response = api.redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdREQVCATVCATEntryIdPut(systemId, fabricAdapterId, vcATEntryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATGetTest() throws ApiException {
        String systemId = null;
        String fabricAdapterId = null;
        Object response = api.redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATGet(systemId, fabricAdapterId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATPostTest() throws ApiException {
        String systemId = null;
        String fabricAdapterId = null;
        Object body = null;
        Object response = api.redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATPost(systemId, fabricAdapterId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdDeleteTest() throws ApiException {
        String systemId = null;
        String fabricAdapterId = null;
        String vcATEntryId = null;
        Object response = api.redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdDelete(systemId, fabricAdapterId, vcATEntryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdGetTest() throws ApiException {
        String systemId = null;
        String fabricAdapterId = null;
        String vcATEntryId = null;
        Object response = api.redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdGet(systemId, fabricAdapterId, vcATEntryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdPatchTest() throws ApiException {
        String systemId = null;
        String fabricAdapterId = null;
        String vcATEntryId = null;
        Object body = null;
        Object response = api.redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdPatch(systemId, fabricAdapterId, vcATEntryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdPutTest() throws ApiException {
        String systemId = null;
        String fabricAdapterId = null;
        String vcATEntryId = null;
        Object body = null;
        Object response = api.redfishV1SystemsSystemIdFabricAdaptersFabricAdapterIdRSPVCATVCATEntryIdPut(systemId, fabricAdapterId, vcATEntryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TaskServiceGetTest() throws ApiException {
        Object response = api.redfishV1TaskServiceGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TaskServicePatchTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1TaskServicePatch(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TaskServicePutTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1TaskServicePut(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TaskServiceTasksGetTest() throws ApiException {
        Object response = api.redfishV1TaskServiceTasksGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TaskServiceTasksTaskIdDeleteTest() throws ApiException {
        String taskId = null;
        Object response = api.redfishV1TaskServiceTasksTaskIdDelete(taskId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TaskServiceTasksTaskIdGetTest() throws ApiException {
        String taskId = null;
        Object response = api.redfishV1TaskServiceTasksTaskIdGet(taskId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TaskServiceTasksTaskIdSubTasksGetTest() throws ApiException {
        String taskId = null;
        Object response = api.redfishV1TaskServiceTasksTaskIdSubTasksGet(taskId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TaskServiceTasksTaskIdSubTasksTaskId2DeleteTest() throws ApiException {
        String taskId = null;
        String taskId2 = null;
        Object response = api.redfishV1TaskServiceTasksTaskIdSubTasksTaskId2Delete(taskId, taskId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TaskServiceTasksTaskIdSubTasksTaskId2GetTest() throws ApiException {
        String taskId = null;
        String taskId2 = null;
        Object response = api.redfishV1TaskServiceTasksTaskIdSubTasksTaskId2Get(taskId, taskId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceActionsTelemetryServiceClearMetricReportsPostTest() throws ApiException {
        Object body = null;
        RedfishError response = api.redfishV1TelemetryServiceActionsTelemetryServiceClearMetricReportsPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceActionsTelemetryServiceResetMetricReportDefinitionsToDefaultsPostTest() throws ApiException {
        Object body = null;
        RedfishError response = api.redfishV1TelemetryServiceActionsTelemetryServiceResetMetricReportDefinitionsToDefaultsPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceActionsTelemetryServiceResetTriggersToDefaultsPostTest() throws ApiException {
        Object body = null;
        RedfishError response = api.redfishV1TelemetryServiceActionsTelemetryServiceResetTriggersToDefaultsPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceActionsTelemetryServiceSubmitTestMetricReportPostTest() throws ApiException {
        Object body = null;
        RedfishError response = api.redfishV1TelemetryServiceActionsTelemetryServiceSubmitTestMetricReportPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceGetTest() throws ApiException {
        Object response = api.redfishV1TelemetryServiceGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceLogServiceActionsLogServiceClearLogPostTest() throws ApiException {
        Object body = null;
        RedfishError response = api.redfishV1TelemetryServiceLogServiceActionsLogServiceClearLogPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceLogServiceActionsLogServiceCollectDiagnosticDataPostTest() throws ApiException {
        Object body = null;
        RedfishError response = api.redfishV1TelemetryServiceLogServiceActionsLogServiceCollectDiagnosticDataPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceLogServiceEntriesGetTest() throws ApiException {
        Object response = api.redfishV1TelemetryServiceLogServiceEntriesGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceLogServiceEntriesLogEntryIdDeleteTest() throws ApiException {
        String logEntryId = null;
        Object response = api.redfishV1TelemetryServiceLogServiceEntriesLogEntryIdDelete(logEntryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceLogServiceEntriesLogEntryIdGetTest() throws ApiException {
        String logEntryId = null;
        Object response = api.redfishV1TelemetryServiceLogServiceEntriesLogEntryIdGet(logEntryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceLogServiceEntriesLogEntryIdPatchTest() throws ApiException {
        String logEntryId = null;
        Object body = null;
        Object response = api.redfishV1TelemetryServiceLogServiceEntriesLogEntryIdPatch(logEntryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceLogServiceEntriesLogEntryIdPutTest() throws ApiException {
        String logEntryId = null;
        Object body = null;
        Object response = api.redfishV1TelemetryServiceLogServiceEntriesLogEntryIdPut(logEntryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceLogServiceEntriesPostTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1TelemetryServiceLogServiceEntriesPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceLogServiceGetTest() throws ApiException {
        Object response = api.redfishV1TelemetryServiceLogServiceGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceLogServicePatchTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1TelemetryServiceLogServicePatch(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceLogServicePutTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1TelemetryServiceLogServicePut(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceMetricDefinitionsGetTest() throws ApiException {
        Object response = api.redfishV1TelemetryServiceMetricDefinitionsGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdDeleteTest() throws ApiException {
        String metricDefinitionId = null;
        Object response = api.redfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdDelete(metricDefinitionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdGetTest() throws ApiException {
        String metricDefinitionId = null;
        Object response = api.redfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdGet(metricDefinitionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdPatchTest() throws ApiException {
        String metricDefinitionId = null;
        Object body = null;
        Object response = api.redfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdPatch(metricDefinitionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdPutTest() throws ApiException {
        String metricDefinitionId = null;
        Object body = null;
        Object response = api.redfishV1TelemetryServiceMetricDefinitionsMetricDefinitionIdPut(metricDefinitionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceMetricDefinitionsPostTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1TelemetryServiceMetricDefinitionsPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceMetricReportDefinitionsGetTest() throws ApiException {
        Object response = api.redfishV1TelemetryServiceMetricReportDefinitionsGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdDeleteTest() throws ApiException {
        String metricReportDefinitionId = null;
        Object response = api.redfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdDelete(metricReportDefinitionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdGetTest() throws ApiException {
        String metricReportDefinitionId = null;
        Object response = api.redfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdGet(metricReportDefinitionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdPatchTest() throws ApiException {
        String metricReportDefinitionId = null;
        Object body = null;
        Object response = api.redfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdPatch(metricReportDefinitionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdPutTest() throws ApiException {
        String metricReportDefinitionId = null;
        Object body = null;
        Object response = api.redfishV1TelemetryServiceMetricReportDefinitionsMetricReportDefinitionIdPut(metricReportDefinitionId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceMetricReportDefinitionsPostTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1TelemetryServiceMetricReportDefinitionsPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceMetricReportsGetTest() throws ApiException {
        Object response = api.redfishV1TelemetryServiceMetricReportsGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceMetricReportsMetricReportIdDeleteTest() throws ApiException {
        String metricReportId = null;
        Object response = api.redfishV1TelemetryServiceMetricReportsMetricReportIdDelete(metricReportId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceMetricReportsMetricReportIdGetTest() throws ApiException {
        String metricReportId = null;
        Object response = api.redfishV1TelemetryServiceMetricReportsMetricReportIdGet(metricReportId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServicePatchTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1TelemetryServicePatch(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServicePutTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1TelemetryServicePut(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceTriggersGetTest() throws ApiException {
        Object response = api.redfishV1TelemetryServiceTriggersGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceTriggersPostTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1TelemetryServiceTriggersPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceTriggersTriggersIdDeleteTest() throws ApiException {
        String triggersId = null;
        Object response = api.redfishV1TelemetryServiceTriggersTriggersIdDelete(triggersId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceTriggersTriggersIdGetTest() throws ApiException {
        String triggersId = null;
        Object response = api.redfishV1TelemetryServiceTriggersTriggersIdGet(triggersId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceTriggersTriggersIdPatchTest() throws ApiException {
        String triggersId = null;
        Object body = null;
        Object response = api.redfishV1TelemetryServiceTriggersTriggersIdPatch(triggersId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1TelemetryServiceTriggersTriggersIdPutTest() throws ApiException {
        String triggersId = null;
        Object body = null;
        Object response = api.redfishV1TelemetryServiceTriggersTriggersIdPut(triggersId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1UpdateServiceActionsUpdateServiceSimpleUpdatePostTest() throws ApiException {
        Object body = null;
        RedfishError response = api.redfishV1UpdateServiceActionsUpdateServiceSimpleUpdatePost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1UpdateServiceActionsUpdateServiceStartUpdatePostTest() throws ApiException {
        Object body = null;
        RedfishError response = api.redfishV1UpdateServiceActionsUpdateServiceStartUpdatePost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1UpdateServiceFirmwareInventoryGetTest() throws ApiException {
        Object response = api.redfishV1UpdateServiceFirmwareInventoryGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1UpdateServiceFirmwareInventorySoftwareInventoryIdGetTest() throws ApiException {
        String softwareInventoryId = null;
        Object response = api.redfishV1UpdateServiceFirmwareInventorySoftwareInventoryIdGet(softwareInventoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1UpdateServiceFirmwareInventorySoftwareInventoryIdPatchTest() throws ApiException {
        String softwareInventoryId = null;
        Object body = null;
        Object response = api.redfishV1UpdateServiceFirmwareInventorySoftwareInventoryIdPatch(softwareInventoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1UpdateServiceFirmwareInventorySoftwareInventoryIdPutTest() throws ApiException {
        String softwareInventoryId = null;
        Object body = null;
        Object response = api.redfishV1UpdateServiceFirmwareInventorySoftwareInventoryIdPut(softwareInventoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1UpdateServiceGetTest() throws ApiException {
        Object response = api.redfishV1UpdateServiceGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1UpdateServicePatchTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1UpdateServicePatch(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1UpdateServicePutTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1UpdateServicePut(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1UpdateServiceRemoteServerCertificatesCertificateIdActionsCertificateRekeyPostTest() throws ApiException {
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1UpdateServiceRemoteServerCertificatesCertificateIdActionsCertificateRekeyPost(certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1UpdateServiceRemoteServerCertificatesCertificateIdActionsCertificateRenewPostTest() throws ApiException {
        String certificateId = null;
        Object body = null;
        Object response = api.redfishV1UpdateServiceRemoteServerCertificatesCertificateIdActionsCertificateRenewPost(certificateId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1UpdateServiceRemoteServerCertificatesCertificateIdDeleteTest() throws ApiException {
        String certificateId = null;
        Object response = api.redfishV1UpdateServiceRemoteServerCertificatesCertificateIdDelete(certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1UpdateServiceRemoteServerCertificatesCertificateIdGetTest() throws ApiException {
        String certificateId = null;
        Object response = api.redfishV1UpdateServiceRemoteServerCertificatesCertificateIdGet(certificateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1UpdateServiceRemoteServerCertificatesGetTest() throws ApiException {
        Object response = api.redfishV1UpdateServiceRemoteServerCertificatesGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1UpdateServiceRemoteServerCertificatesPostTest() throws ApiException {
        Object body = null;
        Object response = api.redfishV1UpdateServiceRemoteServerCertificatesPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1UpdateServiceSoftwareInventoryGetTest() throws ApiException {
        Object response = api.redfishV1UpdateServiceSoftwareInventoryGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1UpdateServiceSoftwareInventorySoftwareInventoryIdGetTest() throws ApiException {
        String softwareInventoryId = null;
        Object response = api.redfishV1UpdateServiceSoftwareInventorySoftwareInventoryIdGet(softwareInventoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1UpdateServiceSoftwareInventorySoftwareInventoryIdPatchTest() throws ApiException {
        String softwareInventoryId = null;
        Object body = null;
        Object response = api.redfishV1UpdateServiceSoftwareInventorySoftwareInventoryIdPatch(softwareInventoryId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redfishV1UpdateServiceSoftwareInventorySoftwareInventoryIdPutTest() throws ApiException {
        String softwareInventoryId = null;
        Object body = null;
        Object response = api.redfishV1UpdateServiceSoftwareInventorySoftwareInventoryIdPut(softwareInventoryId, body);

        // TODO: test validations
    }
    
}
